
czujnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800d080  0800d080  0001d080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3c0  0800d3c0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3c0  0800d3c0  0001d3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3c8  0800d3c8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3c8  0800d3c8  0001d3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3cc  0800d3cc  0001d3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d3d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  200001e0  0800d5ac  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  0800d5ac  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f821  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e5d  00000000  00000000  0003fa2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001850  00000000  00000000  00043890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001638  00000000  00000000  000450e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000281f5  00000000  00000000  00046718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000164ba  00000000  00000000  0006e90d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbccb  00000000  00000000  00084dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00180a92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e8  00000000  00000000  00180b10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d068 	.word	0x0800d068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800d068 	.word	0x0800d068

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <arm_pid_init_f32>:
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edc3 7a00 	vstr	s15, [r3]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff8:	eeb1 7a67 	vneg.f32	s14, s15
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001002:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edc3 7a01 	vstr	s15, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1a      	ldr	r2, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <arm_pid_init_f32+0x64>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	330c      	adds	r3, #12
 8001022:	220c      	movs	r2, #12
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f008 fcd0 	bl	80099cc <memset>
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f94b 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f806 	bl	8001050 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f008 f886 	bl	8009154 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f965 	bl	800133e <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f92d 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004
 80010ac:	20000000 	.word	0x20000000

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000004 	.word	0x20000004
 80010d4:	20000210 	.word	0x20000210

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000210 	.word	0x20000210

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_Delay+0x40>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000004 	.word	0x20000004

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff3e 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff31 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa2 	bl	8001290 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d004      	beq.n	8001374 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e00c      	b.n	800138e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2205      	movs	r2, #5
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80013ac:	4ba9      	ldr	r3, [pc, #676]	; (8001654 <HAL_ETH_Init+0x2b8>)
 80013ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e183      	b.n	80016ca <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f006 fe30 	bl	800803c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	4b9e      	ldr	r3, [pc, #632]	; (8001658 <HAL_ETH_Init+0x2bc>)
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	4a9d      	ldr	r2, [pc, #628]	; (8001658 <HAL_ETH_Init+0x2bc>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	6453      	str	r3, [r2, #68]	; 0x44
 80013e8:	4b9b      	ldr	r3, [pc, #620]	; (8001658 <HAL_ETH_Init+0x2bc>)
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013f4:	4b99      	ldr	r3, [pc, #612]	; (800165c <HAL_ETH_Init+0x2c0>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a98      	ldr	r2, [pc, #608]	; (800165c <HAL_ETH_Init+0x2c0>)
 80013fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013fe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001400:	4b96      	ldr	r3, [pc, #600]	; (800165c <HAL_ETH_Init+0x2c0>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4994      	ldr	r1, [pc, #592]	; (800165c <HAL_ETH_Init+0x2c0>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001426:	f7ff fe57 	bl	80010d8 <HAL_GetTick>
 800142a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800142c:	e011      	b.n	8001452 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800142e:	f7ff fe53 	bl	80010d8 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800143c:	d909      	bls.n	8001452 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e13b      	b.n	80016ca <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e4      	bne.n	800142e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f023 031c 	bic.w	r3, r3, #28
 8001472:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001474:	f002 fbc2 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8001478:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a78      	ldr	r2, [pc, #480]	; (8001660 <HAL_ETH_Init+0x2c4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d908      	bls.n	8001494 <HAL_ETH_Init+0xf8>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4a77      	ldr	r2, [pc, #476]	; (8001664 <HAL_ETH_Init+0x2c8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d804      	bhi.n	8001494 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e027      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4a73      	ldr	r2, [pc, #460]	; (8001664 <HAL_ETH_Init+0x2c8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d908      	bls.n	80014ae <HAL_ETH_Init+0x112>
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_ETH_Init+0x2cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d804      	bhi.n	80014ae <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f043 030c 	orr.w	r3, r3, #12
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	e01a      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4a6d      	ldr	r2, [pc, #436]	; (8001668 <HAL_ETH_Init+0x2cc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d903      	bls.n	80014be <HAL_ETH_Init+0x122>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4a6c      	ldr	r2, [pc, #432]	; (800166c <HAL_ETH_Init+0x2d0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d911      	bls.n	80014e2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4a6a      	ldr	r2, [pc, #424]	; (800166c <HAL_ETH_Init+0x2d0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d908      	bls.n	80014d8 <HAL_ETH_Init+0x13c>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4a69      	ldr	r2, [pc, #420]	; (8001670 <HAL_ETH_Init+0x2d4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d804      	bhi.n	80014d8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e005      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	e000      	b.n	80014e4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014e2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f956 	bl	80017a4 <HAL_ETH_WritePHYRegister>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001502:	6939      	ldr	r1, [r7, #16]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f9b3 	bl	8001870 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0d9      	b.n	80016ca <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001516:	20ff      	movs	r0, #255	; 0xff
 8001518:	f7ff fdea 	bl	80010f0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a7 	beq.w	8001674 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001526:	f7ff fdd7 	bl	80010d8 <HAL_GetTick>
 800152a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	461a      	mov	r2, r3
 8001532:	2101      	movs	r1, #1
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f8cd 	bl	80016d4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800153a:	f7ff fdcd 	bl	80010d8 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d90f      	bls.n	800156c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f98c 	bl	8001870 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0ae      	b.n	80016ca <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0da      	beq.n	800152c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f911 	bl	80017a4 <HAL_ETH_WritePHYRegister>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00b      	beq.n	80015a0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f96e 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800159c:	2301      	movs	r3, #1
 800159e:	e094      	b.n	80016ca <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fd9a 	bl	80010d8 <HAL_GetTick>
 80015a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	461a      	mov	r2, r3
 80015ac:	2101      	movs	r1, #1
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f890 	bl	80016d4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015b4:	f7ff fd90 	bl	80010d8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d90f      	bls.n	80015e6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f94f 	bl	8001870 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e071      	b.n	80016ca <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0da      	beq.n	80015a6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	461a      	mov	r2, r3
 80015f6:	211f      	movs	r1, #31
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f86b 	bl	80016d4 <HAL_ETH_ReadPHYRegister>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f930 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001618:	2301      	movs	r3, #1
 800161a:	e056      	b.n	80016ca <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e002      	b.n	8001636 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	e037      	b.n	80016b8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e032      	b.n	80016b8 <HAL_ETH_Init+0x31c>
 8001652:	bf00      	nop
 8001654:	03938700 	.word	0x03938700
 8001658:	40023800 	.word	0x40023800
 800165c:	40013800 	.word	0x40013800
 8001660:	01312cff 	.word	0x01312cff
 8001664:	02160ebf 	.word	0x02160ebf
 8001668:	039386ff 	.word	0x039386ff
 800166c:	05f5e0ff 	.word	0x05f5e0ff
 8001670:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001684:	4313      	orrs	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f889 	bl	80017a4 <HAL_ETH_WritePHYRegister>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800169c:	6939      	ldr	r1, [r7, #16]
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f8e6 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00c      	b.n	80016ca <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016b4:	f7ff fd1c 	bl	80010f0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8d8 	bl	8001870 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop

080016d4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	460b      	mov	r3, r1
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b82      	cmp	r3, #130	; 0x82
 80016f4:	d101      	bne.n	80016fa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
 80016f8:	e050      	b.n	800179c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2282      	movs	r2, #130	; 0x82
 80016fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 031c 	and.w	r3, r3, #28
 8001710:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8a1b      	ldrh	r3, [r3, #16]
 8001716:	02db      	lsls	r3, r3, #11
 8001718:	b29b      	uxth	r3, r3
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001720:	897b      	ldrh	r3, [r7, #10]
 8001722:	019b      	lsls	r3, r3, #6
 8001724:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001746:	f7ff fcc7 	bl	80010d8 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800174c:	e015      	b.n	800177a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800174e:	f7ff fcc3 	bl	80010d8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d309      	bcc.n	8001772 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e014      	b.n	800179c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e4      	bne.n	800174e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	460b      	mov	r3, r1
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b42      	cmp	r3, #66	; 0x42
 80017c4:	d101      	bne.n	80017ca <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
 80017c8:	e04e      	b.n	8001868 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2242      	movs	r2, #66	; 0x42
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 031c 	and.w	r3, r3, #28
 80017e0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8a1b      	ldrh	r3, [r3, #16]
 80017e6:	02db      	lsls	r3, r3, #11
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80017f0:	897b      	ldrh	r3, [r7, #10]
 80017f2:	019b      	lsls	r3, r3, #6
 80017f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001820:	f7ff fc5a 	bl	80010d8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001826:	e015      	b.n	8001854 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001828:	f7ff fc56 	bl	80010d8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001836:	d309      	bcc.n	800184c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e00d      	b.n	8001868 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1e4      	bne.n	8001828 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0b0      	sub	sp, #192	; 0xc0
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800188c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001894:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800189e:	2300      	movs	r3, #0
 80018a0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80018b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ba:	663b      	str	r3, [r7, #96]	; 0x60
 80018bc:	e001      	b.n	80018c2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80018c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018cc:	2300      	movs	r3, #0
 80018ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80018dc:	2340      	movs	r3, #64	; 0x40
 80018de:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001944:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001948:	4bab      	ldr	r3, [pc, #684]	; (8001bf8 <ETH_MACDMAConfig+0x388>)
 800194a:	4013      	ands	r3, r2
 800194c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001950:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001954:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001958:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800195c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001962:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001966:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800196a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001970:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001974:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001978:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800197a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800197c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800197e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001980:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001984:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001986:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800198a:	4313      	orrs	r3, r2
 800198c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001998:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff fba3 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019b2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80019b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019b8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80019ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80019bc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80019be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80019c2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80019c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80019c8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80019ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80019ce:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80019d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80019d4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80019d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80019e0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019e2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fb7e 	bl	80010f0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019fc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a06:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a10:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001a1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a20:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a24:	4013      	ands	r3, r2
 8001a26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a2e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a34:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001a3a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001a40:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001a46:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001a48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001a4c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a60:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff fb3f 	bl	80010f0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a7a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7ff fb2a 	bl	80010f0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aae:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001ab4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ab8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001aca:	2304      	movs	r3, #4
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001afa:	4413      	add	r3, r2
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001b02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <ETH_MACDMAConfig+0x38c>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b0e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b10:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b12:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b14:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b16:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b18:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b1a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b1c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b1e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b20:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b22:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b24:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b26:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001b2a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001b2e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b34:	4313      	orrs	r3, r2
 8001b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b42:	4413      	add	r3, r2
 8001b44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b48:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b52:	4413      	add	r3, r2
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7ff fac8 	bl	80010f0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b68:	4413      	add	r3, r2
 8001b6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b6e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b74:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b78:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b7c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b80:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b84:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b86:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b8a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b98:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff faa1 	bl	80010f0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bba:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d10d      	bne.n	8001be0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	f241 031c 	movw	r3, #4124	; 0x101c
 8001bcc:	4413      	add	r3, r2
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6811      	ldr	r1, [r2, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <ETH_MACDMAConfig+0x390>)
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	f241 031c 	movw	r3, #4124	; 0x101c
 8001bdc:	440b      	add	r3, r1
 8001bde:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	461a      	mov	r2, r3
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f80b 	bl	8001c04 <ETH_MACAddressConfig>
}
 8001bee:	bf00      	nop
 8001bf0:	37c0      	adds	r7, #192	; 0xc0
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	ff20810f 	.word	0xff20810f
 8001bfc:	f8de3f23 	.word	0xf8de3f23
 8001c00:	00010040 	.word	0x00010040

08001c04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3305      	adds	r3, #5
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	3204      	adds	r2, #4
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <ETH_MACAddressConfig+0x68>)
 8001c26:	4413      	add	r3, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3303      	adds	r3, #3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	061a      	lsls	r2, r3, #24
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3301      	adds	r3, #1
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <ETH_MACAddressConfig+0x6c>)
 8001c56:	4413      	add	r3, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	6013      	str	r3, [r2, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40028040 	.word	0x40028040
 8001c70:	40028044 	.word	0x40028044

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e175      	b.n	8001f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8164 	bne.w	8001f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x4e>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d123      	bne.n	8001d0a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	220f      	movs	r2, #15
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	69b9      	ldr	r1, [r7, #24]
 8001d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0203 	and.w	r2, r3, #3
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d00b      	beq.n	8001d5e <HAL_GPIO_Init+0xea>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d52:	2b11      	cmp	r3, #17
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80be 	beq.w	8001f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a64      	ldr	r2, [pc, #400]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e16:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d037      	beq.n	8001eb2 <HAL_GPIO_Init+0x23e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0x23a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a55      	ldr	r2, [pc, #340]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x236>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a53      	ldr	r2, [pc, #332]	; (8001fac <HAL_GPIO_Init+0x338>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x22e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_GPIO_Init+0x33c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x22a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x340>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <HAL_GPIO_Init+0x344>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4f      	ldr	r2, [pc, #316]	; (8001fbc <HAL_GPIO_Init+0x348>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4e      	ldr	r2, [pc, #312]	; (8001fc0 <HAL_GPIO_Init+0x34c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	e012      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e8e:	230a      	movs	r3, #10
 8001e90:	e010      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ec4:	4934      	ldr	r1, [pc, #208]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef6:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f20:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae86 	bls.w	8001c94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3724      	adds	r7, #36	; 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40021c00 	.word	0x40021c00
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40022400 	.word	0x40022400
 8001fc4:	40013c00 	.word	0x40013c00

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fe4:	e003      	b.n	8001fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	041a      	lsls	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e07f      	b.n	800210e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f006 fd54 	bl	8008ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800204c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800205c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	e006      	b.n	8002084 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002082:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d104      	bne.n	8002096 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002094:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_I2C_Init+0x11c>)
 80020a2:	430b      	orrs	r3, r1
 80020a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	ea42 0103 	orr.w	r1, r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	021a      	lsls	r2, r3, #8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69d9      	ldr	r1, [r3, #28]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	02008000 	.word	0x02008000

0800211c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	461a      	mov	r2, r3
 8002128:	460b      	mov	r3, r1
 800212a:	817b      	strh	r3, [r7, #10]
 800212c:	4613      	mov	r3, r2
 800212e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b20      	cmp	r3, #32
 800213a:	f040 80da 	bne.w	80022f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_I2C_Master_Transmit+0x30>
 8002148:	2302      	movs	r3, #2
 800214a:	e0d3      	b.n	80022f4 <HAL_I2C_Master_Transmit+0x1d8>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002154:	f7fe ffc0 	bl	80010d8 <HAL_GetTick>
 8002158:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2319      	movs	r3, #25
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 fd80 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0be      	b.n	80022f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2221      	movs	r2, #33	; 0x21
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2210      	movs	r2, #16
 8002182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	893a      	ldrh	r2, [r7, #8]
 8002196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2bff      	cmp	r3, #255	; 0xff
 80021a6:	d90e      	bls.n	80021c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	4b51      	ldr	r3, [pc, #324]	; (80022fc <HAL_I2C_Master_Transmit+0x1e0>)
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fe76 	bl	8002eb0 <I2C_TransferConfig>
 80021c4:	e06c      	b.n	80022a0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	8979      	ldrh	r1, [r7, #10]
 80021d8:	4b48      	ldr	r3, [pc, #288]	; (80022fc <HAL_I2C_Master_Transmit+0x1e0>)
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fe65 	bl	8002eb0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80021e6:	e05b      	b.n	80022a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	6a39      	ldr	r1, [r7, #32]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fd7d 	bl	8002cec <I2C_WaitOnTXISFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e07b      	b.n	80022f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d034      	beq.n	80022a0 <HAL_I2C_Master_Transmit+0x184>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	d130      	bne.n	80022a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	2200      	movs	r2, #0
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fd0f 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e04d      	b.n	80022f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	2bff      	cmp	r3, #255	; 0xff
 8002260:	d90e      	bls.n	8002280 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	22ff      	movs	r2, #255	; 0xff
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	b2da      	uxtb	r2, r3
 800226e:	8979      	ldrh	r1, [r7, #10]
 8002270:	2300      	movs	r3, #0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fe19 	bl	8002eb0 <I2C_TransferConfig>
 800227e:	e00f      	b.n	80022a0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	b2da      	uxtb	r2, r3
 8002290:	8979      	ldrh	r1, [r7, #10]
 8002292:	2300      	movs	r3, #0
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fe08 	bl	8002eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d19e      	bne.n	80021e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	6a39      	ldr	r1, [r7, #32]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fd5c 	bl	8002d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e01a      	b.n	80022f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2220      	movs	r2, #32
 80022c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_I2C_Master_Transmit+0x1e4>)
 80022d2:	400b      	ands	r3, r1
 80022d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	80002000 	.word	0x80002000
 8002300:	fe00e800 	.word	0xfe00e800

08002304 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
  }
}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d010      	beq.n	800237e <HAL_I2C_ER_IRQHandler+0x46>
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	09db      	lsrs	r3, r3, #7
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f043 0201 	orr.w	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	0a9b      	lsrs	r3, r3, #10
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d010      	beq.n	80023ac <HAL_I2C_ER_IRQHandler+0x74>
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	09db      	lsrs	r3, r3, #7
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f043 0208 	orr.w	r2, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	0a5b      	lsrs	r3, r3, #9
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_I2C_ER_IRQHandler+0xa2>
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	09db      	lsrs	r3, r3, #7
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	f043 0202 	orr.w	r2, r3, #2
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 030b 	and.w	r3, r3, #11
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fb35 	bl	8002a5c <I2C_ITError>
  }
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	70fb      	strb	r3, [r7, #3]
 800242e:	4613      	mov	r3, r2
 8002430:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <I2C_Slave_ISR_IT+0x24>
 800249a:	2302      	movs	r3, #2
 800249c:	e0f0      	b.n	8002680 <I2C_Slave_ISR_IT+0x206>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d04d      	beq.n	800254e <I2C_Slave_ISR_IT+0xd4>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d047      	beq.n	800254e <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d128      	bne.n	800251a <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b28      	cmp	r3, #40	; 0x28
 80024d2:	d108      	bne.n	80024e6 <I2C_Slave_ISR_IT+0x6c>
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024da:	d104      	bne.n	80024e6 <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024dc:	6979      	ldr	r1, [r7, #20]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fa68 	bl	80029b4 <I2C_ITListenCplt>
 80024e4:	e032      	b.n	800254c <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b29      	cmp	r3, #41	; 0x29
 80024f0:	d10e      	bne.n	8002510 <I2C_Slave_ISR_IT+0x96>
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024f8:	d00a      	beq.n	8002510 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2210      	movs	r2, #16
 8002500:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fb6a 	bl	8002bdc <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f93f 	bl	800278c <I2C_ITSlaveSeqCplt>
 800250e:	e01d      	b.n	800254c <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002518:	e09a      	b.n	8002650 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2210      	movs	r2, #16
 8002520:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <I2C_Slave_ISR_IT+0xc4>
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800253a:	f040 8089 	bne.w	8002650 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4619      	mov	r1, r3
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa89 	bl	8002a5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800254a:	e081      	b.n	8002650 <I2C_Slave_ISR_IT+0x1d6>
 800254c:	e080      	b.n	8002650 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d034      	beq.n	80025c4 <I2C_Slave_ISR_IT+0x14a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02e      	beq.n	80025c4 <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01c      	beq.n	80025aa <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0304 	bic.w	r3, r3, #4
 8002576:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d14f      	bne.n	8002654 <I2C_Slave_ISR_IT+0x1da>
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ba:	d04b      	beq.n	8002654 <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f8e5 	bl	800278c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80025c2:	e047      	b.n	8002654 <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <I2C_Slave_ISR_IT+0x16c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	08db      	lsrs	r3, r3, #3
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f852 	bl	8002688 <I2C_ITAddrCplt>
 80025e4:	e037      	b.n	8002656 <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d031      	beq.n	8002656 <I2C_Slave_ISR_IT+0x1dc>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02b      	beq.n	8002656 <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
 8002638:	e00d      	b.n	8002656 <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d002      	beq.n	8002648 <I2C_Slave_ISR_IT+0x1ce>
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f89f 	bl	800278c <I2C_ITSlaveSeqCplt>
 800264e:	e002      	b.n	8002656 <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8002650:	bf00      	nop
 8002652:	e000      	b.n	8002656 <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 8002654:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <I2C_Slave_ISR_IT+0x1fc>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800266e:	6979      	ldr	r1, [r7, #20]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f8c9 	bl	8002808 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800269e:	2b28      	cmp	r3, #40	; 0x28
 80026a0:	d168      	bne.n	8002774 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80026c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80026dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d137      	bne.n	8002756 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	09db      	lsrs	r3, r3, #7
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	89bb      	ldrh	r3, [r7, #12]
 80026ee:	4053      	eors	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f003 0306 	and.w	r3, r3, #6
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11c      	bne.n	8002734 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	2b02      	cmp	r3, #2
 800270e:	d139      	bne.n	8002784 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2208      	movs	r2, #8
 800271c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002726:	89ba      	ldrh	r2, [r7, #12]
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fe78 	bl	8002422 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002732:	e027      	b.n	8002784 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8002734:	893b      	ldrh	r3, [r7, #8]
 8002736:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002738:	2104      	movs	r1, #4
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fbe6 	bl	8002f0c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002748:	89ba      	ldrh	r2, [r7, #12]
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fe67 	bl	8002422 <HAL_I2C_AddrCallback>
}
 8002754:	e016      	b.n	8002784 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002756:	2104      	movs	r1, #4
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fbd7 	bl	8002f0c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002766:	89ba      	ldrh	r2, [r7, #12]
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fe58 	bl	8002422 <HAL_I2C_AddrCallback>
}
 8002772:	e007      	b.n	8002784 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2208      	movs	r2, #8
 800277a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b29      	cmp	r3, #41	; 0x29
 80027a6:	d112      	bne.n	80027ce <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2228      	movs	r2, #40	; 0x28
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2221      	movs	r2, #33	; 0x21
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027b6:	2101      	movs	r1, #1
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fba7 	bl	8002f0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fe17 	bl	80023fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027cc:	e017      	b.n	80027fe <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b2a      	cmp	r3, #42	; 0x2a
 80027d8:	d111      	bne.n	80027fe <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2228      	movs	r2, #40	; 0x28
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2222      	movs	r2, #34	; 0x22
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027e8:	2102      	movs	r1, #2
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fb8e 	bl	8002f0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fe08 	bl	800240e <HAL_I2C_SlaveRxCpltCallback>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2220      	movs	r2, #32
 8002824:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002826:	2107      	movs	r1, #7
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fb6f 	bl	8002f0c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800283c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b58      	ldr	r3, [pc, #352]	; (80029ac <I2C_ITSlaveCplt+0x1a4>)
 800284a:	400b      	ands	r3, r1
 800284c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f9c4 	bl	8002bdc <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	0b9b      	lsrs	r3, r3, #14
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d018      	beq.n	800289a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002876:	e010      	b.n	800289a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	0bdb      	lsrs	r3, r3, #15
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	2b00      	cmp	r3, #0
 8002918:	d010      	beq.n	800293c <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f89b 	bl	8002a5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b28      	cmp	r3, #40	; 0x28
 8002930:	d138      	bne.n	80029a4 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002932:	68f9      	ldr	r1, [r7, #12]
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f83d 	bl	80029b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800293a:	e033      	b.n	80029a4 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002944:	d011      	beq.n	800296a <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff20 	bl	800278c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <I2C_ITSlaveCplt+0x1a8>)
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fd6b 	bl	800243e <HAL_I2C_ListenCpltCallback>
}
 8002968:	e01c      	b.n	80029a4 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b22      	cmp	r3, #34	; 0x22
 8002974:	d10b      	bne.n	800298e <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fd41 	bl	800240e <HAL_I2C_SlaveRxCpltCallback>
}
 800298c:	e00a      	b.n	80029a4 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fd2b 	bl	80023fa <HAL_I2C_SlaveTxCpltCallback>
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	fe00e800 	.word	0xfe00e800
 80029b0:	ffff0000 	.word	0xffff0000

080029b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <I2C_ITListenCplt+0xa4>)
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d022      	beq.n	8002a32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a32:	2107      	movs	r1, #7
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa69 	bl	8002f0c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2210      	movs	r2, #16
 8002a40:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff fcf7 	bl	800243e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6c:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a55      	ldr	r2, [pc, #340]	; (8002bd0 <I2C_ITError+0x174>)
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b28      	cmp	r3, #40	; 0x28
 8002a92:	d005      	beq.n	8002aa0 <I2C_ITError+0x44>
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b29      	cmp	r3, #41	; 0x29
 8002a98:	d002      	beq.n	8002aa0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a9e:	d10e      	bne.n	8002abe <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002aa0:	2103      	movs	r1, #3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa32 	bl	8002f0c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2228      	movs	r2, #40	; 0x28
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a46      	ldr	r2, [pc, #280]	; (8002bd4 <I2C_ITError+0x178>)
 8002aba:	635a      	str	r2, [r3, #52]	; 0x34
 8002abc:	e013      	b.n	8002ae6 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002abe:	2107      	movs	r1, #7
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fa23 	bl	8002f0c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b60      	cmp	r3, #96	; 0x60
 8002ad0:	d003      	beq.n	8002ada <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002af4:	d123      	bne.n	8002b3e <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d05c      	beq.n	8002bc8 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <I2C_ITError+0x17c>)
 8002b14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fc17 	bl	8001356 <HAL_DMA_Abort_IT>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04c      	beq.n	8002bc8 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b3c:	e044      	b.n	8002bc8 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4c:	d123      	bne.n	8002b96 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b5c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d030      	beq.n	8002bc8 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <I2C_ITError+0x17c>)
 8002b6c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fbeb 	bl	8001356 <HAL_DMA_Abort_IT>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d020      	beq.n	8002bc8 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b90:	4610      	mov	r0, r2
 8002b92:	4798      	blx	r3
}
 8002b94:	e018      	b.n	8002bc8 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b60      	cmp	r3, #96	; 0x60
 8002ba0:	d10b      	bne.n	8002bba <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fc57 	bl	8002466 <HAL_I2C_AbortCpltCallback>
}
 8002bb8:	e006      	b.n	8002bc8 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff fc45 	bl	8002452 <HAL_I2C_ErrorCallback>
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	ffff0000 	.word	0xffff0000
 8002bd4:	0800247b 	.word	0x0800247b
 8002bd8:	08002c25 	.word	0x08002c25

08002bdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d103      	bne.n	8002bfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d007      	beq.n	8002c18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	619a      	str	r2, [r3, #24]
  }
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	2200      	movs	r2, #0
 8002c38:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2200      	movs	r2, #0
 8002c40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b60      	cmp	r3, #96	; 0x60
 8002c4c:	d107      	bne.n	8002c5e <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff fc05 	bl	8002466 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c5c:	e002      	b.n	8002c64 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff fbf7 	bl	8002452 <HAL_I2C_ErrorCallback>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	e022      	b.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d01e      	beq.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fa27 	bl	80010d8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d113      	bne.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e00f      	b.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d0cd      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf8:	e02c      	b.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f870 	bl	8002de4 <I2C_IsAcknowledgeFailed>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e02a      	b.n	8002d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d01e      	beq.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fe f9df 	bl	80010d8 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d113      	bne.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d1cb      	bne.n	8002cfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d78:	e028      	b.n	8002dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f830 	bl	8002de4 <I2C_IsAcknowledgeFailed>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e026      	b.n	8002ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7fe f9a3 	bl	80010d8 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d113      	bne.n	8002dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e007      	b.n	8002ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d1cf      	bne.n	8002d7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d151      	bne.n	8002ea2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dfe:	e022      	b.n	8002e46 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d01e      	beq.n	8002e46 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7fe f966 	bl	80010d8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <I2C_IsAcknowledgeFailed+0x3a>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d113      	bne.n	8002e46 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e02e      	b.n	8002ea4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d1d5      	bne.n	8002e00 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2220      	movs	r2, #32
 8002e62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff feb9 	bl	8002bdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <I2C_IsAcknowledgeFailed+0xc8>)
 8002e76:	400b      	ands	r3, r1
 8002e78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	fe00e800 	.word	0xfe00e800

08002eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	817b      	strh	r3, [r7, #10]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	0d5b      	lsrs	r3, r3, #21
 8002ecc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <I2C_TransferConfig+0x58>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	ea02 0103 	and.w	r1, r2, r3
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ee0:	7a7b      	ldrb	r3, [r7, #9]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	03ff63ff 	.word	0x03ff63ff

08002f0c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f1c:	887b      	ldrh	r3, [r7, #2]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00f      	beq.n	8002f46 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002f2c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f3a:	2b28      	cmp	r3, #40	; 0x28
 8002f3c:	d003      	beq.n	8002f46 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002f44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00f      	beq.n	8002f70 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002f56:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f64:	2b28      	cmp	r3, #40	; 0x28
 8002f66:	d003      	beq.n	8002f70 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002f6e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	f003 0311 	and.w	r3, r3, #17
 8002f88:	2b11      	cmp	r3, #17
 8002f8a:	d103      	bne.n	8002f94 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002f92:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	f003 0312 	and.w	r3, r3, #18
 8002f9a:	2b12      	cmp	r3, #18
 8002f9c:	d103      	bne.n	8002fa6 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f043 0320 	orr.w	r3, r3, #32
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	f003 0312 	and.w	r3, r3, #18
 8002fac:	2b12      	cmp	r3, #18
 8002fae:	d103      	bne.n	8002fb8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	400a      	ands	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d138      	bne.n	800305e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e032      	b.n	8003060 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2224      	movs	r2, #36	; 0x24
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003028:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e000      	b.n	8003060 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
  }
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	d139      	bne.n	80030f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800308c:	2302      	movs	r3, #2
 800308e:	e033      	b.n	80030f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	; 0x24
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	b08f      	sub	sp, #60	; 0x3c
 8003108:	af0a      	add	r7, sp, #40	; 0x28
 800310a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e10a      	b.n	800332c <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f006 fb9c 	bl	8009868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 ffc5 	bl	80070cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	687e      	ldr	r6, [r7, #4]
 800314a:	466d      	mov	r5, sp
 800314c:	f106 0410 	add.w	r4, r6, #16
 8003150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003158:	e894 0003 	ldmia.w	r4, {r0, r1}
 800315c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003160:	1d33      	adds	r3, r6, #4
 8003162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f003 ff59 	bl	800701c <USB_CoreInit>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0d7      	b.n	800332c <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f003 ffb3 	bl	80070ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e04a      	b.n	8003224 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	333d      	adds	r3, #61	; 0x3d
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	333c      	adds	r3, #60	; 0x3c
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	b298      	uxth	r0, r3
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	3342      	adds	r3, #66	; 0x42
 80031ca:	4602      	mov	r2, r0
 80031cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	333f      	adds	r3, #63	; 0x3f
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3344      	adds	r3, #68	; 0x44
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3348      	adds	r3, #72	; 0x48
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3350      	adds	r3, #80	; 0x50
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	3301      	adds	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d3af      	bcc.n	800318e <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	e044      	b.n	80032be <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	3301      	adds	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d3b5      	bcc.n	8003234 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	687e      	ldr	r6, [r7, #4]
 80032d0:	466d      	mov	r5, sp
 80032d2:	f106 0410 	add.w	r4, r6, #16
 80032d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80032e6:	1d33      	adds	r3, r6, #4
 80032e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	f003 ff2a 	bl	8007144 <USB_DevInit>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e014      	b.n	800332c <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f80a 	bl	8003334 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f004 f8ea 	bl	80074fe <USB_DevDisconnect>

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003334 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_PCDEx_ActivateLPM+0x44>)
 8003364:	4313      	orrs	r3, r2
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	10000003 	.word	0x10000003

0800337c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40007000 	.word	0x40007000

0800339c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e25c      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8087 	beq.w	80034ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c0:	4b96      	ldr	r3, [pc, #600]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d00c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033cc:	4b93      	ldr	r3, [pc, #588]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d112      	bne.n	80033fe <HAL_RCC_OscConfig+0x62>
 80033d8:	4b90      	ldr	r3, [pc, #576]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e4:	d10b      	bne.n	80033fe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e6:	4b8d      	ldr	r3, [pc, #564]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d06c      	beq.n	80034cc <HAL_RCC_OscConfig+0x130>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d168      	bne.n	80034cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e236      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x7a>
 8003408:	4b84      	ldr	r3, [pc, #528]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a83      	ldr	r2, [pc, #524]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800340e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	e02e      	b.n	8003474 <HAL_RCC_OscConfig+0xd8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x9c>
 800341e:	4b7f      	ldr	r3, [pc, #508]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7e      	ldr	r2, [pc, #504]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b7c      	ldr	r3, [pc, #496]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7b      	ldr	r2, [pc, #492]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xd8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0xc0>
 8003442:	4b76      	ldr	r3, [pc, #472]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a75      	ldr	r2, [pc, #468]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b73      	ldr	r3, [pc, #460]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a72      	ldr	r2, [pc, #456]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xd8>
 800345c:	4b6f      	ldr	r3, [pc, #444]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6e      	ldr	r2, [pc, #440]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b6c      	ldr	r3, [pc, #432]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6b      	ldr	r2, [pc, #428]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd fe2c 	bl	80010d8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd fe28 	bl	80010d8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1ea      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b61      	ldr	r3, [pc, #388]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xe8>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fe18 	bl	80010d8 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fd fe14 	bl	80010d8 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1d6      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x110>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d069      	beq.n	80035ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034da:	4b50      	ldr	r3, [pc, #320]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b4d      	ldr	r3, [pc, #308]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x190>
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x17a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1aa      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	493d      	ldr	r1, [pc, #244]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e040      	b.n	80035ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d023      	beq.n	800357c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a38      	ldr	r2, [pc, #224]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd fdca 	bl	80010d8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003548:	f7fd fdc6 	bl	80010d8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e188      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	4b30      	ldr	r3, [pc, #192]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4929      	ldr	r1, [pc, #164]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
 800357a:	e018      	b.n	80035ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_OscConfig+0x280>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_RCC_OscConfig+0x280>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fd fda6 	bl	80010d8 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003590:	f7fd fda2 	bl	80010d8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e164      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d038      	beq.n	800362c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d019      	beq.n	80035f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80035c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c6:	4a15      	ldr	r2, [pc, #84]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd fd83 	bl	80010d8 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fd fd7f 	bl	80010d8 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e141      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80035ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x23a>
 80035f4:	e01a      	b.n	800362c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80035f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_RCC_OscConfig+0x280>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003602:	f7fd fd69 	bl	80010d8 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360a:	f7fd fd65 	bl	80010d8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d903      	bls.n	8003620 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e127      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
 800361c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	4b94      	ldr	r3, [pc, #592]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ee      	bne.n	800360a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a4 	beq.w	8003782 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b8e      	ldr	r3, [pc, #568]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4a8a      	ldr	r2, [pc, #552]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
 8003652:	4b88      	ldr	r3, [pc, #544]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003662:	4b85      	ldr	r3, [pc, #532]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800366e:	4b82      	ldr	r3, [pc, #520]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a81      	ldr	r2, [pc, #516]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fd fd2d 	bl	80010d8 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fd fd29 	bl	80010d8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b64      	cmp	r3, #100	; 0x64
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0eb      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003694:	4b78      	ldr	r3, [pc, #480]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x31a>
 80036a8:	4b72      	ldr	r3, [pc, #456]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a71      	ldr	r2, [pc, #452]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70
 80036b4:	e02d      	b.n	8003712 <HAL_RCC_OscConfig+0x376>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x33c>
 80036be:	4b6d      	ldr	r3, [pc, #436]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a6c      	ldr	r2, [pc, #432]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ca:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a69      	ldr	r2, [pc, #420]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036d0:	f023 0304 	bic.w	r3, r3, #4
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	e01c      	b.n	8003712 <HAL_RCC_OscConfig+0x376>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_OscConfig+0x35e>
 80036e0:	4b64      	ldr	r3, [pc, #400]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4a63      	ldr	r2, [pc, #396]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4a60      	ldr	r2, [pc, #384]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70
 80036f8:	e00b      	b.n	8003712 <HAL_RCC_OscConfig+0x376>
 80036fa:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a5a      	ldr	r2, [pc, #360]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d015      	beq.n	8003746 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fd fcdd 	bl	80010d8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fd fcd9 	bl	80010d8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e099      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	4b4e      	ldr	r3, [pc, #312]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ee      	beq.n	8003722 <HAL_RCC_OscConfig+0x386>
 8003744:	e014      	b.n	8003770 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fd fcc7 	bl	80010d8 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fd fcc3 	bl	80010d8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e083      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ee      	bne.n	800374e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003776:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	4a3e      	ldr	r2, [pc, #248]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800377c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003780:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d06f      	beq.n	800386a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378a:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b08      	cmp	r3, #8
 8003794:	d067      	beq.n	8003866 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d149      	bne.n	8003832 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b35      	ldr	r3, [pc, #212]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a34      	ldr	r2, [pc, #208]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fd fc95 	bl	80010d8 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fd fc91 	bl	80010d8 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e053      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f0      	bne.n	80037b2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	019b      	lsls	r3, r3, #6
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	3b01      	subs	r3, #1
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	061b      	lsls	r3, r3, #24
 80037f4:	4313      	orrs	r3, r2
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037fc:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd fc65 	bl	80010d8 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003812:	f7fd fc61 	bl	80010d8 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e023      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x476>
 8003830:	e01b      	b.n	800386a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800383c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fd fc4b 	bl	80010d8 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003846:	f7fd fc47 	bl	80010d8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e009      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x4aa>
 8003864:	e001      	b.n	800386a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0ce      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003894:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d910      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 020f 	bic.w	r2, r3, #15
 80038aa:	4964      	ldr	r1, [pc, #400]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b62      	ldr	r3, [pc, #392]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b6      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038dc:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a57      	ldr	r2, [pc, #348]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f4:	4b52      	ldr	r3, [pc, #328]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a51      	ldr	r2, [pc, #324]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4b4f      	ldr	r3, [pc, #316]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	494c      	ldr	r1, [pc, #304]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d040      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d115      	bne.n	800395e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e07d      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d107      	bne.n	800394e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	4b40      	ldr	r3, [pc, #256]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e071      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	4b3c      	ldr	r3, [pc, #240]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e069      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395e:	4b38      	ldr	r3, [pc, #224]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 0203 	bic.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4935      	ldr	r1, [pc, #212]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fd fbb2 	bl	80010d8 <HAL_GetTick>
 8003974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	e00a      	b.n	800398e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003978:	f7fd fbae 	bl	80010d8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e051      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 020c 	and.w	r2, r3, #12
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	429a      	cmp	r2, r3
 800399e:	d1eb      	bne.n	8003978 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d210      	bcs.n	80039d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 020f 	bic.w	r2, r3, #15
 80039b6:	4921      	ldr	r1, [pc, #132]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e030      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4915      	ldr	r1, [pc, #84]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	490d      	ldr	r1, [pc, #52]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a0e:	f000 f81d 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a12:	4601      	mov	r1, r0
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	5cd3      	ldrb	r3, [r2, r3]
 8003a22:	fa21 f303 	lsr.w	r3, r1, r3
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <HAL_RCC_ClockConfig+0x1cc>)
 8003a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fd fb10 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00
 8003a40:	40023800 	.word	0x40023800
 8003a44:	0800d0f8 	.word	0x0800d0f8
 8003a48:	20000008 	.word	0x20000008

08003a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a62:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d007      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x32>
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d008      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x38>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 80b4 	bne.w	8003be0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4b5e      	ldr	r3, [pc, #376]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a7a:	60bb      	str	r3, [r7, #8]
       break;
 8003a7c:	e0b3      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7e:	4b5e      	ldr	r3, [pc, #376]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a80:	60bb      	str	r3, [r7, #8]
      break;
 8003a82:	e0b0      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a84:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a8e:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04a      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9a:	4b55      	ldr	r3, [pc, #340]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	f04f 0400 	mov.w	r4, #0
 8003aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	ea03 0501 	and.w	r5, r3, r1
 8003ab0:	ea04 0602 	and.w	r6, r4, r2
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	f04f 0400 	mov.w	r4, #0
 8003ac0:	0154      	lsls	r4, r2, #5
 8003ac2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ac6:	014b      	lsls	r3, r1, #5
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4622      	mov	r2, r4
 8003acc:	1b49      	subs	r1, r1, r5
 8003ace:	eb62 0206 	sbc.w	r2, r2, r6
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	f04f 0400 	mov.w	r4, #0
 8003ada:	0194      	lsls	r4, r2, #6
 8003adc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ae0:	018b      	lsls	r3, r1, #6
 8003ae2:	1a5b      	subs	r3, r3, r1
 8003ae4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	00e2      	lsls	r2, r4, #3
 8003af2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003af6:	00d9      	lsls	r1, r3, #3
 8003af8:	460b      	mov	r3, r1
 8003afa:	4614      	mov	r4, r2
 8003afc:	195b      	adds	r3, r3, r5
 8003afe:	eb44 0406 	adc.w	r4, r4, r6
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	0262      	lsls	r2, r4, #9
 8003b0c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b10:	0259      	lsls	r1, r3, #9
 8003b12:	460b      	mov	r3, r1
 8003b14:	4614      	mov	r4, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f04f 0400 	mov.w	r4, #0
 8003b20:	461a      	mov	r2, r3
 8003b22:	4623      	mov	r3, r4
 8003b24:	f7fd f8d0 	bl	8000cc8 <__aeabi_uldivmod>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e049      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	f04f 0400 	mov.w	r4, #0
 8003b3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	ea03 0501 	and.w	r5, r3, r1
 8003b46:	ea04 0602 	and.w	r6, r4, r2
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	4632      	mov	r2, r6
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f04f 0400 	mov.w	r4, #0
 8003b56:	0154      	lsls	r4, r2, #5
 8003b58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b5c:	014b      	lsls	r3, r1, #5
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4622      	mov	r2, r4
 8003b62:	1b49      	subs	r1, r1, r5
 8003b64:	eb62 0206 	sbc.w	r2, r2, r6
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	0194      	lsls	r4, r2, #6
 8003b72:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b76:	018b      	lsls	r3, r1, #6
 8003b78:	1a5b      	subs	r3, r3, r1
 8003b7a:	eb64 0402 	sbc.w	r4, r4, r2
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	00e2      	lsls	r2, r4, #3
 8003b88:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b8c:	00d9      	lsls	r1, r3, #3
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4614      	mov	r4, r2
 8003b92:	195b      	adds	r3, r3, r5
 8003b94:	eb44 0406 	adc.w	r4, r4, r6
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	02a2      	lsls	r2, r4, #10
 8003ba2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ba6:	0299      	lsls	r1, r3, #10
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4614      	mov	r4, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	4621      	mov	r1, r4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f04f 0400 	mov.w	r4, #0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4623      	mov	r3, r4
 8003bba:	f7fd f885 	bl	8000cc8 <__aeabi_uldivmod>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	60bb      	str	r3, [r7, #8]
      break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003be2:	60bb      	str	r3, [r7, #8]
      break;
 8003be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be6:	68bb      	ldr	r3, [r7, #8]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	007a1200 	.word	0x007a1200

08003bfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000008 	.word	0x20000008

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c18:	f7ff fff0 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c1c:	4601      	mov	r1, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0a9b      	lsrs	r3, r3, #10
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4a03      	ldr	r2, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2a:	5cd3      	ldrb	r3, [r2, r3]
 8003c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	0800d108 	.word	0x0800d108

08003c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c40:	f7ff ffdc 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c44:	4601      	mov	r1, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0b5b      	lsrs	r3, r3, #13
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4a03      	ldr	r2, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	0800d108 	.word	0x0800d108

08003c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d012      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c8c:	4b69      	ldr	r3, [pc, #420]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a68      	ldr	r2, [pc, #416]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	4b66      	ldr	r3, [pc, #408]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	4964      	ldr	r1, [pc, #400]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d017      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cbe:	4b5d      	ldr	r3, [pc, #372]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	4959      	ldr	r1, [pc, #356]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d017      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cfa:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	494a      	ldr	r1, [pc, #296]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d18:	d101      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 808b 	beq.w	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	4b3a      	ldr	r3, [pc, #232]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	4a39      	ldr	r2, [pc, #228]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6413      	str	r3, [r2, #64]	; 0x40
 8003d54:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d60:	4b35      	ldr	r3, [pc, #212]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a34      	ldr	r2, [pc, #208]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fd f9b4 	bl	80010d8 <HAL_GetTick>
 8003d70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d74:	f7fd f9b0 	bl	80010d8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e355      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d035      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d02e      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dba:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dd2:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d114      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd f978 	bl	80010d8 <HAL_GetTick>
 8003de8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fd f974 	bl	80010d8 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e317      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0ee      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1a:	d111      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e2a:	400b      	ands	r3, r1
 8003e2c:	4901      	ldr	r1, [pc, #4]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	0ffffcff 	.word	0x0ffffcff
 8003e40:	4bb0      	ldr	r3, [pc, #704]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4aaf      	ldr	r2, [pc, #700]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e4a:	6093      	str	r3, [r2, #8]
 8003e4c:	4bad      	ldr	r3, [pc, #692]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e58:	49aa      	ldr	r1, [pc, #680]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d010      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e6a:	4ba6      	ldr	r3, [pc, #664]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e70:	4aa4      	ldr	r2, [pc, #656]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e7a:	4ba2      	ldr	r3, [pc, #648]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	499f      	ldr	r1, [pc, #636]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e98:	4b9a      	ldr	r3, [pc, #616]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea6:	4997      	ldr	r1, [pc, #604]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eba:	4b92      	ldr	r3, [pc, #584]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec8:	498e      	ldr	r1, [pc, #568]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003edc:	4b89      	ldr	r3, [pc, #548]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eea:	4986      	ldr	r1, [pc, #536]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003efe:	4b81      	ldr	r3, [pc, #516]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	497d      	ldr	r1, [pc, #500]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f20:	4b78      	ldr	r3, [pc, #480]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	4975      	ldr	r1, [pc, #468]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f42:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f023 020c 	bic.w	r2, r3, #12
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f50:	496c      	ldr	r1, [pc, #432]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f64:	4b67      	ldr	r3, [pc, #412]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	4964      	ldr	r1, [pc, #400]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f86:	4b5f      	ldr	r3, [pc, #380]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	495b      	ldr	r1, [pc, #364]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fa8:	4b56      	ldr	r3, [pc, #344]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	4953      	ldr	r1, [pc, #332]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fca:	4b4e      	ldr	r3, [pc, #312]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	494a      	ldr	r1, [pc, #296]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fec:	4b45      	ldr	r3, [pc, #276]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	4942      	ldr	r1, [pc, #264]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401c:	4939      	ldr	r1, [pc, #228]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004030:	4b34      	ldr	r3, [pc, #208]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800403e:	4931      	ldr	r1, [pc, #196]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d011      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004052:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004060:	4928      	ldr	r1, [pc, #160]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004070:	d101      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004072:	2301      	movs	r3, #1
 8004074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004082:	2301      	movs	r3, #1
 8004084:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004092:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	4918      	ldr	r1, [pc, #96]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c4:	490f      	ldr	r1, [pc, #60]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d005      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040da:	f040 80d8 	bne.w	800428e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a08      	ldr	r2, [pc, #32]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ea:	f7fc fff5 	bl	80010d8 <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040f2:	f7fc fff1 	bl	80010d8 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b64      	cmp	r3, #100	; 0x64
 80040fe:	d903      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e196      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004104:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004108:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ee      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d021      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004128:	4b64      	ldr	r3, [pc, #400]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412e:	0c1b      	lsrs	r3, r3, #16
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004136:	4b61      	ldr	r3, [pc, #388]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413c:	0e1b      	lsrs	r3, r3, #24
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	019a      	lsls	r2, r3, #6
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	431a      	orrs	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	061b      	lsls	r3, r3, #24
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	071b      	lsls	r3, r3, #28
 800415c:	4957      	ldr	r1, [pc, #348]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02e      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418e:	d129      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004190:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	0f1b      	lsrs	r3, r3, #28
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	019a      	lsls	r2, r3, #6
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	431a      	orrs	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	071b      	lsls	r3, r3, #28
 80041c4:	493d      	ldr	r1, [pc, #244]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041cc:	4b3b      	ldr	r3, [pc, #236]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d2:	f023 021f 	bic.w	r2, r3, #31
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	3b01      	subs	r3, #1
 80041dc:	4937      	ldr	r1, [pc, #220]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041f0:	4b32      	ldr	r3, [pc, #200]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80041f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f6:	0e1b      	lsrs	r3, r3, #24
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041fe:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004204:	0f1b      	lsrs	r3, r3, #28
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	019a      	lsls	r2, r3, #6
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	431a      	orrs	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	431a      	orrs	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	071b      	lsls	r3, r3, #28
 8004224:	4925      	ldr	r1, [pc, #148]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d011      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	019a      	lsls	r2, r3, #6
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	061b      	lsls	r3, r3, #24
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	071b      	lsls	r3, r3, #28
 8004254:	4919      	ldr	r1, [pc, #100]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800425c:	4b17      	ldr	r3, [pc, #92]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004262:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fc ff36 	bl	80010d8 <HAL_GetTick>
 800426c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004270:	f7fc ff32 	bl	80010d8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e0d7      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004282:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 80cd 	bne.w	8004430 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a08      	ldr	r2, [pc, #32]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a2:	f7fc ff19 	bl	80010d8 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042aa:	f7fc ff15 	bl	80010d8 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b64      	cmp	r3, #100	; 0x64
 80042b6:	d903      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0ba      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80042bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042c0:	4b5e      	ldr	r3, [pc, #376]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042cc:	d0ed      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02e      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d12a      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042f6:	4b51      	ldr	r3, [pc, #324]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	0c1b      	lsrs	r3, r3, #16
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004304:	4b4d      	ldr	r3, [pc, #308]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	0f1b      	lsrs	r3, r3, #28
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	019a      	lsls	r2, r3, #6
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	431a      	orrs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	071b      	lsls	r3, r3, #28
 800432a:	4944      	ldr	r1, [pc, #272]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004332:	4b42      	ldr	r3, [pc, #264]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	3b01      	subs	r3, #1
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	493d      	ldr	r1, [pc, #244]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d022      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800435c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004360:	d11d      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004362:	4b36      	ldr	r3, [pc, #216]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004370:	4b32      	ldr	r3, [pc, #200]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	0f1b      	lsrs	r3, r3, #28
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	019a      	lsls	r2, r3, #6
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	431a      	orrs	r2, r3
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	061b      	lsls	r3, r3, #24
 8004390:	431a      	orrs	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	071b      	lsls	r3, r3, #28
 8004396:	4929      	ldr	r1, [pc, #164]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d028      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	0e1b      	lsrs	r3, r3, #24
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043b8:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	019a      	lsls	r2, r3, #6
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	431a      	orrs	r2, r3
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	071b      	lsls	r3, r3, #28
 80043de:	4917      	ldr	r1, [pc, #92]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80043e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4911      	ldr	r1, [pc, #68]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a0e      	ldr	r2, [pc, #56]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004408:	f7fc fe66 	bl	80010d8 <HAL_GetTick>
 800440c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004410:	f7fc fe62 	bl	80010d8 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e007      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800442e:	d1ef      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e084      	b.n	800455c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f004 fe25 	bl	80090bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004488:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004492:	d902      	bls.n	800449a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e002      	b.n	80044a0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800449a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800449e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044a8:	d007      	beq.n	80044ba <HAL_SPI_Init+0x7a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044b2:	d002      	beq.n	80044ba <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ca:	d903      	bls.n	80044d4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
 80044d2:	e002      	b.n	80044da <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	ea42 0103 	orr.w	r1, r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	f003 0204 	and.w	r2, r3, #4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	ea42 0103 	orr.w	r1, r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69da      	ldr	r2, [r3, #28]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_SPI_Transmit+0x22>
 8004582:	2302      	movs	r3, #2
 8004584:	e150      	b.n	8004828 <HAL_SPI_Transmit+0x2c4>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458e:	f7fc fda3 	bl	80010d8 <HAL_GetTick>
 8004592:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d002      	beq.n	80045aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
 80045a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045a8:	e135      	b.n	8004816 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_SPI_Transmit+0x52>
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045ba:	e12c      	b.n	8004816 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2203      	movs	r2, #3
 80045c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004606:	d107      	bne.n	8004618 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004616:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d007      	beq.n	8004636 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800463e:	d94b      	bls.n	80046d8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_SPI_Transmit+0xea>
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d13e      	bne.n	80046cc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004672:	e02b      	b.n	80046cc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d112      	bne.n	80046a8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	881a      	ldrh	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	1c9a      	adds	r2, r3, #2
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046a6:	e011      	b.n	80046cc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a8:	f7fc fd16 	bl	80010d8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d803      	bhi.n	80046c0 <HAL_SPI_Transmit+0x15c>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d102      	bne.n	80046c6 <HAL_SPI_Transmit+0x162>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046ca:	e0a4      	b.n	8004816 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ce      	bne.n	8004674 <HAL_SPI_Transmit+0x110>
 80046d6:	e07c      	b.n	80047d2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_SPI_Transmit+0x182>
 80046e0:	8afb      	ldrh	r3, [r7, #22]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d170      	bne.n	80047c8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d912      	bls.n	8004716 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	1c9a      	adds	r2, r3, #2
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b02      	subs	r3, #2
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004714:	e058      	b.n	80047c8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800473c:	e044      	b.n	80047c8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	d12b      	bne.n	80047a4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d912      	bls.n	800477c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b02      	subs	r3, #2
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	87da      	strh	r2, [r3, #62]	; 0x3e
 800477a:	e025      	b.n	80047c8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	7812      	ldrb	r2, [r2, #0]
 8004788:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047a2:	e011      	b.n	80047c8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047a4:	f7fc fc98 	bl	80010d8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d803      	bhi.n	80047bc <HAL_SPI_Transmit+0x258>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_Transmit+0x25e>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047c6:	e026      	b.n	8004816 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1b5      	bne.n	800473e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fc34 	bl	8005044 <SPI_EndRxTxTransaction>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e000      	b.n	8004816 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004814:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004826:	7ffb      	ldrb	r3, [r7, #31]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3720      	adds	r7, #32
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800483e:	2301      	movs	r3, #1
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_SPI_TransmitReceive+0x26>
 8004852:	2302      	movs	r3, #2
 8004854:	e1fb      	b.n	8004c4e <HAL_SPI_TransmitReceive+0x41e>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800485e:	f7fc fc3b 	bl	80010d8 <HAL_GetTick>
 8004862:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800486a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004876:	887b      	ldrh	r3, [r7, #2]
 8004878:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800487a:	7efb      	ldrb	r3, [r7, #27]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d00e      	beq.n	800489e <HAL_SPI_TransmitReceive+0x6e>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004886:	d106      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x66>
 8004890:	7efb      	ldrb	r3, [r7, #27]
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004896:	2302      	movs	r3, #2
 8004898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800489c:	e1cd      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x80>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x80>
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048b6:	e1c0      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d003      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2205      	movs	r2, #5
 80048c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	887a      	ldrh	r2, [r7, #2]
 80048e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	887a      	ldrh	r2, [r7, #2]
 80048f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800490e:	d802      	bhi.n	8004916 <HAL_SPI_TransmitReceive+0xe6>
 8004910:	8a3b      	ldrh	r3, [r7, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d908      	bls.n	8004928 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	e007      	b.n	8004938 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004936:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d007      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004954:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800495e:	d97c      	bls.n	8004a5a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_SPI_TransmitReceive+0x13e>
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d169      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004992:	e056      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d11b      	bne.n	80049da <HAL_SPI_TransmitReceive+0x1aa>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d016      	beq.n	80049da <HAL_SPI_TransmitReceive+0x1aa>
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d113      	bne.n	80049da <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	881a      	ldrh	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	1c9a      	adds	r2, r3, #2
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d11c      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x1f2>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d016      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	b292      	uxth	r2, r2
 8004a00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	1c9a      	adds	r2, r3, #2
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a22:	f7fc fb59 	bl	80010d8 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d807      	bhi.n	8004a42 <HAL_SPI_TransmitReceive+0x212>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d003      	beq.n	8004a42 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a40:	e0fb      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1a3      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x164>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d19d      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x164>
 8004a58:	e0df      	b.n	8004c1a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_SPI_TransmitReceive+0x23a>
 8004a62:	8a7b      	ldrh	r3, [r7, #18]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	f040 80cb 	bne.w	8004c00 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d912      	bls.n	8004a9a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	881a      	ldrh	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	1c9a      	adds	r2, r3, #2
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b02      	subs	r3, #2
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a98:	e0b2      	b.n	8004c00 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac0:	e09e      	b.n	8004c00 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d134      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x30a>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02f      	beq.n	8004b3a <HAL_SPI_TransmitReceive+0x30a>
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d12c      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d912      	bls.n	8004b10 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	881a      	ldrh	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	1c9a      	adds	r2, r3, #2
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b02      	subs	r3, #2
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b0e:	e012      	b.n	8004b36 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d148      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x3aa>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d042      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d923      	bls.n	8004ba8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	1c9a      	adds	r2, r3, #2
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b02      	subs	r3, #2
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d81f      	bhi.n	8004bd6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	e016      	b.n	8004bd6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f103 020c 	add.w	r2, r3, #12
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bda:	f7fc fa7d 	bl	80010d8 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d803      	bhi.n	8004bf2 <HAL_SPI_TransmitReceive+0x3c2>
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d102      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x3c8>
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004bfe:	e01c      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f47f af5b 	bne.w	8004ac2 <HAL_SPI_TransmitReceive+0x292>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f47f af54 	bne.w	8004ac2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fa10 	bl	8005044 <SPI_EndRxTxTransaction>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	661a      	str	r2, [r3, #96]	; 0x60
 8004c36:	e000      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3728      	adds	r7, #40	; 0x28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	099b      	lsrs	r3, r3, #6
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
    return;
 8004c9a:	e0d8      	b.n	8004e4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_SPI_IRQHandler+0x66>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	09db      	lsrs	r3, r3, #7
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4798      	blx	r3
    return;
 8004cbc:	e0c7      	b.n	8004e4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_SPI_IRQHandler+0x8c>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_SPI_IRQHandler+0x8c>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80b5 	beq.w	8004e4e <HAL_SPI_IRQHandler+0x1f6>
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80ae 	beq.w	8004e4e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d023      	beq.n	8004d46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d011      	beq.n	8004d2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	f043 0204 	orr.w	r2, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	e00b      	b.n	8004d46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	693b      	ldr	r3, [r7, #16]
        return;
 8004d44:	e083      	b.n	8004e4e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	f043 0208 	orr.w	r2, r3, #8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d050      	beq.n	8004e4c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <HAL_SPI_IRQHandler+0x17e>
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d034      	beq.n	8004e40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0203 	bic.w	r2, r2, #3
 8004de4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_SPI_IRQHandler+0x1fc>)
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fc faab 	bl	8001356 <HAL_DMA_Abort_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	4a0d      	ldr	r2, [pc, #52]	; (8004e54 <HAL_SPI_IRQHandler+0x1fc>)
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc fa95 	bl	8001356 <HAL_DMA_Abort_IT>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004e3e:	e003      	b.n	8004e48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f809 	bl	8004e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e46:	e000      	b.n	8004e4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e48:	bf00      	nop
    return;
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
  }
}
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	08004e6d 	.word	0x08004e6d

08004e58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7ff ffe5 	bl	8004e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea6:	e04c      	b.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d048      	beq.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004eb0:	f7fc f912 	bl	80010d8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d902      	bls.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d13d      	bne.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ede:	d111      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee8:	d004      	beq.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d107      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0c:	d10f      	bne.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e00f      	b.n	8004f62 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d1a3      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f78:	e057      	b.n	800502a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f80:	d106      	bne.n	8004f90 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d103      	bne.n	8004f90 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d048      	beq.n	800502a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f98:	f7fc f89e 	bl	80010d8 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d902      	bls.n	8004fae <SPI_WaitFifoStateUntilTimeout+0x44>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d13d      	bne.n	800502a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc6:	d111      	bne.n	8004fec <SPI_WaitFifoStateUntilTimeout+0x82>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd0:	d004      	beq.n	8004fdc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d107      	bne.n	8004fec <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d10f      	bne.n	8005016 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e008      	b.n	800503c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d19f      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff ff84 	bl	8004f6a <SPI_WaitFifoStateUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e027      	b.n	80050c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2200      	movs	r2, #0
 8005080:	2180      	movs	r1, #128	; 0x80
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff ff07 	bl	8004e96 <SPI_WaitFlagStateUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005092:	f043 0220 	orr.w	r2, r3, #32
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e014      	b.n	80050c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff ff5d 	bl	8004f6a <SPI_WaitFifoStateUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ba:	f043 0220 	orr.w	r2, r3, #32
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e000      	b.n	80050c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e01d      	b.n	800511e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f004 fa5a 	bl	80095b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f000 fba6 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e01d      	b.n	8005174 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f815 	bl	800517c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3304      	adds	r3, #4
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 fb7b 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2201      	movs	r2, #1
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fef4 	bl	8005f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a17      	ldr	r2, [pc, #92]	; (800520c <HAL_TIM_PWM_Start+0x7c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIM_PWM_Start+0x2c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a16      	ldr	r2, [pc, #88]	; (8005210 <HAL_TIM_PWM_Start+0x80>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d101      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x30>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_TIM_PWM_Start+0x32>
 80051c0:	2300      	movs	r3, #0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <HAL_TIM_PWM_Start+0x84>)
 80051de:	4013      	ands	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b06      	cmp	r3, #6
 80051e6:	d00b      	beq.n	8005200 <HAL_TIM_PWM_Start+0x70>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ee:	d007      	beq.n	8005200 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40010400 	.word	0x40010400
 8005214:	00010007 	.word	0x00010007

08005218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0202 	mvn.w	r2, #2
 8005244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fae2 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fad4 	bl	8005810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fae5 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0204 	mvn.w	r2, #4
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fab8 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 faaa 	bl	8005810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fabb 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0208 	mvn.w	r2, #8
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa8e 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa80 	bl	8005810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fa91 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b10      	cmp	r3, #16
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0210 	mvn.w	r2, #16
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2208      	movs	r2, #8
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa64 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa56 	bl	8005810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fa67 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0201 	mvn.w	r2, #1
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa30 	bl	80057fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fe70 	bl	80060a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fe63 	bl	80060bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fa15 	bl	800584c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b20      	cmp	r3, #32
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0220 	mvn.w	r2, #32
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fe23 	bl	8006094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800546e:	2302      	movs	r3, #2
 8005470:	e105      	b.n	800567e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b14      	cmp	r3, #20
 8005486:	f200 80f0 	bhi.w	800566a <HAL_TIM_PWM_ConfigChannel+0x212>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054e5 	.word	0x080054e5
 8005494:	0800566b 	.word	0x0800566b
 8005498:	0800566b 	.word	0x0800566b
 800549c:	0800566b 	.word	0x0800566b
 80054a0:	08005525 	.word	0x08005525
 80054a4:	0800566b 	.word	0x0800566b
 80054a8:	0800566b 	.word	0x0800566b
 80054ac:	0800566b 	.word	0x0800566b
 80054b0:	08005567 	.word	0x08005567
 80054b4:	0800566b 	.word	0x0800566b
 80054b8:	0800566b 	.word	0x0800566b
 80054bc:	0800566b 	.word	0x0800566b
 80054c0:	080055a7 	.word	0x080055a7
 80054c4:	0800566b 	.word	0x0800566b
 80054c8:	0800566b 	.word	0x0800566b
 80054cc:	0800566b 	.word	0x0800566b
 80054d0:	080055e9 	.word	0x080055e9
 80054d4:	0800566b 	.word	0x0800566b
 80054d8:	0800566b 	.word	0x0800566b
 80054dc:	0800566b 	.word	0x0800566b
 80054e0:	08005629 	.word	0x08005629
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fa58 	bl	80059a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0208 	orr.w	r2, r2, #8
 80054fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0204 	bic.w	r2, r2, #4
 800550e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6999      	ldr	r1, [r3, #24]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	619a      	str	r2, [r3, #24]
      break;
 8005522:	e0a3      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 faaa 	bl	8005a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6999      	ldr	r1, [r3, #24]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	619a      	str	r2, [r3, #24]
      break;
 8005564:	e082      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fb01 	bl	8005b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0208 	orr.w	r2, r2, #8
 8005580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0204 	bic.w	r2, r2, #4
 8005590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	61da      	str	r2, [r3, #28]
      break;
 80055a4:	e062      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fb57 	bl	8005c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69d9      	ldr	r1, [r3, #28]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	021a      	lsls	r2, r3, #8
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	61da      	str	r2, [r3, #28]
      break;
 80055e6:	e041      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fb8e 	bl	8005d10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0208 	orr.w	r2, r2, #8
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0204 	bic.w	r2, r2, #4
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005626:	e021      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fbc0 	bl	8005db4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	021a      	lsls	r2, r3, #8
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005668:	e000      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800566a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop

08005688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_TIM_ConfigClockSource+0x18>
 800569c:	2302      	movs	r3, #2
 800569e:	e0a6      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x166>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4b4f      	ldr	r3, [pc, #316]	; (80057f8 <HAL_TIM_ConfigClockSource+0x170>)
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b40      	cmp	r3, #64	; 0x40
 80056d6:	d067      	beq.n	80057a8 <HAL_TIM_ConfigClockSource+0x120>
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d80b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x6c>
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d073      	beq.n	80057c8 <HAL_TIM_ConfigClockSource+0x140>
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d802      	bhi.n	80056ea <HAL_TIM_ConfigClockSource+0x62>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d06f      	beq.n	80057c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056e8:	e078      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d06c      	beq.n	80057c8 <HAL_TIM_ConfigClockSource+0x140>
 80056ee:	2b30      	cmp	r3, #48	; 0x30
 80056f0:	d06a      	beq.n	80057c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80056f2:	e073      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056f4:	2b70      	cmp	r3, #112	; 0x70
 80056f6:	d00d      	beq.n	8005714 <HAL_TIM_ConfigClockSource+0x8c>
 80056f8:	2b70      	cmp	r3, #112	; 0x70
 80056fa:	d804      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x7e>
 80056fc:	2b50      	cmp	r3, #80	; 0x50
 80056fe:	d033      	beq.n	8005768 <HAL_TIM_ConfigClockSource+0xe0>
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d041      	beq.n	8005788 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005704:	e06a      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570a:	d066      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x152>
 800570c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005710:	d017      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005712:	e063      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6899      	ldr	r1, [r3, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f000 fc14 	bl	8005f50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005736:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	609a      	str	r2, [r3, #8]
      break;
 8005740:	e04c      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6899      	ldr	r1, [r3, #8]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f000 fbfd 	bl	8005f50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005764:	609a      	str	r2, [r3, #8]
      break;
 8005766:	e039      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	6859      	ldr	r1, [r3, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	461a      	mov	r2, r3
 8005776:	f000 fb71 	bl	8005e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2150      	movs	r1, #80	; 0x50
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fbca 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005786:	e029      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	6859      	ldr	r1, [r3, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	461a      	mov	r2, r3
 8005796:	f000 fb90 	bl	8005eba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2160      	movs	r1, #96	; 0x60
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fbba 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80057a6:	e019      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6859      	ldr	r1, [r3, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	461a      	mov	r2, r3
 80057b6:	f000 fb51 	bl	8005e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2140      	movs	r1, #64	; 0x40
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fbaa 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80057c6:	e009      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 fba1 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80057d8:	e000      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	fffeff88 	.word	0xfffeff88

080057fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a40      	ldr	r2, [pc, #256]	; (8005974 <TIM_Base_SetConfig+0x114>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3d      	ldr	r2, [pc, #244]	; (8005978 <TIM_Base_SetConfig+0x118>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3c      	ldr	r2, [pc, #240]	; (800597c <TIM_Base_SetConfig+0x11c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3b      	ldr	r2, [pc, #236]	; (8005980 <TIM_Base_SetConfig+0x120>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3a      	ldr	r2, [pc, #232]	; (8005984 <TIM_Base_SetConfig+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <TIM_Base_SetConfig+0x114>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d027      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2c      	ldr	r2, [pc, #176]	; (8005978 <TIM_Base_SetConfig+0x118>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d023      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2b      	ldr	r2, [pc, #172]	; (800597c <TIM_Base_SetConfig+0x11c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01f      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <TIM_Base_SetConfig+0x120>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a29      	ldr	r2, [pc, #164]	; (8005984 <TIM_Base_SetConfig+0x124>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d017      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a28      	ldr	r2, [pc, #160]	; (8005988 <TIM_Base_SetConfig+0x128>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a27      	ldr	r2, [pc, #156]	; (800598c <TIM_Base_SetConfig+0x12c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a26      	ldr	r2, [pc, #152]	; (8005990 <TIM_Base_SetConfig+0x130>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a25      	ldr	r2, [pc, #148]	; (8005994 <TIM_Base_SetConfig+0x134>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a24      	ldr	r2, [pc, #144]	; (8005998 <TIM_Base_SetConfig+0x138>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a23      	ldr	r2, [pc, #140]	; (800599c <TIM_Base_SetConfig+0x13c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0a      	ldr	r2, [pc, #40]	; (8005974 <TIM_Base_SetConfig+0x114>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_Base_SetConfig+0xf8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <TIM_Base_SetConfig+0x124>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d103      	bne.n	8005960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	615a      	str	r2, [r3, #20]
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40010400 	.word	0x40010400
 8005988:	40014000 	.word	0x40014000
 800598c:	40014400 	.word	0x40014400
 8005990:	40014800 	.word	0x40014800
 8005994:	40001800 	.word	0x40001800
 8005998:	40001c00 	.word	0x40001c00
 800599c:	40002000 	.word	0x40002000

080059a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <TIM_OC1_SetConfig+0xd8>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 0302 	bic.w	r3, r3, #2
 80059e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <TIM_OC1_SetConfig+0xdc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_OC1_SetConfig+0x64>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a20      	ldr	r2, [pc, #128]	; (8005a80 <TIM_OC1_SetConfig+0xe0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d10c      	bne.n	8005a1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0308 	bic.w	r3, r3, #8
 8005a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f023 0304 	bic.w	r3, r3, #4
 8005a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <TIM_OC1_SetConfig+0xdc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_OC1_SetConfig+0x8e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <TIM_OC1_SetConfig+0xe0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d111      	bne.n	8005a52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	fffeff8f 	.word	0xfffeff8f
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40010400 	.word	0x40010400

08005a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f023 0210 	bic.w	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4b2e      	ldr	r3, [pc, #184]	; (8005b68 <TIM_OC2_SetConfig+0xe4>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0320 	bic.w	r3, r3, #32
 8005ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a23      	ldr	r2, [pc, #140]	; (8005b6c <TIM_OC2_SetConfig+0xe8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC2_SetConfig+0x68>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a22      	ldr	r2, [pc, #136]	; (8005b70 <TIM_OC2_SetConfig+0xec>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10d      	bne.n	8005b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <TIM_OC2_SetConfig+0xe8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC2_SetConfig+0x94>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a17      	ldr	r2, [pc, #92]	; (8005b70 <TIM_OC2_SetConfig+0xec>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d113      	bne.n	8005b40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	feff8fff 	.word	0xfeff8fff
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40010400 	.word	0x40010400

08005b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <TIM_OC3_SetConfig+0xe0>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <TIM_OC3_SetConfig+0xe4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC3_SetConfig+0x66>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a21      	ldr	r2, [pc, #132]	; (8005c5c <TIM_OC3_SetConfig+0xe8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10d      	bne.n	8005bf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <TIM_OC3_SetConfig+0xe4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC3_SetConfig+0x92>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <TIM_OC3_SetConfig+0xe8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d113      	bne.n	8005c2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	621a      	str	r2, [r3, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	fffeff8f 	.word	0xfffeff8f
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40010400 	.word	0x40010400

08005c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <TIM_OC4_SetConfig+0xa4>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <TIM_OC4_SetConfig+0xa8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC4_SetConfig+0x68>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <TIM_OC4_SetConfig+0xac>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d109      	bne.n	8005cdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	019b      	lsls	r3, r3, #6
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	feff8fff 	.word	0xfeff8fff
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40010400 	.word	0x40010400

08005d10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <TIM_OC5_SetConfig+0x98>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a12      	ldr	r2, [pc, #72]	; (8005dac <TIM_OC5_SetConfig+0x9c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_OC5_SetConfig+0x5e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <TIM_OC5_SetConfig+0xa0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d109      	bne.n	8005d82 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	621a      	str	r2, [r3, #32]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	fffeff8f 	.word	0xfffeff8f
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <TIM_OC6_SetConfig+0x9c>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <TIM_OC6_SetConfig+0xa0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d003      	beq.n	8005e14 <TIM_OC6_SetConfig+0x60>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <TIM_OC6_SetConfig+0xa4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d109      	bne.n	8005e28 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	feff8fff 	.word	0xfeff8fff
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40010400 	.word	0x40010400

08005e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0201 	bic.w	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 030a 	bic.w	r3, r3, #10
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b087      	sub	sp, #28
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f023 0210 	bic.w	r2, r3, #16
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	031b      	lsls	r3, r3, #12
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f043 0307 	orr.w	r3, r3, #7
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	609a      	str	r2, [r3, #8]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	021a      	lsls	r2, r3, #8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	609a      	str	r2, [r3, #8]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1a      	ldr	r2, [r3, #32]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e045      	b.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1c      	ldr	r2, [pc, #112]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d108      	bne.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800602e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006052:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	4313      	orrs	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	40010000 	.word	0x40010000
 8006090:	40010400 	.word	0x40010400

08006094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e040      	b.n	8006164 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f003 fb3e 	bl	8009774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2224      	movs	r2, #36	; 0x24
 80060fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa5a 	bl	80065c8 <UART_SetConfig>
 8006114:	4603      	mov	r3, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e022      	b.n	8006164 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fcf2 	bl	8006b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800613a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800614a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fd79 	bl	8006c54 <UART_CheckIdleState>
 8006162:	4603      	mov	r3, r0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	2b20      	cmp	r3, #32
 8006180:	d144      	bne.n	800620c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_UART_Transmit_IT+0x22>
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e03d      	b.n	800620e <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_UART_Transmit_IT+0x34>
 800619c:	2302      	movs	r3, #2
 800619e:	e036      	b.n	800620e <HAL_UART_Transmit_IT+0xa2>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2221      	movs	r2, #33	; 0x21
 80061ce:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d8:	d107      	bne.n	80061ea <HAL_UART_Transmit_IT+0x7e>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <HAL_UART_Transmit_IT+0xb0>)
 80061e6:	665a      	str	r2, [r3, #100]	; 0x64
 80061e8:	e002      	b.n	80061f0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a0c      	ldr	r2, [pc, #48]	; (8006220 <HAL_UART_Transmit_IT+0xb4>)
 80061ee:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006206:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	e000      	b.n	800620e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	08006e21 	.word	0x08006e21
 8006220:	08006daf 	.word	0x08006daf

08006224 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006236:	2b20      	cmp	r3, #32
 8006238:	f040 808a 	bne.w	8006350 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_UART_Receive_IT+0x24>
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e082      	b.n	8006352 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_UART_Receive_IT+0x36>
 8006256:	2302      	movs	r3, #2
 8006258:	e07b      	b.n	8006352 <HAL_UART_Receive_IT+0x12e>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006286:	d10e      	bne.n	80062a6 <HAL_UART_Receive_IT+0x82>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <HAL_UART_Receive_IT+0x78>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006296:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800629a:	e02d      	b.n	80062f8 <HAL_UART_Receive_IT+0xd4>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	22ff      	movs	r2, #255	; 0xff
 80062a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062a4:	e028      	b.n	80062f8 <HAL_UART_Receive_IT+0xd4>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10d      	bne.n	80062ca <HAL_UART_Receive_IT+0xa6>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <HAL_UART_Receive_IT+0x9c>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	22ff      	movs	r2, #255	; 0xff
 80062ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062be:	e01b      	b.n	80062f8 <HAL_UART_Receive_IT+0xd4>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	227f      	movs	r2, #127	; 0x7f
 80062c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062c8:	e016      	b.n	80062f8 <HAL_UART_Receive_IT+0xd4>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062d2:	d10d      	bne.n	80062f0 <HAL_UART_Receive_IT+0xcc>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <HAL_UART_Receive_IT+0xc2>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	227f      	movs	r2, #127	; 0x7f
 80062e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062e4:	e008      	b.n	80062f8 <HAL_UART_Receive_IT+0xd4>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	223f      	movs	r2, #63	; 0x3f
 80062ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062ee:	e003      	b.n	80062f8 <HAL_UART_Receive_IT+0xd4>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2222      	movs	r2, #34	; 0x22
 8006302:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d107      	bne.n	800632e <HAL_UART_Receive_IT+0x10a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4a0d      	ldr	r2, [pc, #52]	; (8006360 <HAL_UART_Receive_IT+0x13c>)
 800632a:	661a      	str	r2, [r3, #96]	; 0x60
 800632c:	e002      	b.n	8006334 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <HAL_UART_Receive_IT+0x140>)
 8006332:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800634a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	08006f75 	.word	0x08006f75
 8006364:	08006ecf 	.word	0x08006ecf

08006368 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d113      	bne.n	80063be <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00e      	beq.n	80063be <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80eb 	beq.w	800658a <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
      }
      return;
 80063bc:	e0e5      	b.n	800658a <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80c0 	beq.w	8006546 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 80b5 	beq.w	8006546 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00e      	beq.n	8006404 <HAL_UART_IRQHandler+0x9c>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d009      	beq.n	8006404 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2201      	movs	r2, #1
 80063f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fc:	f043 0201 	orr.w	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00e      	beq.n	800642c <HAL_UART_IRQHandler+0xc4>
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2202      	movs	r2, #2
 800641e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006424:	f043 0204 	orr.w	r2, r3, #4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00e      	beq.n	8006454 <HAL_UART_IRQHandler+0xec>
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2204      	movs	r2, #4
 8006446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800644c:	f043 0202 	orr.w	r2, r3, #2
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d013      	beq.n	8006486 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2208      	movs	r2, #8
 8006478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647e:	f043 0208 	orr.w	r2, r3, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d07f      	beq.n	800658e <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00c      	beq.n	80064b2 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b40      	cmp	r3, #64	; 0x40
 80064c4:	d004      	beq.n	80064d0 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fc36 	bl	8006d42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d123      	bne.n	800652c <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006500:	4a26      	ldr	r2, [pc, #152]	; (800659c <HAL_UART_IRQHandler+0x234>)
 8006502:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006508:	4618      	mov	r0, r3
 800650a:	f7fa ff24 	bl	8001356 <HAL_DMA_Abort_IT>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d016      	beq.n	8006542 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800651e:	4610      	mov	r0, r2
 8006520:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006522:	e00e      	b.n	8006542 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f845 	bl	80065b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652a:	e00a      	b.n	8006542 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f841 	bl	80065b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006532:	e006      	b.n	8006542 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f83d 	bl	80065b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006540:	e025      	b.n	800658e <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006542:	bf00      	nop
    return;
 8006544:	e023      	b.n	800658e <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00d      	beq.n	800656c <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655e:	2b00      	cmp	r3, #0
 8006560:	d017      	beq.n	8006592 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
    }
    return;
 800656a:	e012      	b.n	8006592 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <HAL_UART_IRQHandler+0x22c>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d009      	beq.n	8006594 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc8b 	bl	8006e9c <UART_EndTransmit_IT>
    return;
 8006586:	bf00      	nop
 8006588:	e004      	b.n	8006594 <HAL_UART_IRQHandler+0x22c>
      return;
 800658a:	bf00      	nop
 800658c:	e002      	b.n	8006594 <HAL_UART_IRQHandler+0x22c>
    return;
 800658e:	bf00      	nop
 8006590:	e000      	b.n	8006594 <HAL_UART_IRQHandler+0x22c>
    return;
 8006592:	bf00      	nop
  }

}
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	08006d83 	.word	0x08006d83

080065a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4bb1      	ldr	r3, [pc, #708]	; (80068bc <UART_SetConfig+0x2f4>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	6939      	ldr	r1, [r7, #16]
 8006600:	430b      	orrs	r3, r1
 8006602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	430a      	orrs	r2, r1
 800663c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a9f      	ldr	r2, [pc, #636]	; (80068c0 <UART_SetConfig+0x2f8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d121      	bne.n	800668c <UART_SetConfig+0xc4>
 8006648:	4b9e      	ldr	r3, [pc, #632]	; (80068c4 <UART_SetConfig+0x2fc>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b03      	cmp	r3, #3
 8006654:	d816      	bhi.n	8006684 <UART_SetConfig+0xbc>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <UART_SetConfig+0x94>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	0800666d 	.word	0x0800666d
 8006660:	08006679 	.word	0x08006679
 8006664:	08006673 	.word	0x08006673
 8006668:	0800667f 	.word	0x0800667f
 800666c:	2301      	movs	r3, #1
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e151      	b.n	8006916 <UART_SetConfig+0x34e>
 8006672:	2302      	movs	r3, #2
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e14e      	b.n	8006916 <UART_SetConfig+0x34e>
 8006678:	2304      	movs	r3, #4
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e14b      	b.n	8006916 <UART_SetConfig+0x34e>
 800667e:	2308      	movs	r3, #8
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e148      	b.n	8006916 <UART_SetConfig+0x34e>
 8006684:	2310      	movs	r3, #16
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	bf00      	nop
 800668a:	e144      	b.n	8006916 <UART_SetConfig+0x34e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a8d      	ldr	r2, [pc, #564]	; (80068c8 <UART_SetConfig+0x300>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d134      	bne.n	8006700 <UART_SetConfig+0x138>
 8006696:	4b8b      	ldr	r3, [pc, #556]	; (80068c4 <UART_SetConfig+0x2fc>)
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669c:	f003 030c 	and.w	r3, r3, #12
 80066a0:	2b0c      	cmp	r3, #12
 80066a2:	d829      	bhi.n	80066f8 <UART_SetConfig+0x130>
 80066a4:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <UART_SetConfig+0xe4>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066e1 	.word	0x080066e1
 80066b0:	080066f9 	.word	0x080066f9
 80066b4:	080066f9 	.word	0x080066f9
 80066b8:	080066f9 	.word	0x080066f9
 80066bc:	080066ed 	.word	0x080066ed
 80066c0:	080066f9 	.word	0x080066f9
 80066c4:	080066f9 	.word	0x080066f9
 80066c8:	080066f9 	.word	0x080066f9
 80066cc:	080066e7 	.word	0x080066e7
 80066d0:	080066f9 	.word	0x080066f9
 80066d4:	080066f9 	.word	0x080066f9
 80066d8:	080066f9 	.word	0x080066f9
 80066dc:	080066f3 	.word	0x080066f3
 80066e0:	2300      	movs	r3, #0
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e117      	b.n	8006916 <UART_SetConfig+0x34e>
 80066e6:	2302      	movs	r3, #2
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e114      	b.n	8006916 <UART_SetConfig+0x34e>
 80066ec:	2304      	movs	r3, #4
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e111      	b.n	8006916 <UART_SetConfig+0x34e>
 80066f2:	2308      	movs	r3, #8
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e10e      	b.n	8006916 <UART_SetConfig+0x34e>
 80066f8:	2310      	movs	r3, #16
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	bf00      	nop
 80066fe:	e10a      	b.n	8006916 <UART_SetConfig+0x34e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a71      	ldr	r2, [pc, #452]	; (80068cc <UART_SetConfig+0x304>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d120      	bne.n	800674c <UART_SetConfig+0x184>
 800670a:	4b6e      	ldr	r3, [pc, #440]	; (80068c4 <UART_SetConfig+0x2fc>)
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006710:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006714:	2b10      	cmp	r3, #16
 8006716:	d00f      	beq.n	8006738 <UART_SetConfig+0x170>
 8006718:	2b10      	cmp	r3, #16
 800671a:	d802      	bhi.n	8006722 <UART_SetConfig+0x15a>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <UART_SetConfig+0x164>
 8006720:	e010      	b.n	8006744 <UART_SetConfig+0x17c>
 8006722:	2b20      	cmp	r3, #32
 8006724:	d005      	beq.n	8006732 <UART_SetConfig+0x16a>
 8006726:	2b30      	cmp	r3, #48	; 0x30
 8006728:	d009      	beq.n	800673e <UART_SetConfig+0x176>
 800672a:	e00b      	b.n	8006744 <UART_SetConfig+0x17c>
 800672c:	2300      	movs	r3, #0
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e0f1      	b.n	8006916 <UART_SetConfig+0x34e>
 8006732:	2302      	movs	r3, #2
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e0ee      	b.n	8006916 <UART_SetConfig+0x34e>
 8006738:	2304      	movs	r3, #4
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e0eb      	b.n	8006916 <UART_SetConfig+0x34e>
 800673e:	2308      	movs	r3, #8
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e0e8      	b.n	8006916 <UART_SetConfig+0x34e>
 8006744:	2310      	movs	r3, #16
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	bf00      	nop
 800674a:	e0e4      	b.n	8006916 <UART_SetConfig+0x34e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a5f      	ldr	r2, [pc, #380]	; (80068d0 <UART_SetConfig+0x308>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d120      	bne.n	8006798 <UART_SetConfig+0x1d0>
 8006756:	4b5b      	ldr	r3, [pc, #364]	; (80068c4 <UART_SetConfig+0x2fc>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d00f      	beq.n	8006784 <UART_SetConfig+0x1bc>
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d802      	bhi.n	800676e <UART_SetConfig+0x1a6>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <UART_SetConfig+0x1b0>
 800676c:	e010      	b.n	8006790 <UART_SetConfig+0x1c8>
 800676e:	2b80      	cmp	r3, #128	; 0x80
 8006770:	d005      	beq.n	800677e <UART_SetConfig+0x1b6>
 8006772:	2bc0      	cmp	r3, #192	; 0xc0
 8006774:	d009      	beq.n	800678a <UART_SetConfig+0x1c2>
 8006776:	e00b      	b.n	8006790 <UART_SetConfig+0x1c8>
 8006778:	2300      	movs	r3, #0
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e0cb      	b.n	8006916 <UART_SetConfig+0x34e>
 800677e:	2302      	movs	r3, #2
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e0c8      	b.n	8006916 <UART_SetConfig+0x34e>
 8006784:	2304      	movs	r3, #4
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e0c5      	b.n	8006916 <UART_SetConfig+0x34e>
 800678a:	2308      	movs	r3, #8
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	e0c2      	b.n	8006916 <UART_SetConfig+0x34e>
 8006790:	2310      	movs	r3, #16
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	bf00      	nop
 8006796:	e0be      	b.n	8006916 <UART_SetConfig+0x34e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a4d      	ldr	r2, [pc, #308]	; (80068d4 <UART_SetConfig+0x30c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d124      	bne.n	80067ec <UART_SetConfig+0x224>
 80067a2:	4b48      	ldr	r3, [pc, #288]	; (80068c4 <UART_SetConfig+0x2fc>)
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d012      	beq.n	80067d8 <UART_SetConfig+0x210>
 80067b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b6:	d802      	bhi.n	80067be <UART_SetConfig+0x1f6>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <UART_SetConfig+0x204>
 80067bc:	e012      	b.n	80067e4 <UART_SetConfig+0x21c>
 80067be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c2:	d006      	beq.n	80067d2 <UART_SetConfig+0x20a>
 80067c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c8:	d009      	beq.n	80067de <UART_SetConfig+0x216>
 80067ca:	e00b      	b.n	80067e4 <UART_SetConfig+0x21c>
 80067cc:	2300      	movs	r3, #0
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e0a1      	b.n	8006916 <UART_SetConfig+0x34e>
 80067d2:	2302      	movs	r3, #2
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e09e      	b.n	8006916 <UART_SetConfig+0x34e>
 80067d8:	2304      	movs	r3, #4
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e09b      	b.n	8006916 <UART_SetConfig+0x34e>
 80067de:	2308      	movs	r3, #8
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e098      	b.n	8006916 <UART_SetConfig+0x34e>
 80067e4:	2310      	movs	r3, #16
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	bf00      	nop
 80067ea:	e094      	b.n	8006916 <UART_SetConfig+0x34e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a39      	ldr	r2, [pc, #228]	; (80068d8 <UART_SetConfig+0x310>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d124      	bne.n	8006840 <UART_SetConfig+0x278>
 80067f6:	4b33      	ldr	r3, [pc, #204]	; (80068c4 <UART_SetConfig+0x2fc>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006804:	d012      	beq.n	800682c <UART_SetConfig+0x264>
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680a:	d802      	bhi.n	8006812 <UART_SetConfig+0x24a>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <UART_SetConfig+0x258>
 8006810:	e012      	b.n	8006838 <UART_SetConfig+0x270>
 8006812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006816:	d006      	beq.n	8006826 <UART_SetConfig+0x25e>
 8006818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800681c:	d009      	beq.n	8006832 <UART_SetConfig+0x26a>
 800681e:	e00b      	b.n	8006838 <UART_SetConfig+0x270>
 8006820:	2301      	movs	r3, #1
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e077      	b.n	8006916 <UART_SetConfig+0x34e>
 8006826:	2302      	movs	r3, #2
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e074      	b.n	8006916 <UART_SetConfig+0x34e>
 800682c:	2304      	movs	r3, #4
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e071      	b.n	8006916 <UART_SetConfig+0x34e>
 8006832:	2308      	movs	r3, #8
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e06e      	b.n	8006916 <UART_SetConfig+0x34e>
 8006838:	2310      	movs	r3, #16
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	bf00      	nop
 800683e:	e06a      	b.n	8006916 <UART_SetConfig+0x34e>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a25      	ldr	r2, [pc, #148]	; (80068dc <UART_SetConfig+0x314>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d124      	bne.n	8006894 <UART_SetConfig+0x2cc>
 800684a:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <UART_SetConfig+0x2fc>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006850:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006858:	d012      	beq.n	8006880 <UART_SetConfig+0x2b8>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d802      	bhi.n	8006866 <UART_SetConfig+0x29e>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <UART_SetConfig+0x2ac>
 8006864:	e012      	b.n	800688c <UART_SetConfig+0x2c4>
 8006866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686a:	d006      	beq.n	800687a <UART_SetConfig+0x2b2>
 800686c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006870:	d009      	beq.n	8006886 <UART_SetConfig+0x2be>
 8006872:	e00b      	b.n	800688c <UART_SetConfig+0x2c4>
 8006874:	2300      	movs	r3, #0
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e04d      	b.n	8006916 <UART_SetConfig+0x34e>
 800687a:	2302      	movs	r3, #2
 800687c:	77fb      	strb	r3, [r7, #31]
 800687e:	e04a      	b.n	8006916 <UART_SetConfig+0x34e>
 8006880:	2304      	movs	r3, #4
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e047      	b.n	8006916 <UART_SetConfig+0x34e>
 8006886:	2308      	movs	r3, #8
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e044      	b.n	8006916 <UART_SetConfig+0x34e>
 800688c:	2310      	movs	r3, #16
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	bf00      	nop
 8006892:	e040      	b.n	8006916 <UART_SetConfig+0x34e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a11      	ldr	r2, [pc, #68]	; (80068e0 <UART_SetConfig+0x318>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d139      	bne.n	8006912 <UART_SetConfig+0x34a>
 800689e:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <UART_SetConfig+0x2fc>)
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ac:	d027      	beq.n	80068fe <UART_SetConfig+0x336>
 80068ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b2:	d817      	bhi.n	80068e4 <UART_SetConfig+0x31c>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01c      	beq.n	80068f2 <UART_SetConfig+0x32a>
 80068b8:	e027      	b.n	800690a <UART_SetConfig+0x342>
 80068ba:	bf00      	nop
 80068bc:	efff69f3 	.word	0xefff69f3
 80068c0:	40011000 	.word	0x40011000
 80068c4:	40023800 	.word	0x40023800
 80068c8:	40004400 	.word	0x40004400
 80068cc:	40004800 	.word	0x40004800
 80068d0:	40004c00 	.word	0x40004c00
 80068d4:	40005000 	.word	0x40005000
 80068d8:	40011400 	.word	0x40011400
 80068dc:	40007800 	.word	0x40007800
 80068e0:	40007c00 	.word	0x40007c00
 80068e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e8:	d006      	beq.n	80068f8 <UART_SetConfig+0x330>
 80068ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068ee:	d009      	beq.n	8006904 <UART_SetConfig+0x33c>
 80068f0:	e00b      	b.n	800690a <UART_SetConfig+0x342>
 80068f2:	2300      	movs	r3, #0
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e00e      	b.n	8006916 <UART_SetConfig+0x34e>
 80068f8:	2302      	movs	r3, #2
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e00b      	b.n	8006916 <UART_SetConfig+0x34e>
 80068fe:	2304      	movs	r3, #4
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e008      	b.n	8006916 <UART_SetConfig+0x34e>
 8006904:	2308      	movs	r3, #8
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e005      	b.n	8006916 <UART_SetConfig+0x34e>
 800690a:	2310      	movs	r3, #16
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	bf00      	nop
 8006910:	e001      	b.n	8006916 <UART_SetConfig+0x34e>
 8006912:	2310      	movs	r3, #16
 8006914:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800691e:	d17c      	bne.n	8006a1a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8006920:	7ffb      	ldrb	r3, [r7, #31]
 8006922:	2b08      	cmp	r3, #8
 8006924:	d859      	bhi.n	80069da <UART_SetConfig+0x412>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <UART_SetConfig+0x364>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	08006951 	.word	0x08006951
 8006930:	0800696f 	.word	0x0800696f
 8006934:	0800698d 	.word	0x0800698d
 8006938:	080069db 	.word	0x080069db
 800693c:	080069a5 	.word	0x080069a5
 8006940:	080069db 	.word	0x080069db
 8006944:	080069db 	.word	0x080069db
 8006948:	080069db 	.word	0x080069db
 800694c:	080069c3 	.word	0x080069c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006950:	f7fd f960 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8006954:	4603      	mov	r3, r0
 8006956:	005a      	lsls	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	085b      	lsrs	r3, r3, #1
 800695e:	441a      	add	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	b29b      	uxth	r3, r3
 800696a:	61bb      	str	r3, [r7, #24]
        break;
 800696c:	e038      	b.n	80069e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800696e:	f7fd f965 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8006972:	4603      	mov	r3, r0
 8006974:	005a      	lsls	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	441a      	add	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	b29b      	uxth	r3, r3
 8006988:	61bb      	str	r3, [r7, #24]
        break;
 800698a:	e029      	b.n	80069e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	085a      	lsrs	r2, r3, #1
 8006992:	4b5d      	ldr	r3, [pc, #372]	; (8006b08 <UART_SetConfig+0x540>)
 8006994:	4413      	add	r3, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6852      	ldr	r2, [r2, #4]
 800699a:	fbb3 f3f2 	udiv	r3, r3, r2
 800699e:	b29b      	uxth	r3, r3
 80069a0:	61bb      	str	r3, [r7, #24]
        break;
 80069a2:	e01d      	b.n	80069e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069a4:	f7fd f852 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 80069a8:	4603      	mov	r3, r0
 80069aa:	005a      	lsls	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	441a      	add	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	61bb      	str	r3, [r7, #24]
        break;
 80069c0:	e00e      	b.n	80069e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	61bb      	str	r3, [r7, #24]
        break;
 80069d8:	e002      	b.n	80069e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	75fb      	strb	r3, [r7, #23]
        break;
 80069de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b0f      	cmp	r3, #15
 80069e4:	d916      	bls.n	8006a14 <UART_SetConfig+0x44c>
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ec:	d212      	bcs.n	8006a14 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f023 030f 	bic.w	r3, r3, #15
 80069f6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	89fa      	ldrh	r2, [r7, #14]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	e06e      	b.n	8006af2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
 8006a18:	e06b      	b.n	8006af2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d857      	bhi.n	8006ad0 <UART_SetConfig+0x508>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x460>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a69 	.word	0x08006a69
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006ad1 	.word	0x08006ad1
 8006a38:	08006a9d 	.word	0x08006a9d
 8006a3c:	08006ad1 	.word	0x08006ad1
 8006a40:	08006ad1 	.word	0x08006ad1
 8006a44:	08006ad1 	.word	0x08006ad1
 8006a48:	08006ab9 	.word	0x08006ab9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006a4c:	f7fd f8e2 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8006a50:	4602      	mov	r2, r0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	441a      	add	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	61bb      	str	r3, [r7, #24]
        break;
 8006a66:	e036      	b.n	8006ad6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006a68:	f7fd f8e8 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	441a      	add	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	61bb      	str	r3, [r7, #24]
        break;
 8006a82:	e028      	b.n	8006ad6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	085a      	lsrs	r2, r3, #1
 8006a8a:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <UART_SetConfig+0x544>)
 8006a8c:	4413      	add	r3, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6852      	ldr	r2, [r2, #4]
 8006a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	61bb      	str	r3, [r7, #24]
        break;
 8006a9a:	e01c      	b.n	8006ad6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006a9c:	f7fc ffd6 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	441a      	add	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	61bb      	str	r3, [r7, #24]
        break;
 8006ab6:	e00e      	b.n	8006ad6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	61bb      	str	r3, [r7, #24]
        break;
 8006ace:	e002      	b.n	8006ad6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
        break;
 8006ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b0f      	cmp	r3, #15
 8006ada:	d908      	bls.n	8006aee <UART_SetConfig+0x526>
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae2:	d204      	bcs.n	8006aee <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e001      	b.n	8006af2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3720      	adds	r7, #32
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	01e84800 	.word	0x01e84800
 8006b0c:	00f42400 	.word	0x00f42400

08006b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01a      	beq.n	8006c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c0e:	d10a      	bne.n	8006c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006c62:	f7fa fa39 	bl	80010d8 <HAL_GetTick>
 8006c66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d10e      	bne.n	8006c94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f814 	bl	8006cb2 <UART_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e00a      	b.n	8006caa <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc2:	e02a      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d026      	beq.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ccc:	f7fa fa04 	bl	80010d8 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d302      	bcc.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d11b      	bne.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cf0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e00f      	b.n	8006d3a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4013      	ands	r3, r2
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	bf0c      	ite	eq
 8006d2a:	2301      	moveq	r3, #1
 8006d2c:	2300      	movne	r3, #0
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d0c5      	beq.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d58:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff fc07 	bl	80065b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dba:	2b21      	cmp	r3, #33	; 0x21
 8006dbc:	d12a      	bne.n	8006e14 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d110      	bne.n	8006dec <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006dea:	e013      	b.n	8006e14 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2c:	2b21      	cmp	r3, #33	; 0x21
 8006e2e:	d12f      	bne.n	8006e90 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d110      	bne.n	8006e5e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e4a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e5a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006e5c:	e018      	b.n	8006e90 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e72:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e78:	1c9a      	adds	r2, r3, #2
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e90:	bf00      	nop
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff fb6d 	bl	80065a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006edc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ee2:	2b22      	cmp	r3, #34	; 0x22
 8006ee4:	d13a      	bne.n	8006f5c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006eee:	89bb      	ldrh	r3, [r7, #12]
 8006ef0:	b2d9      	uxtb	r1, r3
 8006ef2:	89fb      	ldrh	r3, [r7, #14]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	400a      	ands	r2, r1
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d121      	bne.n	8006f6c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f36:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 ff9b 	bl	8008e90 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f5a:	e007      	b.n	8006f6c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0208 	orr.w	r2, r2, #8
 8006f6a:	619a      	str	r2, [r3, #24]
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f82:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f88:	2b22      	cmp	r3, #34	; 0x22
 8006f8a:	d13a      	bne.n	8007002 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f98:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f9a:	89ba      	ldrh	r2, [r7, #12]
 8006f9c:	89fb      	ldrh	r3, [r7, #14]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	1c9a      	adds	r2, r3, #2
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d121      	bne.n	8007012 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fdc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 ff48 	bl	8008e90 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007000:	e007      	b.n	8007012 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0208 	orr.w	r2, r2, #8
 8007010:	619a      	str	r2, [r3, #24]
}
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800701c:	b084      	sub	sp, #16
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	f107 001c 	add.w	r0, r7, #28
 800702a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	2b01      	cmp	r3, #1
 8007032:	d120      	bne.n	8007076 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	4b20      	ldr	r3, [pc, #128]	; (80070c8 <USB_CoreInit+0xac>)
 8007046:	4013      	ands	r3, r2
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa60 	bl	8007530 <USB_CoreReset>
 8007070:	4603      	mov	r3, r0
 8007072:	73fb      	strb	r3, [r7, #15]
 8007074:	e010      	b.n	8007098 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa54 	bl	8007530 <USB_CoreReset>
 8007088:	4603      	mov	r3, r0
 800708a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	2b01      	cmp	r3, #1
 800709c:	d10b      	bne.n	80070b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f043 0206 	orr.w	r2, r3, #6
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070c2:	b004      	add	sp, #16
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	ffbdffbf 	.word	0xffbdffbf

080070cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f023 0201 	bic.w	r2, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d106      	bne.n	800711a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]
 8007118:	e00b      	b.n	8007132 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	e001      	b.n	8007132 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e003      	b.n	800713a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007132:	2032      	movs	r0, #50	; 0x32
 8007134:	f7f9 ffdc 	bl	80010f0 <HAL_Delay>

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007144:	b084      	sub	sp, #16
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800715e:	2300      	movs	r3, #0
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	e009      	b.n	8007178 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3340      	adds	r3, #64	; 0x40
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	2200      	movs	r2, #0
 8007170:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	3301      	adds	r3, #1
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b0e      	cmp	r3, #14
 800717c:	d9f2      	bls.n	8007164 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800717e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d112      	bne.n	80071aa <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e005      	b.n	80071b6 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071bc:	461a      	mov	r2, r3
 80071be:	2300      	movs	r3, #0
 80071c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c8:	4619      	mov	r1, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d0:	461a      	mov	r2, r3
 80071d2:	680b      	ldr	r3, [r1, #0]
 80071d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d10c      	bne.n	80071f6 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071e2:	2100      	movs	r1, #0
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f971 	bl	80074cc <USB_SetDevSpeed>
 80071ea:	e018      	b.n	800721e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071ec:	2101      	movs	r1, #1
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f96c 	bl	80074cc <USB_SetDevSpeed>
 80071f4:	e013      	b.n	800721e <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d10c      	bne.n	8007216 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007202:	2100      	movs	r1, #0
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f961 	bl	80074cc <USB_SetDevSpeed>
 800720a:	e008      	b.n	800721e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800720c:	2101      	movs	r1, #1
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f95c 	bl	80074cc <USB_SetDevSpeed>
 8007214:	e003      	b.n	800721e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007216:	2103      	movs	r1, #3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f957 	bl	80074cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800721e:	2110      	movs	r1, #16
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f90b 	bl	800743c <USB_FlushTxFifo>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f929 	bl	8007488 <USB_FlushRxFifo>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	461a      	mov	r2, r3
 8007248:	2300      	movs	r3, #0
 800724a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	461a      	mov	r2, r3
 8007254:	2300      	movs	r3, #0
 8007256:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725e:	461a      	mov	r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007264:	2300      	movs	r3, #0
 8007266:	613b      	str	r3, [r7, #16]
 8007268:	e043      	b.n	80072f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800727c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007280:	d118      	bne.n	80072b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007294:	461a      	mov	r2, r3
 8007296:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	e013      	b.n	80072c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072aa:	461a      	mov	r2, r3
 80072ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e008      	b.n	80072c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c0:	461a      	mov	r2, r3
 80072c2:	2300      	movs	r3, #0
 80072c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d2:	461a      	mov	r2, r3
 80072d4:	2300      	movs	r3, #0
 80072d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e4:	461a      	mov	r2, r3
 80072e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	3301      	adds	r3, #1
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d3b7      	bcc.n	800726a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	e043      	b.n	8007388 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007316:	d118      	bne.n	800734a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732a:	461a      	mov	r2, r3
 800732c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	e013      	b.n	800735c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007340:	461a      	mov	r2, r3
 8007342:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	e008      	b.n	800735c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	461a      	mov	r2, r3
 8007358:	2300      	movs	r3, #0
 800735a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007368:	461a      	mov	r2, r3
 800736a:	2300      	movs	r3, #0
 800736c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737a:	461a      	mov	r2, r3
 800737c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007380:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	3301      	adds	r3, #1
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	429a      	cmp	r2, r3
 800738e:	d3b7      	bcc.n	8007300 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800739e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d110      	bne.n	80073cc <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b0:	461a      	mov	r2, r3
 80073b2:	4b1e      	ldr	r3, [pc, #120]	; (800742c <USB_DevInit+0x2e8>)
 80073b4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c4:	4619      	mov	r1, r3
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <USB_DevInit+0x2ec>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f043 0210 	orr.w	r2, r3, #16
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	4b10      	ldr	r3, [pc, #64]	; (8007434 <USB_DevInit+0x2f0>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f043 0208 	orr.w	r2, r3, #8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800740a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740c:	2b01      	cmp	r3, #1
 800740e:	d105      	bne.n	800741c <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699a      	ldr	r2, [r3, #24]
 8007414:	4b08      	ldr	r3, [pc, #32]	; (8007438 <USB_DevInit+0x2f4>)
 8007416:	4313      	orrs	r3, r2
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007428:	b004      	add	sp, #16
 800742a:	4770      	bx	lr
 800742c:	00800100 	.word	0x00800100
 8007430:	00010003 	.word	0x00010003
 8007434:	803c3800 	.word	0x803c3800
 8007438:	40000004 	.word	0x40000004

0800743c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	019b      	lsls	r3, r3, #6
 800744e:	f043 0220 	orr.w	r2, r3, #32
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <USB_FlushTxFifo+0x48>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d901      	bls.n	8007468 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e006      	b.n	8007476 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0320 	and.w	r3, r3, #32
 8007470:	2b20      	cmp	r3, #32
 8007472:	d0f0      	beq.n	8007456 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	00030d40 	.word	0x00030d40

08007488 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2210      	movs	r2, #16
 8007498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <USB_FlushRxFifo+0x40>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e006      	b.n	80074ba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d0f0      	beq.n	800749a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	00030d40 	.word	0x00030d40

080074cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	68f9      	ldr	r1, [r7, #12]
 80074e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074ec:	4313      	orrs	r3, r2
 80074ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007518:	f043 0302 	orr.w	r3, r3, #2
 800751c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800751e:	2003      	movs	r0, #3
 8007520:	f7f9 fde6 	bl	80010f0 <HAL_Delay>

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a13      	ldr	r2, [pc, #76]	; (8007594 <USB_CoreReset+0x64>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d901      	bls.n	800754e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e01b      	b.n	8007586 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	daf2      	bge.n	800753c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f043 0201 	orr.w	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3301      	adds	r3, #1
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a09      	ldr	r2, [pc, #36]	; (8007594 <USB_CoreReset+0x64>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d901      	bls.n	8007578 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e006      	b.n	8007586 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d0f0      	beq.n	8007566 <USB_CoreReset+0x36>

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	00030d40 	.word	0x00030d40

08007598 <bmp280_get_regs>:
 8007598:	b590      	push	{r4, r7, lr}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607b      	str	r3, [r7, #4]
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]
 80075a6:	4613      	mov	r3, r2
 80075a8:	73bb      	strb	r3, [r7, #14]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fb36 	bl	8007c1c <null_ptr_check>
 80075b0:	4603      	mov	r3, r0
 80075b2:	75fb      	strb	r3, [r7, #23]
 80075b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d11c      	bne.n	80075f6 <bmp280_get_regs+0x5e>
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d019      	beq.n	80075f6 <bmp280_get_regs+0x5e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	789b      	ldrb	r3, [r3, #2]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <bmp280_get_regs+0x3a>
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075d0:	73fb      	strb	r3, [r7, #15]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685c      	ldr	r4, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7858      	ldrb	r0, [r3, #1]
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	7bf9      	ldrb	r1, [r7, #15]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	47a0      	blx	r4
 80075e4:	4603      	mov	r3, r0
 80075e6:	75fb      	strb	r3, [r7, #23]
 80075e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d004      	beq.n	80075fa <bmp280_get_regs+0x62>
 80075f0:	23fc      	movs	r3, #252	; 0xfc
 80075f2:	75fb      	strb	r3, [r7, #23]
 80075f4:	e001      	b.n	80075fa <bmp280_get_regs+0x62>
 80075f6:	23ff      	movs	r3, #255	; 0xff
 80075f8:	75fb      	strb	r3, [r7, #23]
 80075fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075fe:	4618      	mov	r0, r3
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	bd90      	pop	{r4, r7, pc}

08007606 <bmp280_set_regs>:
 8007606:	b590      	push	{r4, r7, lr}
 8007608:	b089      	sub	sp, #36	; 0x24
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	603b      	str	r3, [r7, #0]
 8007612:	4613      	mov	r3, r2
 8007614:	71fb      	strb	r3, [r7, #7]
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	2b04      	cmp	r3, #4
 800761a:	d901      	bls.n	8007620 <bmp280_set_regs+0x1a>
 800761c:	2304      	movs	r3, #4
 800761e:	71fb      	strb	r3, [r7, #7]
 8007620:	6838      	ldr	r0, [r7, #0]
 8007622:	f000 fafb 	bl	8007c1c <null_ptr_check>
 8007626:	4603      	mov	r3, r0
 8007628:	77fb      	strb	r3, [r7, #31]
 800762a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d14d      	bne.n	80076ce <bmp280_set_regs+0xc8>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d04a      	beq.n	80076ce <bmp280_set_regs+0xc8>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d047      	beq.n	80076ce <bmp280_set_regs+0xc8>
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d041      	beq.n	80076c8 <bmp280_set_regs+0xc2>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	743b      	strb	r3, [r7, #16]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	789b      	ldrb	r3, [r3, #2]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d114      	bne.n	800767c <bmp280_set_regs+0x76>
 8007652:	2300      	movs	r3, #0
 8007654:	76fb      	strb	r3, [r7, #27]
 8007656:	e00d      	b.n	8007674 <bmp280_set_regs+0x6e>
 8007658:	7efb      	ldrb	r3, [r7, #27]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	7efb      	ldrb	r3, [r7, #27]
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	440b      	add	r3, r1
 8007666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	7efb      	ldrb	r3, [r7, #27]
 8007670:	3301      	adds	r3, #1
 8007672:	76fb      	strb	r3, [r7, #27]
 8007674:	7efa      	ldrb	r2, [r7, #27]
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	429a      	cmp	r2, r3
 800767a:	d3ed      	bcc.n	8007658 <bmp280_set_regs+0x52>
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d90d      	bls.n	800769e <bmp280_set_regs+0x98>
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	f107 0110 	add.w	r1, r7, #16
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fae6 	bl	8007c5c <interleave_data>
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	b29b      	uxth	r3, r3
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	83bb      	strh	r3, [r7, #28]
 800769c:	e001      	b.n	80076a2 <bmp280_set_regs+0x9c>
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	83bb      	strh	r3, [r7, #28]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689c      	ldr	r4, [r3, #8]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	7858      	ldrb	r0, [r3, #1]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7819      	ldrb	r1, [r3, #0]
 80076ae:	8bbb      	ldrh	r3, [r7, #28]
 80076b0:	f107 0210 	add.w	r2, r7, #16
 80076b4:	47a0      	blx	r4
 80076b6:	4603      	mov	r3, r0
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d008      	beq.n	80076d4 <bmp280_set_regs+0xce>
 80076c2:	23fc      	movs	r3, #252	; 0xfc
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e005      	b.n	80076d4 <bmp280_set_regs+0xce>
 80076c8:	23fd      	movs	r3, #253	; 0xfd
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e002      	b.n	80076d4 <bmp280_set_regs+0xce>
 80076ce:	23ff      	movs	r3, #255	; 0xff
 80076d0:	77fb      	strb	r3, [r7, #31]
 80076d2:	e000      	b.n	80076d6 <bmp280_set_regs+0xd0>
 80076d4:	bf00      	nop
 80076d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80076da:	4618      	mov	r0, r3
 80076dc:	3724      	adds	r7, #36	; 0x24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd90      	pop	{r4, r7, pc}

080076e2 <bmp280_soft_reset>:
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	23e0      	movs	r3, #224	; 0xe0
 80076ec:	73bb      	strb	r3, [r7, #14]
 80076ee:	23b6      	movs	r3, #182	; 0xb6
 80076f0:	737b      	strb	r3, [r7, #13]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa92 	bl	8007c1c <null_ptr_check>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]
 80076fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10d      	bne.n	8007720 <bmp280_soft_reset+0x3e>
 8007704:	f107 010d 	add.w	r1, r7, #13
 8007708:	f107 000e 	add.w	r0, r7, #14
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f7ff ff79 	bl	8007606 <bmp280_set_regs>
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	2002      	movs	r0, #2
 800771e:	4798      	blx	r3
 8007720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <bmp280_init>:
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	2305      	movs	r3, #5
 8007736:	73bb      	strb	r3, [r7, #14]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fa6f 	bl	8007c1c <null_ptr_check>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]
 8007742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d150      	bne.n	80077ec <bmp280_init+0xc0>
 800774a:	e02d      	b.n	80077a8 <bmp280_init+0x7c>
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	20d0      	movs	r0, #208	; 0xd0
 8007754:	f7ff ff20 	bl	8007598 <bmp280_get_regs>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
 800775c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11a      	bne.n	800779a <bmp280_init+0x6e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b56      	cmp	r3, #86	; 0x56
 800776a:	d007      	beq.n	800777c <bmp280_init+0x50>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b57      	cmp	r3, #87	; 0x57
 8007772:	d003      	beq.n	800777c <bmp280_init+0x50>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b58      	cmp	r3, #88	; 0x58
 800777a:	d10e      	bne.n	800779a <bmp280_init+0x6e>
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ffb0 	bl	80076e2 <bmp280_soft_reset>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
 8007786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d110      	bne.n	80077b0 <bmp280_init+0x84>
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa8f 	bl	8007cb2 <get_calib_param>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
 8007798:	e00a      	b.n	80077b0 <bmp280_init+0x84>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	200a      	movs	r0, #10
 80077a0:	4798      	blx	r3
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	73bb      	strb	r3, [r7, #14]
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1ce      	bne.n	800774c <bmp280_init+0x20>
 80077ae:	e000      	b.n	80077b2 <bmp280_init+0x86>
 80077b0:	bf00      	nop
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <bmp280_init+0x90>
 80077b8:	23fe      	movs	r3, #254	; 0xfe
 80077ba:	73fb      	strb	r3, [r7, #15]
 80077bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d113      	bne.n	80077ec <bmp280_init+0xc0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80077ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <bmp280_get_config>:
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	733b      	strb	r3, [r7, #12]
 8007806:	2300      	movs	r3, #0
 8007808:	737b      	strb	r3, [r7, #13]
 800780a:	6838      	ldr	r0, [r7, #0]
 800780c:	f000 fa06 	bl	8007c1c <null_ptr_check>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
 8007814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d137      	bne.n	800788c <bmp280_get_config+0x94>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d034      	beq.n	800788c <bmp280_get_config+0x94>
 8007822:	f107 010c 	add.w	r1, r7, #12
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2202      	movs	r2, #2
 800782a:	20f4      	movs	r0, #244	; 0xf4
 800782c:	f7ff feb4 	bl	8007598 <bmp280_get_regs>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d129      	bne.n	8007890 <bmp280_get_config+0x98>
 800783c:	7b3b      	ldrb	r3, [r7, #12]
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	b2da      	uxtb	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	7b3b      	ldrb	r3, [r7, #12]
 8007848:	109b      	asrs	r3, r3, #2
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	b2da      	uxtb	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	705a      	strb	r2, [r3, #1]
 8007856:	7b7b      	ldrb	r3, [r7, #13]
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	b2da      	uxtb	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	709a      	strb	r2, [r3, #2]
 8007860:	7b7b      	ldrb	r3, [r7, #13]
 8007862:	109b      	asrs	r3, r3, #2
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	b2da      	uxtb	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	70da      	strb	r2, [r3, #3]
 8007870:	7b7b      	ldrb	r3, [r7, #13]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	711a      	strb	r2, [r3, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	332c      	adds	r3, #44	; 0x2c
 8007882:	6810      	ldr	r0, [r2, #0]
 8007884:	6018      	str	r0, [r3, #0]
 8007886:	7912      	ldrb	r2, [r2, #4]
 8007888:	711a      	strb	r2, [r3, #4]
 800788a:	e001      	b.n	8007890 <bmp280_get_config+0x98>
 800788c:	23ff      	movs	r3, #255	; 0xff
 800788e:	73fb      	strb	r3, [r7, #15]
 8007890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <bmp280_set_config>:
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	2000      	movs	r0, #0
 80078ac:	f000 fa9e 	bl	8007dec <conf_sensor>
 80078b0:	4603      	mov	r3, r0
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <bmp280_set_power_mode>:
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	4603      	mov	r3, r0
 80078c2:	6039      	str	r1, [r7, #0]
 80078c4:	71fb      	strb	r3, [r7, #7]
 80078c6:	6838      	ldr	r0, [r7, #0]
 80078c8:	f000 f9a8 	bl	8007c1c <null_ptr_check>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]
 80078d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <bmp280_set_power_mode+0x32>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fa82 	bl	8007dec <conf_sensor>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
 80078ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <bmp280_get_uncomp_data>:
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	809a      	strh	r2, [r3, #4]
 800790c:	6838      	ldr	r0, [r7, #0]
 800790e:	f000 f985 	bl	8007c1c <null_ptr_check>
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]
 8007916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d133      	bne.n	8007986 <bmp280_get_uncomp_data+0x8e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d030      	beq.n	8007986 <bmp280_get_uncomp_data+0x8e>
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2206      	movs	r2, #6
 800792c:	20f7      	movs	r0, #247	; 0xf7
 800792e:	f7ff fe33 	bl	8007598 <bmp280_get_regs>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
 8007936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d120      	bne.n	8007980 <bmp280_get_uncomp_data+0x88>
 800793e:	7a3b      	ldrb	r3, [r7, #8]
 8007940:	031a      	lsls	r2, r3, #12
 8007942:	7a7b      	ldrb	r3, [r7, #9]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	4313      	orrs	r3, r2
 8007948:	7aba      	ldrb	r2, [r7, #10]
 800794a:	0912      	lsrs	r2, r2, #4
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	431a      	orrs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	031a      	lsls	r2, r3, #12
 8007958:	7b3b      	ldrb	r3, [r7, #12]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	4313      	orrs	r3, r2
 800795e:	7b7a      	ldrb	r2, [r7, #13]
 8007960:	0912      	lsrs	r2, r2, #4
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f000 faf3 	bl	8007f60 <st_check_boundaries>
 800797a:	4603      	mov	r3, r0
 800797c:	73fb      	strb	r3, [r7, #15]
 800797e:	e004      	b.n	800798a <bmp280_get_uncomp_data+0x92>
 8007980:	23f3      	movs	r3, #243	; 0xf3
 8007982:	73fb      	strb	r3, [r7, #15]
 8007984:	e001      	b.n	800798a <bmp280_get_uncomp_data+0x92>
 8007986:	23ff      	movs	r3, #255	; 0xff
 8007988:	73fb      	strb	r3, [r7, #15]
 800798a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <bmp280_get_comp_temp_32bit>:
 8007996:	b580      	push	{r7, lr}
 8007998:	b088      	sub	sp, #32
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f93a 	bl	8007c1c <null_ptr_check>
 80079a8:	4603      	mov	r3, r0
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d150      	bne.n	8007a56 <bmp280_get_comp_temp_32bit+0xc0>
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da00      	bge.n	80079bc <bmp280_get_comp_temp_32bit+0x26>
 80079ba:	3307      	adds	r3, #7
 80079bc:	10db      	asrs	r3, r3, #3
 80079be:	461a      	mov	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	8a1b      	ldrh	r3, [r3, #16]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80079ce:	fb02 f303 	mul.w	r3, r2, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	da01      	bge.n	80079da <bmp280_get_comp_temp_32bit+0x44>
 80079d6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80079da:	12db      	asrs	r3, r3, #11
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	da00      	bge.n	80079e6 <bmp280_get_comp_temp_32bit+0x50>
 80079e4:	330f      	adds	r3, #15
 80079e6:	111b      	asrs	r3, r3, #4
 80079e8:	461a      	mov	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	8a1b      	ldrh	r3, [r3, #16]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	da00      	bge.n	80079f8 <bmp280_get_comp_temp_32bit+0x62>
 80079f6:	330f      	adds	r3, #15
 80079f8:	111b      	asrs	r3, r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8a1b      	ldrh	r3, [r3, #16]
 8007a00:	1acb      	subs	r3, r1, r3
 8007a02:	fb03 f302 	mul.w	r3, r3, r2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da01      	bge.n	8007a0e <bmp280_get_comp_temp_32bit+0x78>
 8007a0a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8007a0e:	131b      	asrs	r3, r3, #12
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007a18:	fb03 f302 	mul.w	r3, r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da03      	bge.n	8007a28 <bmp280_get_comp_temp_32bit+0x92>
 8007a20:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8007a24:	441a      	add	r2, r3
 8007a26:	4613      	mov	r3, r2
 8007a28:	139b      	asrs	r3, r3, #14
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	441a      	add	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	629a      	str	r2, [r3, #40]	; 0x28
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	3380      	adds	r3, #128	; 0x80
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	da00      	bge.n	8007a48 <bmp280_get_comp_temp_32bit+0xb2>
 8007a46:	33ff      	adds	r3, #255	; 0xff
 8007a48:	121b      	asrs	r3, r3, #8
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	2300      	movs	r3, #0
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e004      	b.n	8007a60 <bmp280_get_comp_temp_32bit+0xca>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	23f2      	movs	r3, #242	; 0xf2
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a64:	4618      	mov	r0, r3
 8007a66:	3720      	adds	r7, #32
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <bmp280_get_comp_temp_double>:
 8007a6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007a70:	b08a      	sub	sp, #40	; 0x28
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8ce 	bl	8007c1c <null_ptr_check>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f040 80ac 	bne.w	8007be8 <bmp280_get_comp_temp_double+0x17c>
 8007a90:	68b8      	ldr	r0, [r7, #8]
 8007a92:	f7f8 fd67 	bl	8000564 <__aeabi_i2d>
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	4b5c      	ldr	r3, [pc, #368]	; (8007c0c <bmp280_get_comp_temp_double+0x1a0>)
 8007a9c:	f7f8 fef6 	bl	800088c <__aeabi_ddiv>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	4625      	mov	r5, r4
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8a1b      	ldrh	r3, [r3, #16]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f8 fd49 	bl	8000544 <__aeabi_ui2d>
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	4b56      	ldr	r3, [pc, #344]	; (8007c10 <bmp280_get_comp_temp_double+0x1a4>)
 8007ab8:	f7f8 fee8 	bl	800088c <__aeabi_ddiv>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	f7f8 fc00 	bl	80002c8 <__aeabi_dsub>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	4625      	mov	r5, r4
 8007ace:	461c      	mov	r4, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7f8 fd44 	bl	8000564 <__aeabi_i2d>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f7f8 fda8 	bl	8000638 <__aeabi_dmul>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007af0:	68b8      	ldr	r0, [r7, #8]
 8007af2:	f7f8 fd37 	bl	8000564 <__aeabi_i2d>
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8007afe:	f7f8 fec5 	bl	800088c <__aeabi_ddiv>
 8007b02:	4603      	mov	r3, r0
 8007b04:	460c      	mov	r4, r1
 8007b06:	4625      	mov	r5, r4
 8007b08:	461c      	mov	r4, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8a1b      	ldrh	r3, [r3, #16]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7f8 fd18 	bl	8000544 <__aeabi_ui2d>
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	4b3e      	ldr	r3, [pc, #248]	; (8007c14 <bmp280_get_comp_temp_double+0x1a8>)
 8007b1a:	f7f8 feb7 	bl	800088c <__aeabi_ddiv>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4620      	mov	r0, r4
 8007b24:	4629      	mov	r1, r5
 8007b26:	f7f8 fbcf 	bl	80002c8 <__aeabi_dsub>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	4625      	mov	r5, r4
 8007b30:	461c      	mov	r4, r3
 8007b32:	68b8      	ldr	r0, [r7, #8]
 8007b34:	f7f8 fd16 	bl	8000564 <__aeabi_i2d>
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8007b40:	f7f8 fea4 	bl	800088c <__aeabi_ddiv>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4690      	mov	r8, r2
 8007b4a:	4699      	mov	r9, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8a1b      	ldrh	r3, [r3, #16]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7f8 fcf7 	bl	8000544 <__aeabi_ui2d>
 8007b56:	f04f 0200 	mov.w	r2, #0
 8007b5a:	4b2e      	ldr	r3, [pc, #184]	; (8007c14 <bmp280_get_comp_temp_double+0x1a8>)
 8007b5c:	f7f8 fe96 	bl	800088c <__aeabi_ddiv>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	f7f8 fbae 	bl	80002c8 <__aeabi_dsub>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 fd60 	bl	8000638 <__aeabi_dmul>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	4625      	mov	r5, r4
 8007b7e:	461c      	mov	r4, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7f8 fcec 	bl	8000564 <__aeabi_i2d>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4620      	mov	r0, r4
 8007b92:	4629      	mov	r1, r5
 8007b94:	f7f8 fd50 	bl	8000638 <__aeabi_dmul>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007ba0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ba4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ba8:	f7f8 fb90 	bl	80002cc <__adddf3>
 8007bac:	4603      	mov	r3, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	f7f8 fff0 	bl	8000b98 <__aeabi_d2iz>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	629a      	str	r2, [r3, #40]	; 0x28
 8007bbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bc6:	f7f8 fb81 	bl	80002cc <__adddf3>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	460c      	mov	r4, r1
 8007bce:	4618      	mov	r0, r3
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <bmp280_get_comp_temp_double+0x1ac>)
 8007bd8:	f7f8 fe58 	bl	800088c <__aeabi_ddiv>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	e9c2 3400 	strd	r3, r4, [r2]
 8007be6:	e009      	b.n	8007bfc <bmp280_get_comp_temp_double+0x190>
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	f04f 0400 	mov.w	r4, #0
 8007bf2:	e9c2 3400 	strd	r3, r4, [r2]
 8007bf6:	23ef      	movs	r3, #239	; 0xef
 8007bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c00:	4618      	mov	r0, r3
 8007c02:	3728      	adds	r7, #40	; 0x28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007c0a:	bf00      	nop
 8007c0c:	40d00000 	.word	0x40d00000
 8007c10:	40900000 	.word	0x40900000
 8007c14:	40c00000 	.word	0x40c00000
 8007c18:	40b40000 	.word	0x40b40000

08007c1c <null_ptr_check>:
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00b      	beq.n	8007c42 <null_ptr_check+0x26>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <null_ptr_check+0x26>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <null_ptr_check+0x26>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d102      	bne.n	8007c48 <null_ptr_check+0x2c>
 8007c42:	23ff      	movs	r3, #255	; 0xff
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	e001      	b.n	8007c4c <null_ptr_check+0x30>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <interleave_data>:
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	70fb      	strb	r3, [r7, #3]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
 8007c6e:	e016      	b.n	8007c9e <interleave_data+0x42>
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	441a      	add	r2, r3
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	440b      	add	r3, r1
 8007c80:	7812      	ldrb	r2, [r2, #0]
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	441a      	add	r2, r3
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	4619      	mov	r1, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	440b      	add	r3, r1
 8007c94:	7812      	ldrb	r2, [r2, #0]
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
 8007c9e:	7dfa      	ldrb	r2, [r7, #23]
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d3e4      	bcc.n	8007c70 <interleave_data+0x14>
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <get_calib_param>:
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b08a      	sub	sp, #40	; 0x28
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	f107 030c 	add.w	r3, r7, #12
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	605a      	str	r2, [r3, #4]
 8007cc4:	609a      	str	r2, [r3, #8]
 8007cc6:	60da      	str	r2, [r3, #12]
 8007cc8:	611a      	str	r2, [r3, #16]
 8007cca:	615a      	str	r2, [r3, #20]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ffa5 	bl	8007c1c <null_ptr_check>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d17f      	bne.n	8007de0 <get_calib_param+0x12e>
 8007ce0:	f107 010c 	add.w	r1, r7, #12
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2218      	movs	r2, #24
 8007ce8:	2088      	movs	r0, #136	; 0x88
 8007cea:	f7ff fc55 	bl	8007598 <bmp280_get_regs>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007cf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d171      	bne.n	8007de0 <get_calib_param+0x12e>
 8007cfc:	7b7b      	ldrb	r3, [r7, #13]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	b21a      	sxth	r2, r3
 8007d02:	7b3b      	ldrb	r3, [r7, #12]
 8007d04:	b21b      	sxth	r3, r3
 8007d06:	4313      	orrs	r3, r2
 8007d08:	b21b      	sxth	r3, r3
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	821a      	strh	r2, [r3, #16]
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	b21a      	sxth	r2, r3
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	b21b      	sxth	r3, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b21a      	sxth	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	825a      	strh	r2, [r3, #18]
 8007d22:	7c7b      	ldrb	r3, [r7, #17]
 8007d24:	021b      	lsls	r3, r3, #8
 8007d26:	b21a      	sxth	r2, r3
 8007d28:	7c3b      	ldrb	r3, [r7, #16]
 8007d2a:	b21b      	sxth	r3, r3
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	b21a      	sxth	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	829a      	strh	r2, [r3, #20]
 8007d34:	7cfb      	ldrb	r3, [r7, #19]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	b21a      	sxth	r2, r3
 8007d3a:	7cbb      	ldrb	r3, [r7, #18]
 8007d3c:	b21b      	sxth	r3, r3
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	82da      	strh	r2, [r3, #22]
 8007d48:	7d7b      	ldrb	r3, [r7, #21]
 8007d4a:	021b      	lsls	r3, r3, #8
 8007d4c:	b21a      	sxth	r2, r3
 8007d4e:	7d3b      	ldrb	r3, [r7, #20]
 8007d50:	b21b      	sxth	r3, r3
 8007d52:	4313      	orrs	r3, r2
 8007d54:	b21a      	sxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	831a      	strh	r2, [r3, #24]
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	b21a      	sxth	r2, r3
 8007d60:	7dbb      	ldrb	r3, [r7, #22]
 8007d62:	b21b      	sxth	r3, r3
 8007d64:	4313      	orrs	r3, r2
 8007d66:	b21a      	sxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	835a      	strh	r2, [r3, #26]
 8007d6c:	7e7b      	ldrb	r3, [r7, #25]
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	b21a      	sxth	r2, r3
 8007d72:	7e3b      	ldrb	r3, [r7, #24]
 8007d74:	b21b      	sxth	r3, r3
 8007d76:	4313      	orrs	r3, r2
 8007d78:	b21a      	sxth	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	839a      	strh	r2, [r3, #28]
 8007d7e:	7efb      	ldrb	r3, [r7, #27]
 8007d80:	021b      	lsls	r3, r3, #8
 8007d82:	b21a      	sxth	r2, r3
 8007d84:	7ebb      	ldrb	r3, [r7, #26]
 8007d86:	b21b      	sxth	r3, r3
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	b21a      	sxth	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	83da      	strh	r2, [r3, #30]
 8007d90:	7f7b      	ldrb	r3, [r7, #29]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	b21a      	sxth	r2, r3
 8007d96:	7f3b      	ldrb	r3, [r7, #28]
 8007d98:	b21b      	sxth	r3, r3
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	b21a      	sxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	841a      	strh	r2, [r3, #32]
 8007da2:	7ffb      	ldrb	r3, [r7, #31]
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	b21a      	sxth	r2, r3
 8007da8:	7fbb      	ldrb	r3, [r7, #30]
 8007daa:	b21b      	sxth	r3, r3
 8007dac:	4313      	orrs	r3, r2
 8007dae:	b21a      	sxth	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	845a      	strh	r2, [r3, #34]	; 0x22
 8007db4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	b21a      	sxth	r2, r3
 8007dbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007dc0:	b21b      	sxth	r3, r3
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	b21a      	sxth	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	849a      	strh	r2, [r3, #36]	; 0x24
 8007dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	b21a      	sxth	r2, r3
 8007dd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007dd6:	b21b      	sxth	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	b21a      	sxth	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	84da      	strh	r2, [r3, #38]	; 0x26
 8007de0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007de4:	4618      	mov	r0, r3
 8007de6:	3728      	adds	r7, #40	; 0x28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <conf_sensor>:
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	73fb      	strb	r3, [r7, #15]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	753b      	strb	r3, [r7, #20]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	757b      	strb	r3, [r7, #21]
 8007e02:	4b56      	ldr	r3, [pc, #344]	; (8007f5c <conf_sensor+0x170>)
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	823b      	strh	r3, [r7, #16]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff ff07 	bl	8007c1c <null_ptr_check>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]
 8007e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f040 8095 	bne.w	8007f46 <conf_sensor+0x15a>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 8091 	beq.w	8007f46 <conf_sensor+0x15a>
 8007e24:	f107 0114 	add.w	r1, r7, #20
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	20f4      	movs	r0, #244	; 0xf4
 8007e2e:	f7ff fbb3 	bl	8007598 <bmp280_get_regs>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]
 8007e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 8086 	bne.w	8007f4c <conf_sensor+0x160>
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fc4e 	bl	80076e2 <bmp280_soft_reset>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]
 8007e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d17c      	bne.n	8007f4c <conf_sensor+0x160>
 8007e52:	7d3b      	ldrb	r3, [r7, #20]
 8007e54:	b25b      	sxtb	r3, r3
 8007e56:	f003 031f 	and.w	r3, r3, #31
 8007e5a:	b25a      	sxtb	r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	015b      	lsls	r3, r3, #5
 8007e62:	b25b      	sxtb	r3, r3
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	753b      	strb	r3, [r7, #20]
 8007e6c:	7d3b      	ldrb	r3, [r7, #20]
 8007e6e:	b25b      	sxtb	r3, r3
 8007e70:	f023 031c 	bic.w	r3, r3, #28
 8007e74:	b25a      	sxtb	r2, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	b25b      	sxtb	r3, r3
 8007e7e:	f003 031c 	and.w	r3, r3, #28
 8007e82:	b25b      	sxtb	r3, r3
 8007e84:	4313      	orrs	r3, r2
 8007e86:	b25b      	sxtb	r3, r3
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	753b      	strb	r3, [r7, #20]
 8007e8c:	7d7b      	ldrb	r3, [r7, #21]
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	b25a      	sxtb	r2, r3
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	789b      	ldrb	r3, [r3, #2]
 8007e9a:	015b      	lsls	r3, r3, #5
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	b25b      	sxtb	r3, r3
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	757b      	strb	r3, [r7, #21]
 8007ea6:	7d7b      	ldrb	r3, [r7, #21]
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	f023 031c 	bic.w	r3, r3, #28
 8007eae:	b25a      	sxtb	r2, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	78db      	ldrb	r3, [r3, #3]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	b25b      	sxtb	r3, r3
 8007eb8:	f003 031c 	and.w	r3, r3, #28
 8007ebc:	b25b      	sxtb	r3, r3
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	b25b      	sxtb	r3, r3
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	757b      	strb	r3, [r7, #21]
 8007ec6:	7d7b      	ldrb	r3, [r7, #21]
 8007ec8:	b25b      	sxtb	r3, r3
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	b25a      	sxtb	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	b25b      	sxtb	r3, r3
 8007edc:	4313      	orrs	r3, r2
 8007ede:	b25b      	sxtb	r3, r3
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	757b      	strb	r3, [r7, #21]
 8007ee4:	f107 0114 	add.w	r1, r7, #20
 8007ee8:	f107 0010 	add.w	r0, r7, #16
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f7ff fb89 	bl	8007606 <bmp280_set_regs>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	75fb      	strb	r3, [r7, #23]
 8007ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d125      	bne.n	8007f4c <conf_sensor+0x160>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	332c      	adds	r3, #44	; 0x2c
 8007f06:	6810      	ldr	r0, [r2, #0]
 8007f08:	6018      	str	r0, [r3, #0]
 8007f0a:	7912      	ldrb	r2, [r2, #4]
 8007f0c:	711a      	strb	r2, [r3, #4]
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01b      	beq.n	8007f4c <conf_sensor+0x160>
 8007f14:	7d3b      	ldrb	r3, [r7, #20]
 8007f16:	b25b      	sxtb	r3, r3
 8007f18:	f023 0303 	bic.w	r3, r3, #3
 8007f1c:	b25a      	sxtb	r2, r3
 8007f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	753b      	strb	r3, [r7, #20]
 8007f30:	f107 0114 	add.w	r1, r7, #20
 8007f34:	f107 0010 	add.w	r0, r7, #16
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f7ff fb63 	bl	8007606 <bmp280_set_regs>
 8007f40:	4603      	mov	r3, r0
 8007f42:	75fb      	strb	r3, [r7, #23]
 8007f44:	e002      	b.n	8007f4c <conf_sensor+0x160>
 8007f46:	23ff      	movs	r3, #255	; 0xff
 8007f48:	75fb      	strb	r3, [r7, #23]
 8007f4a:	e000      	b.n	8007f4e <conf_sensor+0x162>
 8007f4c:	bf00      	nop
 8007f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	0800d080 	.word	0x0800d080

08007f60 <st_check_boundaries>:
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dd03      	ble.n	8007f7c <st_check_boundaries+0x1c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <st_check_boundaries+0x6c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	dd09      	ble.n	8007f90 <st_check_boundaries+0x30>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd03      	ble.n	8007f8a <st_check_boundaries+0x2a>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <st_check_boundaries+0x6c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	dd02      	ble.n	8007f90 <st_check_boundaries+0x30>
 8007f8a:	23f4      	movs	r3, #244	; 0xf4
 8007f8c:	73fb      	strb	r3, [r7, #15]
 8007f8e:	e015      	b.n	8007fbc <st_check_boundaries+0x5c>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dd03      	ble.n	8007f9e <st_check_boundaries+0x3e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a0c      	ldr	r2, [pc, #48]	; (8007fcc <st_check_boundaries+0x6c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	dd02      	ble.n	8007fa4 <st_check_boundaries+0x44>
 8007f9e:	23f6      	movs	r3, #246	; 0xf6
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	e00b      	b.n	8007fbc <st_check_boundaries+0x5c>
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	dd03      	ble.n	8007fb2 <st_check_boundaries+0x52>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	4a07      	ldr	r2, [pc, #28]	; (8007fcc <st_check_boundaries+0x6c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	dd02      	ble.n	8007fb8 <st_check_boundaries+0x58>
 8007fb2:	23f5      	movs	r3, #245	; 0xf5
 8007fb4:	73fb      	strb	r3, [r7, #15]
 8007fb6:	e001      	b.n	8007fbc <st_check_boundaries+0x5c>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
 8007fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	000fffef 	.word	0x000fffef

08007fd0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8007fd6:	4b17      	ldr	r3, [pc, #92]	; (8008034 <MX_ETH_Init+0x64>)
 8007fd8:	4a17      	ldr	r2, [pc, #92]	; (8008038 <MX_ETH_Init+0x68>)
 8007fda:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007fdc:	4b15      	ldr	r3, [pc, #84]	; (8008034 <MX_ETH_Init+0x64>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007fe2:	4b14      	ldr	r3, [pc, #80]	; (8008034 <MX_ETH_Init+0x64>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8007fec:	2380      	movs	r3, #128	; 0x80
 8007fee:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8007ff0:	23e1      	movs	r3, #225	; 0xe1
 8007ff2:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8008000:	4a0c      	ldr	r2, [pc, #48]	; (8008034 <MX_ETH_Init+0x64>)
 8008002:	463b      	mov	r3, r7
 8008004:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <MX_ETH_Init+0x64>)
 8008008:	2200      	movs	r2, #0
 800800a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <MX_ETH_Init+0x64>)
 800800e:	2200      	movs	r2, #0
 8008010:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008012:	4b08      	ldr	r3, [pc, #32]	; (8008034 <MX_ETH_Init+0x64>)
 8008014:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008018:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800801a:	4806      	ldr	r0, [pc, #24]	; (8008034 <MX_ETH_Init+0x64>)
 800801c:	f7f9 f9be 	bl	800139c <HAL_ETH_Init>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 8008026:	f001 f803 	bl	8009030 <Error_Handler>
  }

}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000214 	.word	0x20000214
 8008038:	40028000 	.word	0x40028000

0800803c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08e      	sub	sp, #56	; 0x38
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	605a      	str	r2, [r3, #4]
 800804e:	609a      	str	r2, [r3, #8]
 8008050:	60da      	str	r2, [r3, #12]
 8008052:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a4e      	ldr	r2, [pc, #312]	; (8008194 <HAL_ETH_MspInit+0x158>)
 800805a:	4293      	cmp	r3, r2
 800805c:	f040 8096 	bne.w	800818c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008060:	4b4d      	ldr	r3, [pc, #308]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	4a4c      	ldr	r2, [pc, #304]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 8008066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800806a:	6313      	str	r3, [r2, #48]	; 0x30
 800806c:	4b4a      	ldr	r3, [pc, #296]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008074:	623b      	str	r3, [r7, #32]
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	4b47      	ldr	r3, [pc, #284]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 800807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807c:	4a46      	ldr	r2, [pc, #280]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 800807e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008082:	6313      	str	r3, [r2, #48]	; 0x30
 8008084:	4b44      	ldr	r3, [pc, #272]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 8008086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008088:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800808c:	61fb      	str	r3, [r7, #28]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4b41      	ldr	r3, [pc, #260]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	4a40      	ldr	r2, [pc, #256]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 8008096:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800809a:	6313      	str	r3, [r2, #48]	; 0x30
 800809c:	4b3e      	ldr	r3, [pc, #248]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 800809e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080a8:	4b3b      	ldr	r3, [pc, #236]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	4a3a      	ldr	r2, [pc, #232]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080ae:	f043 0304 	orr.w	r3, r3, #4
 80080b2:	6313      	str	r3, [r2, #48]	; 0x30
 80080b4:	4b38      	ldr	r3, [pc, #224]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c0:	4b35      	ldr	r3, [pc, #212]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	4a34      	ldr	r2, [pc, #208]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	6313      	str	r3, [r2, #48]	; 0x30
 80080cc:	4b32      	ldr	r3, [pc, #200]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080d8:	4b2f      	ldr	r3, [pc, #188]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080dc:	4a2e      	ldr	r2, [pc, #184]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080de:	f043 0302 	orr.w	r3, r3, #2
 80080e2:	6313      	str	r3, [r2, #48]	; 0x30
 80080e4:	4b2c      	ldr	r3, [pc, #176]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80080f0:	4b29      	ldr	r3, [pc, #164]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	4a28      	ldr	r2, [pc, #160]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080fa:	6313      	str	r3, [r2, #48]	; 0x30
 80080fc:	4b26      	ldr	r3, [pc, #152]	; (8008198 <HAL_ETH_MspInit+0x15c>)
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008104:	60bb      	str	r3, [r7, #8]
 8008106:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008108:	2332      	movs	r3, #50	; 0x32
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810c:	2302      	movs	r3, #2
 800810e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008110:	2300      	movs	r3, #0
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008114:	2303      	movs	r3, #3
 8008116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008118:	230b      	movs	r3, #11
 800811a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800811c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008120:	4619      	mov	r1, r3
 8008122:	481e      	ldr	r0, [pc, #120]	; (800819c <HAL_ETH_MspInit+0x160>)
 8008124:	f7f9 fda6 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008128:	2386      	movs	r3, #134	; 0x86
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800812c:	2302      	movs	r3, #2
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008130:	2300      	movs	r3, #0
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008134:	2303      	movs	r3, #3
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008138:	230b      	movs	r3, #11
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800813c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008140:	4619      	mov	r1, r3
 8008142:	4817      	ldr	r0, [pc, #92]	; (80081a0 <HAL_ETH_MspInit+0x164>)
 8008144:	f7f9 fd96 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800814e:	2302      	movs	r3, #2
 8008150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008152:	2300      	movs	r3, #0
 8008154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008156:	2303      	movs	r3, #3
 8008158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800815a:	230b      	movs	r3, #11
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800815e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008162:	4619      	mov	r1, r3
 8008164:	480f      	ldr	r0, [pc, #60]	; (80081a4 <HAL_ETH_MspInit+0x168>)
 8008166:	f7f9 fd85 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800816a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008170:	2302      	movs	r3, #2
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008174:	2300      	movs	r3, #0
 8008176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008178:	2303      	movs	r3, #3
 800817a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800817c:	230b      	movs	r3, #11
 800817e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008184:	4619      	mov	r1, r3
 8008186:	4808      	ldr	r0, [pc, #32]	; (80081a8 <HAL_ETH_MspInit+0x16c>)
 8008188:	f7f9 fd74 	bl	8001c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800818c:	bf00      	nop
 800818e:	3738      	adds	r7, #56	; 0x38
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	40028000 	.word	0x40028000
 8008198:	40023800 	.word	0x40023800
 800819c:	40020800 	.word	0x40020800
 80081a0:	40020000 	.word	0x40020000
 80081a4:	40020400 	.word	0x40020400
 80081a8:	40021800 	.word	0x40021800

080081ac <spi_reg_read>:
#include "funkcje_pom.h"



int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr , uint8_t *reg_data , uint16_t length)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b094      	sub	sp, #80	; 0x50
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	603a      	str	r2, [r7, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	71fb      	strb	r3, [r7, #7]
 80081ba:	460b      	mov	r3, r1
 80081bc:	71bb      	strb	r3, [r7, #6]
 80081be:	4613      	mov	r3, r2
 80081c0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  int32_t iError = BMP280_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[SPI_BUFFER_LEN] = {0,};
 80081cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	609a      	str	r2, [r3, #8]
 80081d8:	60da      	str	r2, [r3, #12]
 80081da:	611a      	str	r2, [r3, #16]
 80081dc:	615a      	str	r2, [r3, #20]
 80081de:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[SPI_BUFFER_LEN] = {0,};
 80081e0:	f107 0308 	add.w	r3, r7, #8
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	609a      	str	r2, [r3, #8]
 80081ec:	60da      	str	r2, [r3, #12]
 80081ee:	611a      	str	r2, [r3, #16]
 80081f0:	615a      	str	r2, [r3, #20]
 80081f2:	619a      	str	r2, [r3, #24]
  uint8_t stringpos;
 txarray[0] = reg_addr;
 80081f4:	79bb      	ldrb	r3, [r7, #6]
 80081f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_RESET );
 80081fa:	2200      	movs	r2, #0
 80081fc:	2110      	movs	r1, #16
 80081fe:	4824      	ldr	r0, [pc, #144]	; (8008290 <spi_reg_read+0xe4>)
 8008200:	f7f9 fee2 	bl	8001fc8 <HAL_GPIO_WritePin>
 status = HAL_SPI_TransmitReceive( &hspi4 , (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+1, 5);
 8008204:	88bb      	ldrh	r3, [r7, #4]
 8008206:	3301      	adds	r3, #1
 8008208:	b298      	uxth	r0, r3
 800820a:	f107 0208 	add.w	r2, r7, #8
 800820e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008212:	2305      	movs	r3, #5
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4603      	mov	r3, r0
 8008218:	481e      	ldr	r0, [pc, #120]	; (8008294 <spi_reg_read+0xe8>)
 800821a:	f7fc fb09 	bl	8004830 <HAL_SPI_TransmitReceive>
 800821e:	4603      	mov	r3, r0
 8008220:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 while( hspi4.State == HAL_SPI_STATE_BUSY ) {};
 8008224:	bf00      	nop
 8008226:	4b1b      	ldr	r3, [pc, #108]	; (8008294 <spi_reg_read+0xe8>)
 8008228:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d0f9      	beq.n	8008226 <spi_reg_read+0x7a>
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_SET );
 8008232:	2201      	movs	r2, #1
 8008234:	2110      	movs	r1, #16
 8008236:	4816      	ldr	r0, [pc, #88]	; (8008290 <spi_reg_read+0xe4>)
 8008238:	f7f9 fec6 	bl	8001fc8 <HAL_GPIO_WritePin>
 for (stringpos = 0; stringpos < length; stringpos++)
 800823c:	2300      	movs	r3, #0
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008242:	e011      	b.n	8008268 <spi_reg_read+0xbc>
 {
	 *(reg_data + stringpos) = rxarray[stringpos + BMP280_DATA_INDEX];
 8008244:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	440b      	add	r3, r1
 8008252:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8008256:	440a      	add	r2, r1
 8008258:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 800825c:	701a      	strb	r2, [r3, #0]
 for (stringpos = 0; stringpos < length; stringpos++)
 800825e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008262:	3301      	adds	r3, #1
 8008264:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008268:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800826c:	b29b      	uxth	r3, r3
 800826e:	88ba      	ldrh	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d8e7      	bhi.n	8008244 <spi_reg_read+0x98>
 }
 if (status != HAL_OK)
 8008274:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <spi_reg_read+0xd6>
 {
	 iError = (-1);
 800827c:	f04f 33ff 	mov.w	r3, #4294967295
 8008280:	647b      	str	r3, [r7, #68]	; 0x44
 }
 return (int8_t)iError;
 8008282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008284:	b25b      	sxtb	r3, r3
}
 8008286:	4618      	mov	r0, r3
 8008288:	3748      	adds	r7, #72	; 0x48
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40021000 	.word	0x40021000
 8008294:	2000038c 	.word	0x2000038c

08008298 <spi_reg_write>:
int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr , uint8_t *reg_data , uint16_t length)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b092      	sub	sp, #72	; 0x48
 800829c:	af00      	add	r7, sp, #0
 800829e:	603a      	str	r2, [r7, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
 80082a6:	460b      	mov	r3, r1
 80082a8:	71bb      	strb	r3, [r7, #6]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80bb      	strh	r3, [r7, #4]
HAL_StatusTypeDef status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
int32_t iError = BMP280_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	643b      	str	r3, [r7, #64]	; 0x40
uint8_t txarray[SPI_BUFFER_LEN * BMP280_ADDRESS_INDEX];
uint8_t stringpos;
txarray[0] = reg_addr;
 80082b8:	79bb      	ldrb	r3, [r7, #6]
 80082ba:	723b      	strb	r3, [r7, #8]
for (stringpos = 0; stringpos < length; stringpos++)
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80082c2:	e011      	b.n	80082e8 <spi_reg_write+0x50>
{
	txarray[stringpos+BMP280_DATA_INDEX] = reg_data[stringpos];
 80082c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	441a      	add	r2, r3
 80082cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80082d0:	3301      	adds	r3, #1
 80082d2:	7812      	ldrb	r2, [r2, #0]
 80082d4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80082d8:	440b      	add	r3, r1
 80082da:	f803 2c40 	strb.w	r2, [r3, #-64]
for (stringpos = 0; stringpos < length; stringpos++)
 80082de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80082e2:	3301      	adds	r3, #1
 80082e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80082e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	88ba      	ldrh	r2, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d8e7      	bhi.n	80082c4 <spi_reg_write+0x2c>
}
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_RESET );
 80082f4:	2200      	movs	r2, #0
 80082f6:	2110      	movs	r1, #16
 80082f8:	4814      	ldr	r0, [pc, #80]	; (800834c <spi_reg_write+0xb4>)
 80082fa:	f7f9 fe65 	bl	8001fc8 <HAL_GPIO_WritePin>
 status = HAL_SPI_Transmit( &hspi4 , (uint8_t*)(&txarray), length*2, 100);
 80082fe:	88bb      	ldrh	r3, [r7, #4]
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	f107 0108 	add.w	r1, r7, #8
 8008308:	2364      	movs	r3, #100	; 0x64
 800830a:	4811      	ldr	r0, [pc, #68]	; (8008350 <spi_reg_write+0xb8>)
 800830c:	f7fc f92a 	bl	8004564 <HAL_SPI_Transmit>
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 while( hspi4.State == HAL_SPI_STATE_BUSY ) {};
 8008316:	bf00      	nop
 8008318:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <spi_reg_write+0xb8>)
 800831a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d0f9      	beq.n	8008318 <spi_reg_write+0x80>
 HAL_GPIO_WritePin( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_SET );
 8008324:	2201      	movs	r2, #1
 8008326:	2110      	movs	r1, #16
 8008328:	4808      	ldr	r0, [pc, #32]	; (800834c <spi_reg_write+0xb4>)
 800832a:	f7f9 fe4d 	bl	8001fc8 <HAL_GPIO_WritePin>
if (status != HAL_OK)
 800832e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <spi_reg_write+0xaa>
{  iError = (-1);
 8008336:	f04f 33ff 	mov.w	r3, #4294967295
 800833a:	643b      	str	r3, [r7, #64]	; 0x40
return (int8_t)iError;
 800833c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833e:	b25b      	sxtb	r3, r3
 8008340:	e7ff      	b.n	8008342 <spi_reg_write+0xaa>
}

}
 8008342:	4618      	mov	r0, r3
 8008344:	3748      	adds	r7, #72	; 0x48
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40021000 	.word	0x40021000
 8008350:	2000038c 	.word	0x2000038c

08008354 <LCD>:
* \param[in] in Set temperature value
* \param[in] out Current temperature value
*/

void LCD(float in, double out)  
{          in = floor(10*in)/10;					/**< Sets floats precision */
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b089      	sub	sp, #36	; 0x24
 8008358:	af00      	add	r7, sp, #0
 800835a:	ed87 0a03 	vstr	s0, [r7, #12]
 800835e:	ed87 1b00 	vstr	d1, [r7]
 8008362:	edd7 7a03 	vldr	s15, [r7, #12]
 8008366:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800836a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800836e:	ee17 0a90 	vmov	r0, s15
 8008372:	f7f8 f909 	bl	8000588 <__aeabi_f2d>
 8008376:	4603      	mov	r3, r0
 8008378:	460c      	mov	r4, r1
 800837a:	ec44 3b10 	vmov	d0, r3, r4
 800837e:	f004 fdef 	bl	800cf60 <floor>
 8008382:	ec51 0b10 	vmov	r0, r1, d0
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	4b36      	ldr	r3, [pc, #216]	; (8008464 <LCD+0x110>)
 800838c:	f7f8 fa7e 	bl	800088c <__aeabi_ddiv>
 8008390:	4603      	mov	r3, r0
 8008392:	460c      	mov	r4, r1
 8008394:	4618      	mov	r0, r3
 8008396:	4621      	mov	r1, r4
 8008398:	f7f8 fc46 	bl	8000c28 <__aeabi_d2f>
 800839c:	4603      	mov	r3, r0
 800839e:	60fb      	str	r3, [r7, #12]
		   out = floor(100*out)/100;				/**< Sets floats precision */
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	4b30      	ldr	r3, [pc, #192]	; (8008468 <LCD+0x114>)
 80083a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083aa:	f7f8 f945 	bl	8000638 <__aeabi_dmul>
 80083ae:	4603      	mov	r3, r0
 80083b0:	460c      	mov	r4, r1
 80083b2:	ec44 3b17 	vmov	d7, r3, r4
 80083b6:	eeb0 0a47 	vmov.f32	s0, s14
 80083ba:	eef0 0a67 	vmov.f32	s1, s15
 80083be:	f004 fdcf 	bl	800cf60 <floor>
 80083c2:	ec51 0b10 	vmov	r0, r1, d0
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	4b27      	ldr	r3, [pc, #156]	; (8008468 <LCD+0x114>)
 80083cc:	f7f8 fa5e 	bl	800088c <__aeabi_ddiv>
 80083d0:	4603      	mov	r3, r0
 80083d2:	460c      	mov	r4, r1
 80083d4:	e9c7 3400 	strd	r3, r4, [r7]
		  char msg_lcd[16];							/**< Creates char buffer, size determined by LCD size */
		  lcd_clear();								/**< Clears display */
 80083d8:	f000 fab4 	bl	8008944 <lcd_clear>
		  lcd_put_cur(0, 0);						/**< Sets message starting point on LCD - column 1, row 1 */
 80083dc:	2100      	movs	r1, #0
 80083de:	2000      	movs	r0, #0
 80083e0:	f000 fac6 	bl	8008970 <lcd_put_cur>
		  if(in > 50)								/**< Checks if set value is within the operating range */
 80083e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80083e8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800846c <LCD+0x118>
 80083ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f4:	dd03      	ble.n	80083fe <LCD+0xaa>
		  {
			  lcd_send_string("Out of range!");
 80083f6:	481e      	ldr	r0, [pc, #120]	; (8008470 <LCD+0x11c>)
 80083f8:	f000 fb15 	bl	8008a26 <lcd_send_string>
		  lcd_send_string(msg_lcd);					/**< Sends message to LCD */
		  lcd_put_cur(1, 0);						/**< Sets cursor to column 1, row 2 */ 
		  sprintf(&msg_lcd, "TEMP: %.2f ", out);	/**< Assigns current value message to buffer */
		  lcd_send_string(msg_lcd);					/**< Sends message to LCD*/
		  }
}
 80083fc:	e02d      	b.n	800845a <LCD+0x106>
		  else if(in < 21)
 80083fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8008402:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8008406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800840a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840e:	d503      	bpl.n	8008418 <LCD+0xc4>
			  lcd_send_string("Out of range!");
 8008410:	4817      	ldr	r0, [pc, #92]	; (8008470 <LCD+0x11c>)
 8008412:	f000 fb08 	bl	8008a26 <lcd_send_string>
}
 8008416:	e020      	b.n	800845a <LCD+0x106>
		  sprintf(&msg_lcd, "SET: %.1f ", in);		/**< Assigns set value message to buffer */
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7f8 f8b5 	bl	8000588 <__aeabi_f2d>
 800841e:	4603      	mov	r3, r0
 8008420:	460c      	mov	r4, r1
 8008422:	f107 0010 	add.w	r0, r7, #16
 8008426:	461a      	mov	r2, r3
 8008428:	4623      	mov	r3, r4
 800842a:	4912      	ldr	r1, [pc, #72]	; (8008474 <LCD+0x120>)
 800842c:	f001 ff32 	bl	800a294 <siprintf>
		  lcd_send_string(msg_lcd);					/**< Sends message to LCD */
 8008430:	f107 0310 	add.w	r3, r7, #16
 8008434:	4618      	mov	r0, r3
 8008436:	f000 faf6 	bl	8008a26 <lcd_send_string>
		  lcd_put_cur(1, 0);						/**< Sets cursor to column 1, row 2 */ 
 800843a:	2100      	movs	r1, #0
 800843c:	2001      	movs	r0, #1
 800843e:	f000 fa97 	bl	8008970 <lcd_put_cur>
		  sprintf(&msg_lcd, "TEMP: %.2f ", out);	/**< Assigns current value message to buffer */
 8008442:	f107 0010 	add.w	r0, r7, #16
 8008446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844a:	490b      	ldr	r1, [pc, #44]	; (8008478 <LCD+0x124>)
 800844c:	f001 ff22 	bl	800a294 <siprintf>
		  lcd_send_string(msg_lcd);					/**< Sends message to LCD*/
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fae6 	bl	8008a26 <lcd_send_string>
}
 800845a:	bf00      	nop
 800845c:	3724      	adds	r7, #36	; 0x24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd90      	pop	{r4, r7, pc}
 8008462:	bf00      	nop
 8008464:	40240000 	.word	0x40240000
 8008468:	40590000 	.word	0x40590000
 800846c:	42480000 	.word	0x42480000
 8008470:	0800d084 	.word	0x0800d084
 8008474:	0800d094 	.word	0x0800d094
 8008478:	0800d0a0 	.word	0x0800d0a0

0800847c <read>:
* Function reads data and returns it as floating point value
* \return temp Current temperature value
*/

float read()
{
 800847c:	b598      	push	{r3, r4, r7, lr}
 800847e:	af00      	add	r7, sp, #0
				 /** Reading the raw data from sensor */
		         rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8008480:	4915      	ldr	r1, [pc, #84]	; (80084d8 <read+0x5c>)
 8008482:	4816      	ldr	r0, [pc, #88]	; (80084dc <read+0x60>)
 8008484:	f7ff fa38 	bl	80078f8 <bmp280_get_uncomp_data>
 8008488:	4603      	mov	r3, r0
 800848a:	461a      	mov	r2, r3
 800848c:	4b14      	ldr	r3, [pc, #80]	; (80084e0 <read+0x64>)
 800848e:	701a      	strb	r2, [r3, #0]

		         /** Getting the 32 bit compensated temperature */
		         rslt = bmp280_get_comp_temp_32bit(&temp32, ucomp_data.uncomp_temp, &bmp);
 8008490:	4b12      	ldr	r3, [pc, #72]	; (80084dc <read+0x60>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a10      	ldr	r2, [pc, #64]	; (80084d8 <read+0x5c>)
 8008496:	4619      	mov	r1, r3
 8008498:	4812      	ldr	r0, [pc, #72]	; (80084e4 <read+0x68>)
 800849a:	f7ff fa7c 	bl	8007996 <bmp280_get_comp_temp_32bit>
 800849e:	4603      	mov	r3, r0
 80084a0:	461a      	mov	r2, r3
 80084a2:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <read+0x64>)
 80084a4:	701a      	strb	r2, [r3, #0]

		         /** Getting the compensated temperature as floating point value */
		         rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp);
 80084a6:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <read+0x60>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a0b      	ldr	r2, [pc, #44]	; (80084d8 <read+0x5c>)
 80084ac:	4619      	mov	r1, r3
 80084ae:	480e      	ldr	r0, [pc, #56]	; (80084e8 <read+0x6c>)
 80084b0:	f7ff fadc 	bl	8007a6c <bmp280_get_comp_temp_double>
 80084b4:	4603      	mov	r3, r0
 80084b6:	461a      	mov	r2, r3
 80084b8:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <read+0x64>)
 80084ba:	701a      	strb	r2, [r3, #0]

	return temp;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <read+0x6c>)
 80084be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084c2:	4618      	mov	r0, r3
 80084c4:	4621      	mov	r1, r4
 80084c6:	f7f8 fbaf 	bl	8000c28 <__aeabi_d2f>
 80084ca:	4603      	mov	r3, r0
 80084cc:	ee07 3a90 	vmov	s15, r3
}
 80084d0:	eeb0 0a67 	vmov.f32	s0, s15
 80084d4:	bd98      	pop	{r3, r4, r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000268 	.word	0x20000268
 80084dc:	20000324 	.word	0x20000324
 80084e0:	2000029c 	.word	0x2000029c
 80084e4:	20000330 	.word	0x20000330
 80084e8:	200002c8 	.word	0x200002c8

080084ec <pid1>:
* \param[in] msg Set value
* \param[in] temp Current value
*/

void pid1(float msg, double temp)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b089      	sub	sp, #36	; 0x24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80084f6:	ed87 1b00 	vstr	d1, [r7]
							/** Calculate error */
		                    pid_error = msg-temp;
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7f8 f844 	bl	8000588 <__aeabi_f2d>
 8008500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008504:	f7f7 fee0 	bl	80002c8 <__aeabi_dsub>
 8008508:	4603      	mov	r3, r0
 800850a:	460c      	mov	r4, r1
 800850c:	4618      	mov	r0, r3
 800850e:	4621      	mov	r1, r4
 8008510:	f7f8 fb8a 	bl	8000c28 <__aeabi_d2f>
 8008514:	4602      	mov	r2, r0
 8008516:	4b2f      	ldr	r3, [pc, #188]	; (80085d4 <pid1+0xe8>)
 8008518:	601a      	str	r2, [r3, #0]


		                    /** Calculate PID here, argument is error */
		                    /** Output data will be returned, we will use it as duty cycle parameter */
		                    duty = arm_pid_f32(&PID, pid_error);
 800851a:	4b2e      	ldr	r3, [pc, #184]	; (80085d4 <pid1+0xe8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a2e      	ldr	r2, [pc, #184]	; (80085d8 <pid1+0xec>)
 8008520:	61fa      	str	r2, [r7, #28]
 8008522:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	ed93 7a00 	vldr	s14, [r3]
 800852a:	edd7 7a06 	vldr	s15, [r7, #24]
 800852e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	edd3 6a01 	vldr	s13, [r3, #4]
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	edd3 7a03 	vldr	s15, [r3, #12]
 800853e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8008542:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	edd3 6a02 	vldr	s13, [r3, #8]
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8008560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008564:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	4a17      	ldr	r2, [pc, #92]	; (80085dc <pid1+0xf0>)
 8008580:	6013      	str	r3, [r2, #0]

		                    /** Check overflow, duty cycle in percent */
		                   	  if (duty > 1000) {
 8008582:	4b16      	ldr	r3, [pc, #88]	; (80085dc <pid1+0xf0>)
 8008584:	edd3 7a00 	vldr	s15, [r3]
 8008588:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80085e0 <pid1+0xf4>
 800858c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008594:	dd03      	ble.n	800859e <pid1+0xb2>
		                   	     duty = 1000;
 8008596:	4b11      	ldr	r3, [pc, #68]	; (80085dc <pid1+0xf0>)
 8008598:	4a12      	ldr	r2, [pc, #72]	; (80085e4 <pid1+0xf8>)
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	e00b      	b.n	80085b6 <pid1+0xca>
		                   	  } else if (duty < 0) {
 800859e:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <pid1+0xf0>)
 80085a0:	edd3 7a00 	vldr	s15, [r3]
 80085a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ac:	d503      	bpl.n	80085b6 <pid1+0xca>
		                   	    duty = 0;
 80085ae:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <pid1+0xf0>)
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
		                   	  }
							
		                   	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <pid1+0xf0>)
 80085b8:	edd3 7a00 	vldr	s15, [r3]
 80085bc:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <pid1+0xfc>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085c4:	ee17 2a90 	vmov	r2, s15
 80085c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80085ca:	bf00      	nop
 80085cc:	3724      	adds	r7, #36	; 0x24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd90      	pop	{r4, r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200002d4 	.word	0x200002d4
 80085d8:	200002a0 	.word	0x200002a0
 80085dc:	20000338 	.word	0x20000338
 80085e0:	447a0000 	.word	0x447a0000
 80085e4:	447a0000 	.word	0x447a0000
 80085e8:	20000430 	.word	0x20000430

080085ec <pid2>:
* \param[in] msg Set value
* \param[in] temp Current value
*/

void pid2(float msg, double temp)
{
 80085ec:	b590      	push	{r4, r7, lr}
 80085ee:	b089      	sub	sp, #36	; 0x24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80085f6:	ed87 1b00 	vstr	d1, [r7]
							/** Calculate error */

		                    pid_error2 = temp-msg;
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7f7 ffc4 	bl	8000588 <__aeabi_f2d>
 8008600:	4603      	mov	r3, r0
 8008602:	460c      	mov	r4, r1
 8008604:	461a      	mov	r2, r3
 8008606:	4623      	mov	r3, r4
 8008608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800860c:	f7f7 fe5c 	bl	80002c8 <__aeabi_dsub>
 8008610:	4603      	mov	r3, r0
 8008612:	460c      	mov	r4, r1
 8008614:	4618      	mov	r0, r3
 8008616:	4621      	mov	r1, r4
 8008618:	f7f8 fb06 	bl	8000c28 <__aeabi_d2f>
 800861c:	4602      	mov	r2, r0
 800861e:	4b30      	ldr	r3, [pc, #192]	; (80086e0 <pid2+0xf4>)
 8008620:	601a      	str	r2, [r3, #0]

		                    /** Calculate PID here, argument is error */
		                    /** Output data will be returned, we will use it as duty cycle parameter */
		                    duty2 = arm_pid_f32(&PID2, pid_error2);
 8008622:	4b2f      	ldr	r3, [pc, #188]	; (80086e0 <pid2+0xf4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a2f      	ldr	r2, [pc, #188]	; (80086e4 <pid2+0xf8>)
 8008628:	61fa      	str	r2, [r7, #28]
 800862a:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	ed93 7a00 	vldr	s14, [r3]
 8008632:	edd7 7a06 	vldr	s15, [r7, #24]
 8008636:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	edd3 7a03 	vldr	s15, [r3, #12]
 8008646:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800864a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	edd3 6a02 	vldr	s13, [r3, #8]
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	edd3 7a04 	vldr	s15, [r3, #16]
 800865a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800865e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8008668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800866c:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	615a      	str	r2, [r3, #20]
    return (out);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <pid2+0xfc>)
 8008688:	6013      	str	r3, [r2, #0]

		                    if (duty2 > 1000) {
 800868a:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <pid2+0xfc>)
 800868c:	edd3 7a00 	vldr	s15, [r3]
 8008690:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80086ec <pid2+0x100>
 8008694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869c:	dd03      	ble.n	80086a6 <pid2+0xba>
		                   	  duty2 = 1000;
 800869e:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <pid2+0xfc>)
 80086a0:	4a13      	ldr	r2, [pc, #76]	; (80086f0 <pid2+0x104>)
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e00d      	b.n	80086c2 <pid2+0xd6>
		                   	} else if (duty2 < 120) {
 80086a6:	4b10      	ldr	r3, [pc, #64]	; (80086e8 <pid2+0xfc>)
 80086a8:	edd3 7a00 	vldr	s15, [r3]
 80086ac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80086f4 <pid2+0x108>
 80086b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b8:	d503      	bpl.n	80086c2 <pid2+0xd6>
		                   	   duty2 = 0;
 80086ba:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <pid2+0xfc>)
 80086bc:	f04f 0200 	mov.w	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
		                   	}

		                    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, duty2);
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <pid2+0xfc>)
 80086c4:	edd3 7a00 	vldr	s15, [r3]
 80086c8:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <pid2+0x10c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086d0:	ee17 2a90 	vmov	r2, s15
 80086d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80086d6:	bf00      	nop
 80086d8:	3724      	adds	r7, #36	; 0x24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd90      	pop	{r4, r7, pc}
 80086de:	bf00      	nop
 80086e0:	200002d0 	.word	0x200002d0
 80086e4:	200002d8 	.word	0x200002d8
 80086e8:	20000334 	.word	0x20000334
 80086ec:	447a0000 	.word	0x447a0000
 80086f0:	447a0000 	.word	0x447a0000
 80086f4:	42f00000 	.word	0x42f00000
 80086f8:	200003f0 	.word	0x200003f0

080086fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08c      	sub	sp, #48	; 0x30
 8008700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008702:	f107 031c 	add.w	r3, r7, #28
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	605a      	str	r2, [r3, #4]
 800870c:	609a      	str	r2, [r3, #8]
 800870e:	60da      	str	r2, [r3, #12]
 8008710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008712:	4b56      	ldr	r3, [pc, #344]	; (800886c <MX_GPIO_Init+0x170>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	4a55      	ldr	r2, [pc, #340]	; (800886c <MX_GPIO_Init+0x170>)
 8008718:	f043 0310 	orr.w	r3, r3, #16
 800871c:	6313      	str	r3, [r2, #48]	; 0x30
 800871e:	4b53      	ldr	r3, [pc, #332]	; (800886c <MX_GPIO_Init+0x170>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	61bb      	str	r3, [r7, #24]
 8008728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800872a:	4b50      	ldr	r3, [pc, #320]	; (800886c <MX_GPIO_Init+0x170>)
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	4a4f      	ldr	r2, [pc, #316]	; (800886c <MX_GPIO_Init+0x170>)
 8008730:	f043 0304 	orr.w	r3, r3, #4
 8008734:	6313      	str	r3, [r2, #48]	; 0x30
 8008736:	4b4d      	ldr	r3, [pc, #308]	; (800886c <MX_GPIO_Init+0x170>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008742:	4b4a      	ldr	r3, [pc, #296]	; (800886c <MX_GPIO_Init+0x170>)
 8008744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008746:	4a49      	ldr	r2, [pc, #292]	; (800886c <MX_GPIO_Init+0x170>)
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	6313      	str	r3, [r2, #48]	; 0x30
 800874e:	4b47      	ldr	r3, [pc, #284]	; (800886c <MX_GPIO_Init+0x170>)
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008756:	613b      	str	r3, [r7, #16]
 8008758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800875a:	4b44      	ldr	r3, [pc, #272]	; (800886c <MX_GPIO_Init+0x170>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	4a43      	ldr	r2, [pc, #268]	; (800886c <MX_GPIO_Init+0x170>)
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	6313      	str	r3, [r2, #48]	; 0x30
 8008766:	4b41      	ldr	r3, [pc, #260]	; (800886c <MX_GPIO_Init+0x170>)
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008772:	4b3e      	ldr	r3, [pc, #248]	; (800886c <MX_GPIO_Init+0x170>)
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	4a3d      	ldr	r2, [pc, #244]	; (800886c <MX_GPIO_Init+0x170>)
 8008778:	f043 0302 	orr.w	r3, r3, #2
 800877c:	6313      	str	r3, [r2, #48]	; 0x30
 800877e:	4b3b      	ldr	r3, [pc, #236]	; (800886c <MX_GPIO_Init+0x170>)
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800878a:	4b38      	ldr	r3, [pc, #224]	; (800886c <MX_GPIO_Init+0x170>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	4a37      	ldr	r2, [pc, #220]	; (800886c <MX_GPIO_Init+0x170>)
 8008790:	f043 0308 	orr.w	r3, r3, #8
 8008794:	6313      	str	r3, [r2, #48]	; 0x30
 8008796:	4b35      	ldr	r3, [pc, #212]	; (800886c <MX_GPIO_Init+0x170>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80087a2:	4b32      	ldr	r3, [pc, #200]	; (800886c <MX_GPIO_Init+0x170>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	4a31      	ldr	r2, [pc, #196]	; (800886c <MX_GPIO_Init+0x170>)
 80087a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ac:	6313      	str	r3, [r2, #48]	; 0x30
 80087ae:	4b2f      	ldr	r3, [pc, #188]	; (800886c <MX_GPIO_Init+0x170>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80087ba:	2200      	movs	r2, #0
 80087bc:	2110      	movs	r1, #16
 80087be:	482c      	ldr	r0, [pc, #176]	; (8008870 <MX_GPIO_Init+0x174>)
 80087c0:	f7f9 fc02 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80087c4:	2200      	movs	r2, #0
 80087c6:	f244 0181 	movw	r1, #16513	; 0x4081
 80087ca:	482a      	ldr	r0, [pc, #168]	; (8008874 <MX_GPIO_Init+0x178>)
 80087cc:	f7f9 fbfc 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80087d0:	2200      	movs	r2, #0
 80087d2:	2140      	movs	r1, #64	; 0x40
 80087d4:	4828      	ldr	r0, [pc, #160]	; (8008878 <MX_GPIO_Init+0x17c>)
 80087d6:	f7f9 fbf7 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80087da:	2310      	movs	r3, #16
 80087dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087de:	2301      	movs	r3, #1
 80087e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087e6:	2300      	movs	r3, #0
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80087ea:	f107 031c 	add.w	r3, r7, #28
 80087ee:	4619      	mov	r1, r3
 80087f0:	481f      	ldr	r0, [pc, #124]	; (8008870 <MX_GPIO_Init+0x174>)
 80087f2:	f7f9 fa3f 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80087f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80087fc:	4b1f      	ldr	r3, [pc, #124]	; (800887c <MX_GPIO_Init+0x180>)
 80087fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008800:	2300      	movs	r3, #0
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008804:	f107 031c 	add.w	r3, r7, #28
 8008808:	4619      	mov	r1, r3
 800880a:	481d      	ldr	r0, [pc, #116]	; (8008880 <MX_GPIO_Init+0x184>)
 800880c:	f7f9 fa32 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8008810:	f244 0381 	movw	r3, #16513	; 0x4081
 8008814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008816:	2301      	movs	r3, #1
 8008818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800881a:	2300      	movs	r3, #0
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800881e:	2300      	movs	r3, #0
 8008820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008822:	f107 031c 	add.w	r3, r7, #28
 8008826:	4619      	mov	r1, r3
 8008828:	4812      	ldr	r0, [pc, #72]	; (8008874 <MX_GPIO_Init+0x178>)
 800882a:	f7f9 fa23 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008832:	2301      	movs	r3, #1
 8008834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008836:	2300      	movs	r3, #0
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800883a:	2300      	movs	r3, #0
 800883c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800883e:	f107 031c 	add.w	r3, r7, #28
 8008842:	4619      	mov	r1, r3
 8008844:	480c      	ldr	r0, [pc, #48]	; (8008878 <MX_GPIO_Init+0x17c>)
 8008846:	f7f9 fa15 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800884a:	2380      	movs	r3, #128	; 0x80
 800884c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800884e:	2300      	movs	r3, #0
 8008850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008852:	2300      	movs	r3, #0
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008856:	f107 031c 	add.w	r3, r7, #28
 800885a:	4619      	mov	r1, r3
 800885c:	4806      	ldr	r0, [pc, #24]	; (8008878 <MX_GPIO_Init+0x17c>)
 800885e:	f7f9 fa09 	bl	8001c74 <HAL_GPIO_Init>

}
 8008862:	bf00      	nop
 8008864:	3730      	adds	r7, #48	; 0x30
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40023800 	.word	0x40023800
 8008870:	40021000 	.word	0x40021000
 8008874:	40020400 	.word	0x40020400
 8008878:	40021800 	.word	0x40021800
 800887c:	10110000 	.word	0x10110000
 8008880:	40020800 	.word	0x40020800

08008884 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af02      	add	r7, sp, #8
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	f023 030f 	bic.w	r3, r3, #15
 8008894:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	f043 030c 	orr.w	r3, r3, #12
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	f043 0308 	orr.w	r3, r3, #8
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	f043 030c 	orr.w	r3, r3, #12
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	f043 0308 	orr.w	r3, r3, #8
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80088c4:	f107 0208 	add.w	r2, r7, #8
 80088c8:	2364      	movs	r3, #100	; 0x64
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2304      	movs	r3, #4
 80088ce:	214e      	movs	r1, #78	; 0x4e
 80088d0:	4803      	ldr	r0, [pc, #12]	; (80088e0 <lcd_send_cmd+0x5c>)
 80088d2:	f7f9 fc23 	bl	800211c <HAL_I2C_Master_Transmit>
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	2000033c 	.word	0x2000033c

080088e4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	4603      	mov	r3, r0
 80088ec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	f023 030f 	bic.w	r3, r3, #15
 80088f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	f043 030d 	orr.w	r3, r3, #13
 8008902:	b2db      	uxtb	r3, r3
 8008904:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	f043 0309 	orr.w	r3, r3, #9
 800890c:	b2db      	uxtb	r3, r3
 800890e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	f043 030d 	orr.w	r3, r3, #13
 8008916:	b2db      	uxtb	r3, r3
 8008918:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	f043 0309 	orr.w	r3, r3, #9
 8008920:	b2db      	uxtb	r3, r3
 8008922:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008924:	f107 0208 	add.w	r2, r7, #8
 8008928:	2364      	movs	r3, #100	; 0x64
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	2304      	movs	r3, #4
 800892e:	214e      	movs	r1, #78	; 0x4e
 8008930:	4803      	ldr	r0, [pc, #12]	; (8008940 <lcd_send_data+0x5c>)
 8008932:	f7f9 fbf3 	bl	800211c <HAL_I2C_Master_Transmit>
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	2000033c 	.word	0x2000033c

08008944 <lcd_clear>:

void lcd_clear (void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800894a:	2080      	movs	r0, #128	; 0x80
 800894c:	f7ff ff9a 	bl	8008884 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8008950:	2300      	movs	r3, #0
 8008952:	607b      	str	r3, [r7, #4]
 8008954:	e005      	b.n	8008962 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8008956:	2020      	movs	r0, #32
 8008958:	f7ff ffc4 	bl	80088e4 <lcd_send_data>
	for (int i=0; i<70; i++)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3301      	adds	r3, #1
 8008960:	607b      	str	r3, [r7, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b45      	cmp	r3, #69	; 0x45
 8008966:	ddf6      	ble.n	8008956 <lcd_clear+0x12>
	}
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
    switch (row)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <lcd_put_cur+0x16>
 8008980:	2b01      	cmp	r3, #1
 8008982:	d005      	beq.n	8008990 <lcd_put_cur+0x20>
 8008984:	e009      	b.n	800899a <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898c:	603b      	str	r3, [r7, #0]
            break;
 800898e:	e004      	b.n	800899a <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008996:	603b      	str	r3, [r7, #0]
            break;
 8008998:	bf00      	nop
    }

    lcd_send_cmd (col);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff ff70 	bl	8008884 <lcd_send_cmd>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <lcd_init>:


void lcd_init (void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80089b0:	2032      	movs	r0, #50	; 0x32
 80089b2:	f7f8 fb9d 	bl	80010f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80089b6:	2030      	movs	r0, #48	; 0x30
 80089b8:	f7ff ff64 	bl	8008884 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80089bc:	2005      	movs	r0, #5
 80089be:	f7f8 fb97 	bl	80010f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80089c2:	2030      	movs	r0, #48	; 0x30
 80089c4:	f7ff ff5e 	bl	8008884 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80089c8:	2001      	movs	r0, #1
 80089ca:	f7f8 fb91 	bl	80010f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80089ce:	2030      	movs	r0, #48	; 0x30
 80089d0:	f7ff ff58 	bl	8008884 <lcd_send_cmd>
	HAL_Delay(10);
 80089d4:	200a      	movs	r0, #10
 80089d6:	f7f8 fb8b 	bl	80010f0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80089da:	2020      	movs	r0, #32
 80089dc:	f7ff ff52 	bl	8008884 <lcd_send_cmd>
	HAL_Delay(10);
 80089e0:	200a      	movs	r0, #10
 80089e2:	f7f8 fb85 	bl	80010f0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80089e6:	2028      	movs	r0, #40	; 0x28
 80089e8:	f7ff ff4c 	bl	8008884 <lcd_send_cmd>
	HAL_Delay(1);
 80089ec:	2001      	movs	r0, #1
 80089ee:	f7f8 fb7f 	bl	80010f0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80089f2:	2008      	movs	r0, #8
 80089f4:	f7ff ff46 	bl	8008884 <lcd_send_cmd>
	HAL_Delay(1);
 80089f8:	2001      	movs	r0, #1
 80089fa:	f7f8 fb79 	bl	80010f0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80089fe:	2001      	movs	r0, #1
 8008a00:	f7ff ff40 	bl	8008884 <lcd_send_cmd>
	HAL_Delay(1);
 8008a04:	2001      	movs	r0, #1
 8008a06:	f7f8 fb73 	bl	80010f0 <HAL_Delay>
	HAL_Delay(1);
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	f7f8 fb70 	bl	80010f0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8008a10:	2006      	movs	r0, #6
 8008a12:	f7ff ff37 	bl	8008884 <lcd_send_cmd>
	HAL_Delay(1);
 8008a16:	2001      	movs	r0, #1
 8008a18:	f7f8 fb6a 	bl	80010f0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8008a1c:	200c      	movs	r0, #12
 8008a1e:	f7ff ff31 	bl	8008884 <lcd_send_cmd>
}
 8008a22:	bf00      	nop
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8008a2e:	e006      	b.n	8008a3e <lcd_send_string+0x18>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	607a      	str	r2, [r7, #4]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff ff53 	bl	80088e4 <lcd_send_data>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1f4      	bne.n	8008a30 <lcd_send_string+0xa>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008a54:	4b1b      	ldr	r3, [pc, #108]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a56:	4a1c      	ldr	r2, [pc, #112]	; (8008ac8 <MX_I2C1_Init+0x78>)
 8008a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8008a5a:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a5c:	4a1b      	ldr	r2, [pc, #108]	; (8008acc <MX_I2C1_Init+0x7c>)
 8008a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008a60:	4b18      	ldr	r3, [pc, #96]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a66:	4b17      	ldr	r3, [pc, #92]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a6c:	4b15      	ldr	r3, [pc, #84]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008a72:	4b14      	ldr	r3, [pc, #80]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008a78:	4b12      	ldr	r3, [pc, #72]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a7e:	4b11      	ldr	r3, [pc, #68]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a84:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a8a:	480e      	ldr	r0, [pc, #56]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a8c:	f7f9 fab6 	bl	8001ffc <HAL_I2C_Init>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008a96:	f000 facb 	bl	8009030 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4809      	ldr	r0, [pc, #36]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008a9e:	f7fa fa9a 	bl	8002fd6 <HAL_I2CEx_ConfigAnalogFilter>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008aa8:	f000 fac2 	bl	8009030 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008aac:	2100      	movs	r1, #0
 8008aae:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <MX_I2C1_Init+0x74>)
 8008ab0:	f7fa fadc 	bl	800306c <HAL_I2CEx_ConfigDigitalFilter>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008aba:	f000 fab9 	bl	8009030 <Error_Handler>
  }

}
 8008abe:	bf00      	nop
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	2000033c 	.word	0x2000033c
 8008ac8:	40005400 	.word	0x40005400
 8008acc:	00808cd2 	.word	0x00808cd2

08008ad0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08a      	sub	sp, #40	; 0x28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ad8:	f107 0314 	add.w	r3, r7, #20
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	609a      	str	r2, [r3, #8]
 8008ae4:	60da      	str	r2, [r3, #12]
 8008ae6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1f      	ldr	r2, [pc, #124]	; (8008b6c <HAL_I2C_MspInit+0x9c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d138      	bne.n	8008b64 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008af2:	4b1f      	ldr	r3, [pc, #124]	; (8008b70 <HAL_I2C_MspInit+0xa0>)
 8008af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af6:	4a1e      	ldr	r2, [pc, #120]	; (8008b70 <HAL_I2C_MspInit+0xa0>)
 8008af8:	f043 0302 	orr.w	r3, r3, #2
 8008afc:	6313      	str	r3, [r2, #48]	; 0x30
 8008afe:	4b1c      	ldr	r3, [pc, #112]	; (8008b70 <HAL_I2C_MspInit+0xa0>)
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	613b      	str	r3, [r7, #16]
 8008b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8008b0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b10:	2312      	movs	r3, #18
 8008b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b14:	2301      	movs	r3, #1
 8008b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b20:	f107 0314 	add.w	r3, r7, #20
 8008b24:	4619      	mov	r1, r3
 8008b26:	4813      	ldr	r0, [pc, #76]	; (8008b74 <HAL_I2C_MspInit+0xa4>)
 8008b28:	f7f9 f8a4 	bl	8001c74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <HAL_I2C_MspInit+0xa0>)
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b30:	4a0f      	ldr	r2, [pc, #60]	; (8008b70 <HAL_I2C_MspInit+0xa0>)
 8008b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b36:	6413      	str	r3, [r2, #64]	; 0x40
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <HAL_I2C_MspInit+0xa0>)
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8008b44:	2200      	movs	r2, #0
 8008b46:	2100      	movs	r1, #0
 8008b48:	201f      	movs	r0, #31
 8008b4a:	f7f8 fbce 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8008b4e:	201f      	movs	r0, #31
 8008b50:	f7f8 fbe7 	bl	8001322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	2020      	movs	r0, #32
 8008b5a:	f7f8 fbc6 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8008b5e:	2020      	movs	r0, #32
 8008b60:	f7f8 fbdf 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008b64:	bf00      	nop
 8008b66:	3728      	adds	r7, #40	; 0x28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40005400 	.word	0x40005400
 8008b70:	40023800 	.word	0x40023800
 8008b74:	40020400 	.word	0x40020400

08008b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008b78:	b5b0      	push	{r4, r5, r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	/** Set PID parameters */
	 
	   PID.Kp = PID_PARAM_KP;        /*!< Proportional */
 8008b7c:	4b66      	ldr	r3, [pc, #408]	; (8008d18 <main+0x1a0>)
 8008b7e:	4a67      	ldr	r2, [pc, #412]	; (8008d1c <main+0x1a4>)
 8008b80:	619a      	str	r2, [r3, #24]
	   PID.Ki = PID_PARAM_KI;        /*!< Integral */
 8008b82:	4b65      	ldr	r3, [pc, #404]	; (8008d18 <main+0x1a0>)
 8008b84:	4a66      	ldr	r2, [pc, #408]	; (8008d20 <main+0x1a8>)
 8008b86:	61da      	str	r2, [r3, #28]
	   PID.Kd = PID_PARAM_KD;        /*!< Derivative */
 8008b88:	4b63      	ldr	r3, [pc, #396]	; (8008d18 <main+0x1a0>)
 8008b8a:	4a66      	ldr	r2, [pc, #408]	; (8008d24 <main+0x1ac>)
 8008b8c:	621a      	str	r2, [r3, #32]

    /** Set PID2 parameters */

	   PID2.Kp = PID_PARAM_KP;        /*!< Proportional */
 8008b8e:	4b66      	ldr	r3, [pc, #408]	; (8008d28 <main+0x1b0>)
 8008b90:	4a62      	ldr	r2, [pc, #392]	; (8008d1c <main+0x1a4>)
 8008b92:	619a      	str	r2, [r3, #24]
	   PID2.Ki = PID_PARAM_KI;        /*!< Integral */
 8008b94:	4b64      	ldr	r3, [pc, #400]	; (8008d28 <main+0x1b0>)
 8008b96:	4a62      	ldr	r2, [pc, #392]	; (8008d20 <main+0x1a8>)
 8008b98:	61da      	str	r2, [r3, #28]
	   PID2.Kd = PID_PARAM_KD;        /*!< Derivative */
 8008b9a:	4b63      	ldr	r3, [pc, #396]	; (8008d28 <main+0x1b0>)
 8008b9c:	4a61      	ldr	r2, [pc, #388]	; (8008d24 <main+0x1ac>)
 8008b9e:	621a      	str	r2, [r3, #32]

	/** Initialize PID systems, float32_t format */

	 	  arm_pid_init_f32(&PID, 1);
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	485d      	ldr	r0, [pc, #372]	; (8008d18 <main+0x1a0>)
 8008ba4:	f7f8 fa10 	bl	8000fc8 <arm_pid_init_f32>
	 	  arm_pid_init_f32(&PID2, 1);
 8008ba8:	2101      	movs	r1, #1
 8008baa:	485f      	ldr	r0, [pc, #380]	; (8008d28 <main+0x1b0>)
 8008bac:	f7f8 fa0c 	bl	8000fc8 <arm_pid_init_f32>
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  
  /** Initialize SysTick Timer */
  HAL_Init();
 8008bb0:	f7f8 fa40 	bl	8001034 <HAL_Init>
 // print_rslt(" bmp280_set_power_mode status", rslt);///////////////////////////

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008bb4:	f000 f8d8 	bl	8008d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008bb8:	f7ff fda0 	bl	80086fc <MX_GPIO_Init>
  MX_ETH_Init();
 8008bbc:	f7ff fa08 	bl	8007fd0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8008bc0:	f000 fda8 	bl	8009714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8008bc4:	f000 fe22 	bl	800980c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8008bc8:	f000 fa3a 	bl	8009040 <MX_SPI4_Init>
  MX_I2C1_Init();
 8008bcc:	f7ff ff40 	bl	8008a50 <MX_I2C1_Init>
  MX_TIM2_Init();
 8008bd0:	f000 fbb0 	bl	8009334 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008bd4:	f000 fbfc 	bl	80093d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008bd8:	f000 fc72 	bl	80094c0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /** Initialize LCD */
  lcd_init();
 8008bdc:	f7ff fee6 	bl	80089ac <lcd_init>

 
   bmp.delay_ms = HAL_Delay;
 8008be0:	4b52      	ldr	r3, [pc, #328]	; (8008d2c <main+0x1b4>)
 8008be2:	4a53      	ldr	r2, [pc, #332]	; (8008d30 <main+0x1b8>)
 8008be4:	60da      	str	r2, [r3, #12]
   bmp.dev_id = 0;
 8008be6:	4b51      	ldr	r3, [pc, #324]	; (8008d2c <main+0x1b4>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	705a      	strb	r2, [r3, #1]
   bmp.intf = BMP280_SPI_INTF;
 8008bec:	4b4f      	ldr	r3, [pc, #316]	; (8008d2c <main+0x1b4>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	709a      	strb	r2, [r3, #2]
   bmp.read = spi_reg_read;
 8008bf2:	4b4e      	ldr	r3, [pc, #312]	; (8008d2c <main+0x1b4>)
 8008bf4:	4a4f      	ldr	r2, [pc, #316]	; (8008d34 <main+0x1bc>)
 8008bf6:	605a      	str	r2, [r3, #4]
   bmp.write = spi_reg_write;
 8008bf8:	4b4c      	ldr	r3, [pc, #304]	; (8008d2c <main+0x1b4>)
 8008bfa:	4a4f      	ldr	r2, [pc, #316]	; (8008d38 <main+0x1c0>)
 8008bfc:	609a      	str	r2, [r3, #8]


   rslt = bmp280_init(&bmp);
 8008bfe:	484b      	ldr	r0, [pc, #300]	; (8008d2c <main+0x1b4>)
 8008c00:	f7fe fd94 	bl	800772c <bmp280_init>
 8008c04:	4603      	mov	r3, r0
 8008c06:	461a      	mov	r2, r3
 8008c08:	4b4c      	ldr	r3, [pc, #304]	; (8008d3c <main+0x1c4>)
 8008c0a:	701a      	strb	r2, [r3, #0]

   /* Always read the current settings before writing, especially when
   * all the configuration is not modified
   */
   rslt = bmp280_get_config(&conf, &bmp);
 8008c0c:	4947      	ldr	r1, [pc, #284]	; (8008d2c <main+0x1b4>)
 8008c0e:	484c      	ldr	r0, [pc, #304]	; (8008d40 <main+0x1c8>)
 8008c10:	f7fe fdf2 	bl	80077f8 <bmp280_get_config>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	4b48      	ldr	r3, [pc, #288]	; (8008d3c <main+0x1c4>)
 8008c1a:	701a      	strb	r2, [r3, #0]

   /* Configuring the temperature oversampling, filter coefficient and output data rate */
   /* Overwrite the desired settings */
   conf.filter = BMP280_FILTER_COEFF_2;
 8008c1c:	4b48      	ldr	r3, [pc, #288]	; (8008d40 <main+0x1c8>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	70da      	strb	r2, [r3, #3]

   /* Temperature oversampling set at 4x */
   conf.os_temp = BMP280_OS_4X;
 8008c22:	4b47      	ldr	r3, [pc, #284]	; (8008d40 <main+0x1c8>)
 8008c24:	2203      	movs	r2, #3
 8008c26:	701a      	strb	r2, [r3, #0]

   /* Pressure over sampling none (disabling pressure measurement) */
   conf.os_pres = BMP280_OS_NONE;
 8008c28:	4b45      	ldr	r3, [pc, #276]	; (8008d40 <main+0x1c8>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	705a      	strb	r2, [r3, #1]

   /* Setting the output data rate as 1HZ(1000ms) */
   conf.odr = BMP280_ODR_1000_MS;
 8008c2e:	4b44      	ldr	r3, [pc, #272]	; (8008d40 <main+0x1c8>)
 8008c30:	2205      	movs	r2, #5
 8008c32:	709a      	strb	r2, [r3, #2]
   rslt = bmp280_set_config(&conf, &bmp);
 8008c34:	493d      	ldr	r1, [pc, #244]	; (8008d2c <main+0x1b4>)
 8008c36:	4842      	ldr	r0, [pc, #264]	; (8008d40 <main+0x1c8>)
 8008c38:	f7fe fe30 	bl	800789c <bmp280_set_config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4b3e      	ldr	r3, [pc, #248]	; (8008d3c <main+0x1c4>)
 8008c42:	701a      	strb	r2, [r3, #0]

   /* Always set the power mode after setting the configuration */
   rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 8008c44:	4939      	ldr	r1, [pc, #228]	; (8008d2c <main+0x1b4>)
 8008c46:	2003      	movs	r0, #3
 8008c48:	f7fe fe37 	bl	80078ba <bmp280_set_power_mode>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4b3a      	ldr	r3, [pc, #232]	; (8008d3c <main+0x1c4>)
 8008c52:	701a      	strb	r2, [r3, #0]

   /** Start UART data receiving */
   HAL_UART_Receive_IT(&huart3, msg_in,4);
 8008c54:	2204      	movs	r2, #4
 8008c56:	493b      	ldr	r1, [pc, #236]	; (8008d44 <main+0x1cc>)
 8008c58:	483b      	ldr	r0, [pc, #236]	; (8008d48 <main+0x1d0>)
 8008c5a:	f7fd fae3 	bl	8006224 <HAL_UART_Receive_IT>

   /** Initialize PWMs */
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8008c5e:	2100      	movs	r1, #0
 8008c60:	483a      	ldr	r0, [pc, #232]	; (8008d4c <main+0x1d4>)
 8008c62:	f7fc fa95 	bl	8005190 <HAL_TIM_PWM_Start>

   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008c66:	2100      	movs	r1, #0
 8008c68:	4839      	ldr	r0, [pc, #228]	; (8008d50 <main+0x1d8>)
 8008c6a:	f7fc fa91 	bl	8005190 <HAL_TIM_PWM_Start>

   //HAL_TIM_Base_Start_IT(&htim2); ///////////////////////////////////////////////////////////////////

   /** Start UART data transmit */
   size = sprintf(buffer, "Podaj temperature \r\n");
 8008c6e:	4a39      	ldr	r2, [pc, #228]	; (8008d54 <main+0x1dc>)
 8008c70:	4b39      	ldr	r3, [pc, #228]	; (8008d58 <main+0x1e0>)
 8008c72:	4615      	mov	r5, r2
 8008c74:	461c      	mov	r4, r3
 8008c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c78:	6028      	str	r0, [r5, #0]
 8008c7a:	6069      	str	r1, [r5, #4]
 8008c7c:	60aa      	str	r2, [r5, #8]
 8008c7e:	60eb      	str	r3, [r5, #12]
 8008c80:	6820      	ldr	r0, [r4, #0]
 8008c82:	6128      	str	r0, [r5, #16]
 8008c84:	7923      	ldrb	r3, [r4, #4]
 8008c86:	752b      	strb	r3, [r5, #20]
 8008c88:	2314      	movs	r3, #20
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	4b33      	ldr	r3, [pc, #204]	; (8008d5c <main+0x1e4>)
 8008c8e:	701a      	strb	r2, [r3, #0]
   HAL_UART_Transmit_IT(&huart3, buffer, size);
 8008c90:	4b32      	ldr	r3, [pc, #200]	; (8008d5c <main+0x1e4>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	461a      	mov	r2, r3
 8008c98:	492e      	ldr	r1, [pc, #184]	; (8008d54 <main+0x1dc>)
 8008c9a:	482b      	ldr	r0, [pc, #172]	; (8008d48 <main+0x1d0>)
 8008c9c:	f7fd fa66 	bl	800616c <HAL_UART_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
                /** Read temperature from sensor */
	  	  	  	  temp=read();
 8008ca0:	f7ff fbec 	bl	800847c <read>
 8008ca4:	ee10 3a10 	vmov	r3, s0
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7f7 fc6d 	bl	8000588 <__aeabi_f2d>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	4a2b      	ldr	r2, [pc, #172]	; (8008d60 <main+0x1e8>)
 8008cb4:	e9c2 3400 	strd	r3, r4, [r2]

                /** Send temperature values to calculate PWM duties */
	              pid1(msg,temp);
 8008cb8:	4b2a      	ldr	r3, [pc, #168]	; (8008d64 <main+0x1ec>)
 8008cba:	edd3 6a00 	vldr	s13, [r3]
 8008cbe:	4b28      	ldr	r3, [pc, #160]	; (8008d60 <main+0x1e8>)
 8008cc0:	ed93 7b00 	vldr	d7, [r3]
 8008cc4:	eeb0 1a47 	vmov.f32	s2, s14
 8008cc8:	eef0 1a67 	vmov.f32	s3, s15
 8008ccc:	eeb0 0a66 	vmov.f32	s0, s13
 8008cd0:	f7ff fc0c 	bl	80084ec <pid1>
	              pid2(msg,temp);
 8008cd4:	4b23      	ldr	r3, [pc, #140]	; (8008d64 <main+0x1ec>)
 8008cd6:	edd3 6a00 	vldr	s13, [r3]
 8008cda:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <main+0x1e8>)
 8008cdc:	ed93 7b00 	vldr	d7, [r3]
 8008ce0:	eeb0 1a47 	vmov.f32	s2, s14
 8008ce4:	eef0 1a67 	vmov.f32	s3, s15
 8008ce8:	eeb0 0a66 	vmov.f32	s0, s13
 8008cec:	f7ff fc7e 	bl	80085ec <pid2>
               
	             // send_uart_float(temp);/////////////////////////////////////////////////
	              LCD(msg, temp);
 8008cf0:	4b1c      	ldr	r3, [pc, #112]	; (8008d64 <main+0x1ec>)
 8008cf2:	edd3 6a00 	vldr	s13, [r3]
 8008cf6:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <main+0x1e8>)
 8008cf8:	ed93 7b00 	vldr	d7, [r3]
 8008cfc:	eeb0 1a47 	vmov.f32	s2, s14
 8008d00:	eef0 1a67 	vmov.f32	s3, s15
 8008d04:	eeb0 0a66 	vmov.f32	s0, s13
 8008d08:	f7ff fb24 	bl	8008354 <LCD>

	         /** Sleep time between measurements = BMP280_ODR_1000_MS */
	         bmp.delay_ms(300);
 8008d0c:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <main+0x1b4>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d14:	4798      	blx	r3
	  	  	  	  temp=read();
 8008d16:	e7c3      	b.n	8008ca0 <main+0x128>
 8008d18:	200002a0 	.word	0x200002a0
 8008d1c:	44160000 	.word	0x44160000
 8008d20:	4039999a 	.word	0x4039999a
 8008d24:	42a00000 	.word	0x42a00000
 8008d28:	200002d8 	.word	0x200002d8
 8008d2c:	20000268 	.word	0x20000268
 8008d30:	080010f1 	.word	0x080010f1
 8008d34:	080081ad 	.word	0x080081ad
 8008d38:	08008299 	.word	0x08008299
 8008d3c:	2000029c 	.word	0x2000029c
 8008d40:	20000260 	.word	0x20000260
 8008d44:	20000388 	.word	0x20000388
 8008d48:	200004b0 	.word	0x200004b0
 8008d4c:	20000430 	.word	0x20000430
 8008d50:	200003f0 	.word	0x200003f0
 8008d54:	200002fc 	.word	0x200002fc
 8008d58:	0800d0ac 	.word	0x0800d0ac
 8008d5c:	2000032c 	.word	0x2000032c
 8008d60:	200002c8 	.word	0x200002c8
 8008d64:	200001fc 	.word	0x200001fc

08008d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b0b4      	sub	sp, #208	; 0xd0
 8008d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008d72:	2230      	movs	r2, #48	; 0x30
 8008d74:	2100      	movs	r1, #0
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fe28 	bl	80099cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	609a      	str	r2, [r3, #8]
 8008d88:	60da      	str	r2, [r3, #12]
 8008d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008d8c:	f107 0308 	add.w	r3, r7, #8
 8008d90:	2284      	movs	r2, #132	; 0x84
 8008d92:	2100      	movs	r1, #0
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 fe19 	bl	80099cc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8008d9a:	f7fa faef 	bl	800337c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d9e:	4b38      	ldr	r3, [pc, #224]	; (8008e80 <SystemClock_Config+0x118>)
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	4a37      	ldr	r2, [pc, #220]	; (8008e80 <SystemClock_Config+0x118>)
 8008da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008da8:	6413      	str	r3, [r2, #64]	; 0x40
 8008daa:	4b35      	ldr	r3, [pc, #212]	; (8008e80 <SystemClock_Config+0x118>)
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008db2:	607b      	str	r3, [r7, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008db6:	4b33      	ldr	r3, [pc, #204]	; (8008e84 <SystemClock_Config+0x11c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008dbe:	4a31      	ldr	r2, [pc, #196]	; (8008e84 <SystemClock_Config+0x11c>)
 8008dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	4b2f      	ldr	r3, [pc, #188]	; (8008e84 <SystemClock_Config+0x11c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008dd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008de0:	2302      	movs	r3, #2
 8008de2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008dee:	2304      	movs	r3, #4
 8008df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8008df4:	2348      	movs	r3, #72	; 0x48
 8008df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8008e00:	2303      	movs	r3, #3
 8008e02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fa fac6 	bl	800339c <HAL_RCC_OscConfig>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8008e16:	f000 f90b 	bl	8009030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e1a:	230f      	movs	r3, #15
 8008e1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e20:	2302      	movs	r3, #2
 8008e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008e26:	2300      	movs	r3, #0
 8008e28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008e3a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008e3e:	2102      	movs	r1, #2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fa fd1b 	bl	800387c <HAL_RCC_ClockConfig>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8008e4c:	f000 f8f0 	bl	8009030 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8008e50:	4b0d      	ldr	r3, [pc, #52]	; (8008e88 <SystemClock_Config+0x120>)
 8008e52:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008e54:	2300      	movs	r3, #0
 8008e56:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e62:	f107 0308 	add.w	r3, r7, #8
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fa fefc 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8008e72:	f000 f8dd 	bl	8009030 <Error_Handler>
  }
}
 8008e76:	bf00      	nop
 8008e78:	37d0      	adds	r7, #208	; 0xd0
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	40023800 	.word	0x40023800
 8008e84:	40007000 	.word	0x40007000
 8008e88:	00204100 	.word	0x00204100
 8008e8c:	00000000 	.word	0x00000000

08008e90 <HAL_UART_RxCpltCallback>:
* \param[in] huart3 is UART3 handler
*/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8008e90:	b590      	push	{r4, r7, lr}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
    /** Message convertion */
    msg = atof(msg_in); 
 8008e98:	485b      	ldr	r0, [pc, #364]	; (8009008 <HAL_UART_RxCpltCallback+0x178>)
 8008e9a:	f000 fd6a 	bl	8009972 <atof>
 8008e9e:	ec54 3b10 	vmov	r3, r4, d0
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	f7f7 febf 	bl	8000c28 <__aeabi_d2f>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	4b57      	ldr	r3, [pc, #348]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008eae:	601a      	str	r2, [r3, #0]
    msg = msg + 0.01;
 8008eb0:	4b56      	ldr	r3, [pc, #344]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7f7 fb67 	bl	8000588 <__aeabi_f2d>
 8008eba:	a351      	add	r3, pc, #324	; (adr r3, 8009000 <HAL_UART_RxCpltCallback+0x170>)
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f7f7 fa04 	bl	80002cc <__adddf3>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	4618      	mov	r0, r3
 8008eca:	4621      	mov	r1, r4
 8008ecc:	f7f7 feac 	bl	8000c28 <__aeabi_d2f>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	4b4e      	ldr	r3, [pc, #312]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008ed4:	601a      	str	r2, [r3, #0]
    msg = floor(10 * msg) / 10;
 8008ed6:	4b4d      	ldr	r3, [pc, #308]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008ed8:	edd3 7a00 	vldr	s15, [r3]
 8008edc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ee4:	ee17 0a90 	vmov	r0, s15
 8008ee8:	f7f7 fb4e 	bl	8000588 <__aeabi_f2d>
 8008eec:	4603      	mov	r3, r0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	ec44 3b10 	vmov	d0, r3, r4
 8008ef4:	f004 f834 	bl	800cf60 <floor>
 8008ef8:	ec51 0b10 	vmov	r0, r1, d0
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	4b43      	ldr	r3, [pc, #268]	; (8009010 <HAL_UART_RxCpltCallback+0x180>)
 8008f02:	f7f7 fcc3 	bl	800088c <__aeabi_ddiv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	f7f7 fe8b 	bl	8000c28 <__aeabi_d2f>
 8008f12:	4602      	mov	r2, r0
 8008f14:	4b3d      	ldr	r3, [pc, #244]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008f16:	601a      	str	r2, [r3, #0]

    /** Checks if set value is within the working range of controller */

    if (msg > 50) 
 8008f18:	4b3c      	ldr	r3, [pc, #240]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008f1a:	edd3 7a00 	vldr	s15, [r3]
 8008f1e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8009014 <HAL_UART_RxCpltCallback+0x184>
 8008f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2a:	dd1b      	ble.n	8008f64 <HAL_UART_RxCpltCallback+0xd4>
    {
        size = sprintf(buffer, "Out of range\r\n");
 8008f2c:	4a3a      	ldr	r2, [pc, #232]	; (8009018 <HAL_UART_RxCpltCallback+0x188>)
 8008f2e:	4b3b      	ldr	r3, [pc, #236]	; (800901c <HAL_UART_RxCpltCallback+0x18c>)
 8008f30:	4614      	mov	r4, r2
 8008f32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f34:	6020      	str	r0, [r4, #0]
 8008f36:	6061      	str	r1, [r4, #4]
 8008f38:	60a2      	str	r2, [r4, #8]
 8008f3a:	881a      	ldrh	r2, [r3, #0]
 8008f3c:	789b      	ldrb	r3, [r3, #2]
 8008f3e:	81a2      	strh	r2, [r4, #12]
 8008f40:	73a3      	strb	r3, [r4, #14]
 8008f42:	230e      	movs	r3, #14
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	4b36      	ldr	r3, [pc, #216]	; (8009020 <HAL_UART_RxCpltCallback+0x190>)
 8008f48:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart3, buffer, size);
 8008f4a:	4b35      	ldr	r3, [pc, #212]	; (8009020 <HAL_UART_RxCpltCallback+0x190>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	461a      	mov	r2, r3
 8008f52:	4931      	ldr	r1, [pc, #196]	; (8009018 <HAL_UART_RxCpltCallback+0x188>)
 8008f54:	4833      	ldr	r0, [pc, #204]	; (8009024 <HAL_UART_RxCpltCallback+0x194>)
 8008f56:	f7fd f909 	bl	800616c <HAL_UART_Transmit_IT>
        msg = msg_last;
 8008f5a:	4b33      	ldr	r3, [pc, #204]	; (8009028 <HAL_UART_RxCpltCallback+0x198>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a2b      	ldr	r2, [pc, #172]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	e042      	b.n	8008fea <HAL_UART_RxCpltCallback+0x15a>
    }
    else if (msg < 21)
 8008f64:	4b29      	ldr	r3, [pc, #164]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008f66:	edd3 7a00 	vldr	s15, [r3]
 8008f6a:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8008f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	d51b      	bpl.n	8008fb0 <HAL_UART_RxCpltCallback+0x120>
    {
        size = sprintf(buffer, "Out of range\r\n");
 8008f78:	4a27      	ldr	r2, [pc, #156]	; (8009018 <HAL_UART_RxCpltCallback+0x188>)
 8008f7a:	4b28      	ldr	r3, [pc, #160]	; (800901c <HAL_UART_RxCpltCallback+0x18c>)
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f80:	6020      	str	r0, [r4, #0]
 8008f82:	6061      	str	r1, [r4, #4]
 8008f84:	60a2      	str	r2, [r4, #8]
 8008f86:	881a      	ldrh	r2, [r3, #0]
 8008f88:	789b      	ldrb	r3, [r3, #2]
 8008f8a:	81a2      	strh	r2, [r4, #12]
 8008f8c:	73a3      	strb	r3, [r4, #14]
 8008f8e:	230e      	movs	r3, #14
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	4b23      	ldr	r3, [pc, #140]	; (8009020 <HAL_UART_RxCpltCallback+0x190>)
 8008f94:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart3, buffer, size);
 8008f96:	4b22      	ldr	r3, [pc, #136]	; (8009020 <HAL_UART_RxCpltCallback+0x190>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	491e      	ldr	r1, [pc, #120]	; (8009018 <HAL_UART_RxCpltCallback+0x188>)
 8008fa0:	4820      	ldr	r0, [pc, #128]	; (8009024 <HAL_UART_RxCpltCallback+0x194>)
 8008fa2:	f7fd f8e3 	bl	800616c <HAL_UART_Transmit_IT>
        msg = msg_last;
 8008fa6:	4b20      	ldr	r3, [pc, #128]	; (8009028 <HAL_UART_RxCpltCallback+0x198>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a18      	ldr	r2, [pc, #96]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	e01c      	b.n	8008fea <HAL_UART_RxCpltCallback+0x15a>
    }
    else
    {
        size = sprintf(buffer, "Podano nowa temperature!: %.1f \r\n", msg);
 8008fb0:	4b16      	ldr	r3, [pc, #88]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f7 fae7 	bl	8000588 <__aeabi_f2d>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	491a      	ldr	r1, [pc, #104]	; (800902c <HAL_UART_RxCpltCallback+0x19c>)
 8008fc4:	4814      	ldr	r0, [pc, #80]	; (8009018 <HAL_UART_RxCpltCallback+0x188>)
 8008fc6:	f001 f965 	bl	800a294 <siprintf>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	4b14      	ldr	r3, [pc, #80]	; (8009020 <HAL_UART_RxCpltCallback+0x190>)
 8008fd0:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart3, buffer, size);
 8008fd2:	4b13      	ldr	r3, [pc, #76]	; (8009020 <HAL_UART_RxCpltCallback+0x190>)
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	490f      	ldr	r1, [pc, #60]	; (8009018 <HAL_UART_RxCpltCallback+0x188>)
 8008fdc:	4811      	ldr	r0, [pc, #68]	; (8009024 <HAL_UART_RxCpltCallback+0x194>)
 8008fde:	f7fd f8c5 	bl	800616c <HAL_UART_Transmit_IT>
        msg_last = msg;
 8008fe2:	4b0a      	ldr	r3, [pc, #40]	; (800900c <HAL_UART_RxCpltCallback+0x17c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a10      	ldr	r2, [pc, #64]	; (8009028 <HAL_UART_RxCpltCallback+0x198>)
 8008fe8:	6013      	str	r3, [r2, #0]
    }


    HAL_UART_Receive_IT(&huart3, msg_in, 4);
 8008fea:	2204      	movs	r2, #4
 8008fec:	4906      	ldr	r1, [pc, #24]	; (8009008 <HAL_UART_RxCpltCallback+0x178>)
 8008fee:	480d      	ldr	r0, [pc, #52]	; (8009024 <HAL_UART_RxCpltCallback+0x194>)
 8008ff0:	f7fd f918 	bl	8006224 <HAL_UART_Receive_IT>


}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd90      	pop	{r4, r7, pc}
 8008ffc:	f3af 8000 	nop.w
 8009000:	47ae147b 	.word	0x47ae147b
 8009004:	3f847ae1 	.word	0x3f847ae1
 8009008:	20000388 	.word	0x20000388
 800900c:	200001fc 	.word	0x200001fc
 8009010:	40240000 	.word	0x40240000
 8009014:	42480000 	.word	0x42480000
 8009018:	200002fc 	.word	0x200002fc
 800901c:	0800d0c4 	.word	0x0800d0c4
 8009020:	2000032c 	.word	0x2000032c
 8009024:	200004b0 	.word	0x200004b0
 8009028:	20000200 	.word	0x20000200
 800902c:	0800d0d4 	.word	0x0800d0d4

08009030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009034:	bf00      	nop
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
	...

08009040 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8009044:	4b1b      	ldr	r3, [pc, #108]	; (80090b4 <MX_SPI4_Init+0x74>)
 8009046:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <MX_SPI4_Init+0x78>)
 8009048:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800904a:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <MX_SPI4_Init+0x74>)
 800904c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009050:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8009052:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <MX_SPI4_Init+0x74>)
 8009054:	2200      	movs	r2, #0
 8009056:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8009058:	4b16      	ldr	r3, [pc, #88]	; (80090b4 <MX_SPI4_Init+0x74>)
 800905a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800905e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009060:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <MX_SPI4_Init+0x74>)
 8009062:	2202      	movs	r2, #2
 8009064:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <MX_SPI4_Init+0x74>)
 8009068:	2201      	movs	r2, #1
 800906a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800906c:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <MX_SPI4_Init+0x74>)
 800906e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009072:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8009074:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <MX_SPI4_Init+0x74>)
 8009076:	2210      	movs	r2, #16
 8009078:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800907a:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <MX_SPI4_Init+0x74>)
 800907c:	2200      	movs	r2, #0
 800907e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8009080:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <MX_SPI4_Init+0x74>)
 8009082:	2200      	movs	r2, #0
 8009084:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009086:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <MX_SPI4_Init+0x74>)
 8009088:	2200      	movs	r2, #0
 800908a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <MX_SPI4_Init+0x74>)
 800908e:	2207      	movs	r2, #7
 8009090:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009092:	4b08      	ldr	r3, [pc, #32]	; (80090b4 <MX_SPI4_Init+0x74>)
 8009094:	2200      	movs	r2, #0
 8009096:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009098:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <MX_SPI4_Init+0x74>)
 800909a:	2200      	movs	r2, #0
 800909c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <MX_SPI4_Init+0x74>)
 80090a0:	f7fb f9ce 	bl	8004440 <HAL_SPI_Init>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80090aa:	f7ff ffc1 	bl	8009030 <Error_Handler>
  }

}
 80090ae:	bf00      	nop
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	2000038c 	.word	0x2000038c
 80090b8:	40013400 	.word	0x40013400

080090bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	; 0x28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c4:	f107 0314 	add.w	r3, r7, #20
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	609a      	str	r2, [r3, #8]
 80090d0:	60da      	str	r2, [r3, #12]
 80090d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a1b      	ldr	r2, [pc, #108]	; (8009148 <HAL_SPI_MspInit+0x8c>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d12f      	bne.n	800913e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80090de:	4b1b      	ldr	r3, [pc, #108]	; (800914c <HAL_SPI_MspInit+0x90>)
 80090e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e2:	4a1a      	ldr	r2, [pc, #104]	; (800914c <HAL_SPI_MspInit+0x90>)
 80090e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090e8:	6453      	str	r3, [r2, #68]	; 0x44
 80090ea:	4b18      	ldr	r3, [pc, #96]	; (800914c <HAL_SPI_MspInit+0x90>)
 80090ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80090f6:	4b15      	ldr	r3, [pc, #84]	; (800914c <HAL_SPI_MspInit+0x90>)
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	4a14      	ldr	r2, [pc, #80]	; (800914c <HAL_SPI_MspInit+0x90>)
 80090fc:	f043 0310 	orr.w	r3, r3, #16
 8009100:	6313      	str	r3, [r2, #48]	; 0x30
 8009102:	4b12      	ldr	r3, [pc, #72]	; (800914c <HAL_SPI_MspInit+0x90>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009106:	f003 0310 	and.w	r3, r3, #16
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration    
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800910e:	2364      	movs	r3, #100	; 0x64
 8009110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009112:	2302      	movs	r3, #2
 8009114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009116:	2300      	movs	r3, #0
 8009118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800911a:	2303      	movs	r3, #3
 800911c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800911e:	2305      	movs	r3, #5
 8009120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009122:	f107 0314 	add.w	r3, r7, #20
 8009126:	4619      	mov	r1, r3
 8009128:	4809      	ldr	r0, [pc, #36]	; (8009150 <HAL_SPI_MspInit+0x94>)
 800912a:	f7f8 fda3 	bl	8001c74 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800912e:	2200      	movs	r2, #0
 8009130:	2100      	movs	r1, #0
 8009132:	2054      	movs	r0, #84	; 0x54
 8009134:	f7f8 f8d9 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8009138:	2054      	movs	r0, #84	; 0x54
 800913a:	f7f8 f8f2 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800913e:	bf00      	nop
 8009140:	3728      	adds	r7, #40	; 0x28
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40013400 	.word	0x40013400
 800914c:	40023800 	.word	0x40023800
 8009150:	40021000 	.word	0x40021000

08009154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800915a:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <HAL_MspInit+0x44>)
 800915c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915e:	4a0e      	ldr	r2, [pc, #56]	; (8009198 <HAL_MspInit+0x44>)
 8009160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009164:	6413      	str	r3, [r2, #64]	; 0x40
 8009166:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <HAL_MspInit+0x44>)
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800916e:	607b      	str	r3, [r7, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <HAL_MspInit+0x44>)
 8009174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009176:	4a08      	ldr	r2, [pc, #32]	; (8009198 <HAL_MspInit+0x44>)
 8009178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800917c:	6453      	str	r3, [r2, #68]	; 0x44
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <HAL_MspInit+0x44>)
 8009180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800918a:	bf00      	nop
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	40023800 	.word	0x40023800

0800919c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80091a0:	bf00      	nop
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091aa:	b480      	push	{r7}
 80091ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091ae:	e7fe      	b.n	80091ae <HardFault_Handler+0x4>

080091b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091b4:	e7fe      	b.n	80091b4 <MemManage_Handler+0x4>

080091b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091b6:	b480      	push	{r7}
 80091b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091ba:	e7fe      	b.n	80091ba <BusFault_Handler+0x4>

080091bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091c0:	e7fe      	b.n	80091c0 <UsageFault_Handler+0x4>

080091c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091c2:	b480      	push	{r7}
 80091c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091c6:	bf00      	nop
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091de:	b480      	push	{r7}
 80091e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091e2:	bf00      	nop
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80091f0:	f7f7 ff5e 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80091f4:	bf00      	nop
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80091fc:	4802      	ldr	r0, [pc, #8]	; (8009208 <TIM2_IRQHandler+0x10>)
 80091fe:	f7fc f80b 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009202:	bf00      	nop
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000470 	.word	0x20000470

0800920c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009210:	4802      	ldr	r0, [pc, #8]	; (800921c <TIM4_IRQHandler+0x10>)
 8009212:	f7fc f801 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009216:	bf00      	nop
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	200003f0 	.word	0x200003f0

08009220 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009224:	4802      	ldr	r0, [pc, #8]	; (8009230 <I2C1_EV_IRQHandler+0x10>)
 8009226:	f7f9 f86d 	bl	8002304 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800922a:	bf00      	nop
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	2000033c 	.word	0x2000033c

08009234 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009238:	4802      	ldr	r0, [pc, #8]	; (8009244 <I2C1_ER_IRQHandler+0x10>)
 800923a:	f7f9 f87d 	bl	8002338 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800923e:	bf00      	nop
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	2000033c 	.word	0x2000033c

08009248 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800924c:	4802      	ldr	r0, [pc, #8]	; (8009258 <USART3_IRQHandler+0x10>)
 800924e:	f7fd f88b 	bl	8006368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009252:	bf00      	nop
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	200004b0 	.word	0x200004b0

0800925c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8009260:	4802      	ldr	r0, [pc, #8]	; (800926c <SPI4_IRQHandler+0x10>)
 8009262:	f7fb fcf9 	bl	8004c58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8009266:	bf00      	nop
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	2000038c 	.word	0x2000038c

08009270 <_sbrk>:
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <_sbrk+0x50>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <_sbrk+0x16>
 8009280:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <_sbrk+0x50>)
 8009282:	4a10      	ldr	r2, [pc, #64]	; (80092c4 <_sbrk+0x54>)
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	4b0e      	ldr	r3, [pc, #56]	; (80092c0 <_sbrk+0x50>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <_sbrk+0x50>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4413      	add	r3, r2
 8009294:	466a      	mov	r2, sp
 8009296:	4293      	cmp	r3, r2
 8009298:	d907      	bls.n	80092aa <_sbrk+0x3a>
 800929a:	f000 fb6d 	bl	8009978 <__errno>
 800929e:	4602      	mov	r2, r0
 80092a0:	230c      	movs	r3, #12
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	f04f 33ff 	mov.w	r3, #4294967295
 80092a8:	e006      	b.n	80092b8 <_sbrk+0x48>
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <_sbrk+0x50>)
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	4a03      	ldr	r2, [pc, #12]	; (80092c0 <_sbrk+0x50>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000204 	.word	0x20000204
 80092c4:	20000938 	.word	0x20000938

080092c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80092cc:	4b15      	ldr	r3, [pc, #84]	; (8009324 <SystemInit+0x5c>)
 80092ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d2:	4a14      	ldr	r2, [pc, #80]	; (8009324 <SystemInit+0x5c>)
 80092d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80092dc:	4b12      	ldr	r3, [pc, #72]	; (8009328 <SystemInit+0x60>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a11      	ldr	r2, [pc, #68]	; (8009328 <SystemInit+0x60>)
 80092e2:	f043 0301 	orr.w	r3, r3, #1
 80092e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80092e8:	4b0f      	ldr	r3, [pc, #60]	; (8009328 <SystemInit+0x60>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80092ee:	4b0e      	ldr	r3, [pc, #56]	; (8009328 <SystemInit+0x60>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	490d      	ldr	r1, [pc, #52]	; (8009328 <SystemInit+0x60>)
 80092f4:	4b0d      	ldr	r3, [pc, #52]	; (800932c <SystemInit+0x64>)
 80092f6:	4013      	ands	r3, r2
 80092f8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80092fa:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <SystemInit+0x60>)
 80092fc:	4a0c      	ldr	r2, [pc, #48]	; (8009330 <SystemInit+0x68>)
 80092fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009300:	4b09      	ldr	r3, [pc, #36]	; (8009328 <SystemInit+0x60>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a08      	ldr	r2, [pc, #32]	; (8009328 <SystemInit+0x60>)
 8009306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800930a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800930c:	4b06      	ldr	r3, [pc, #24]	; (8009328 <SystemInit+0x60>)
 800930e:	2200      	movs	r2, #0
 8009310:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009312:	4b04      	ldr	r3, [pc, #16]	; (8009324 <SystemInit+0x5c>)
 8009314:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009318:	609a      	str	r2, [r3, #8]
#endif
}
 800931a:	bf00      	nop
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	e000ed00 	.word	0xe000ed00
 8009328:	40023800 	.word	0x40023800
 800932c:	fef6ffff 	.word	0xfef6ffff
 8009330:	24003010 	.word	0x24003010

08009334 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800933a:	f107 0310 	add.w	r3, r7, #16
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	605a      	str	r2, [r3, #4]
 8009344:	609a      	str	r2, [r3, #8]
 8009346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009348:	1d3b      	adds	r3, r7, #4
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	605a      	str	r2, [r3, #4]
 8009350:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8009352:	4b1e      	ldr	r3, [pc, #120]	; (80093cc <MX_TIM2_Init+0x98>)
 8009354:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009358:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 800935a:	4b1c      	ldr	r3, [pc, #112]	; (80093cc <MX_TIM2_Init+0x98>)
 800935c:	f640 620f 	movw	r2, #3599	; 0xe0f
 8009360:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009362:	4b1a      	ldr	r3, [pc, #104]	; (80093cc <MX_TIM2_Init+0x98>)
 8009364:	2200      	movs	r2, #0
 8009366:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8009368:	4b18      	ldr	r3, [pc, #96]	; (80093cc <MX_TIM2_Init+0x98>)
 800936a:	f242 720f 	movw	r2, #9999	; 0x270f
 800936e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009370:	4b16      	ldr	r3, [pc, #88]	; (80093cc <MX_TIM2_Init+0x98>)
 8009372:	2200      	movs	r2, #0
 8009374:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009376:	4b15      	ldr	r3, [pc, #84]	; (80093cc <MX_TIM2_Init+0x98>)
 8009378:	2200      	movs	r2, #0
 800937a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800937c:	4813      	ldr	r0, [pc, #76]	; (80093cc <MX_TIM2_Init+0x98>)
 800937e:	f7fb fea7 	bl	80050d0 <HAL_TIM_Base_Init>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8009388:	f7ff fe52 	bl	8009030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800938c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009392:	f107 0310 	add.w	r3, r7, #16
 8009396:	4619      	mov	r1, r3
 8009398:	480c      	ldr	r0, [pc, #48]	; (80093cc <MX_TIM2_Init+0x98>)
 800939a:	f7fc f975 	bl	8005688 <HAL_TIM_ConfigClockSource>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80093a4:	f7ff fe44 	bl	8009030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093a8:	2300      	movs	r3, #0
 80093aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80093b0:	1d3b      	adds	r3, r7, #4
 80093b2:	4619      	mov	r1, r3
 80093b4:	4805      	ldr	r0, [pc, #20]	; (80093cc <MX_TIM2_Init+0x98>)
 80093b6:	f7fc fe11 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80093c0:	f7ff fe36 	bl	8009030 <Error_Handler>
  }

}
 80093c4:	bf00      	nop
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000470 	.word	0x20000470

080093d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08e      	sub	sp, #56	; 0x38
 80093d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80093d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	605a      	str	r2, [r3, #4]
 80093e0:	609a      	str	r2, [r3, #8]
 80093e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093e4:	f107 031c 	add.w	r3, r7, #28
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80093f0:	463b      	mov	r3, r7
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	605a      	str	r2, [r3, #4]
 80093f8:	609a      	str	r2, [r3, #8]
 80093fa:	60da      	str	r2, [r3, #12]
 80093fc:	611a      	str	r2, [r3, #16]
 80093fe:	615a      	str	r2, [r3, #20]
 8009400:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8009402:	4b2d      	ldr	r3, [pc, #180]	; (80094b8 <MX_TIM3_Init+0xe8>)
 8009404:	4a2d      	ldr	r2, [pc, #180]	; (80094bc <MX_TIM3_Init+0xec>)
 8009406:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8009408:	4b2b      	ldr	r3, [pc, #172]	; (80094b8 <MX_TIM3_Init+0xe8>)
 800940a:	2247      	movs	r2, #71	; 0x47
 800940c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800940e:	4b2a      	ldr	r3, [pc, #168]	; (80094b8 <MX_TIM3_Init+0xe8>)
 8009410:	2200      	movs	r2, #0
 8009412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8009414:	4b28      	ldr	r3, [pc, #160]	; (80094b8 <MX_TIM3_Init+0xe8>)
 8009416:	f240 32e7 	movw	r2, #999	; 0x3e7
 800941a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800941c:	4b26      	ldr	r3, [pc, #152]	; (80094b8 <MX_TIM3_Init+0xe8>)
 800941e:	2200      	movs	r2, #0
 8009420:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009422:	4b25      	ldr	r3, [pc, #148]	; (80094b8 <MX_TIM3_Init+0xe8>)
 8009424:	2200      	movs	r2, #0
 8009426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009428:	4823      	ldr	r0, [pc, #140]	; (80094b8 <MX_TIM3_Init+0xe8>)
 800942a:	f7fb fe51 	bl	80050d0 <HAL_TIM_Base_Init>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8009434:	f7ff fdfc 	bl	8009030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800943e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009442:	4619      	mov	r1, r3
 8009444:	481c      	ldr	r0, [pc, #112]	; (80094b8 <MX_TIM3_Init+0xe8>)
 8009446:	f7fc f91f 	bl	8005688 <HAL_TIM_ConfigClockSource>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8009450:	f7ff fdee 	bl	8009030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009454:	4818      	ldr	r0, [pc, #96]	; (80094b8 <MX_TIM3_Init+0xe8>)
 8009456:	f7fb fe66 	bl	8005126 <HAL_TIM_PWM_Init>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8009460:	f7ff fde6 	bl	8009030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009468:	2300      	movs	r3, #0
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800946c:	f107 031c 	add.w	r3, r7, #28
 8009470:	4619      	mov	r1, r3
 8009472:	4811      	ldr	r0, [pc, #68]	; (80094b8 <MX_TIM3_Init+0xe8>)
 8009474:	f7fc fdb2 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800947e:	f7ff fdd7 	bl	8009030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009482:	2360      	movs	r3, #96	; 0x60
 8009484:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8009486:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800948a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800948c:	2300      	movs	r3, #0
 800948e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009490:	2300      	movs	r3, #0
 8009492:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009494:	463b      	mov	r3, r7
 8009496:	2200      	movs	r2, #0
 8009498:	4619      	mov	r1, r3
 800949a:	4807      	ldr	r0, [pc, #28]	; (80094b8 <MX_TIM3_Init+0xe8>)
 800949c:	f7fb ffdc 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80094a6:	f7ff fdc3 	bl	8009030 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80094aa:	4803      	ldr	r0, [pc, #12]	; (80094b8 <MX_TIM3_Init+0xe8>)
 80094ac:	f000 f8d4 	bl	8009658 <HAL_TIM_MspPostInit>

}
 80094b0:	bf00      	nop
 80094b2:	3738      	adds	r7, #56	; 0x38
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20000430 	.word	0x20000430
 80094bc:	40000400 	.word	0x40000400

080094c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08e      	sub	sp, #56	; 0x38
 80094c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80094c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	605a      	str	r2, [r3, #4]
 80094d0:	609a      	str	r2, [r3, #8]
 80094d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094d4:	f107 031c 	add.w	r3, r7, #28
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094e0:	463b      	mov	r3, r7
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	605a      	str	r2, [r3, #4]
 80094e8:	609a      	str	r2, [r3, #8]
 80094ea:	60da      	str	r2, [r3, #12]
 80094ec:	611a      	str	r2, [r3, #16]
 80094ee:	615a      	str	r2, [r3, #20]
 80094f0:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80094f2:	4b2d      	ldr	r3, [pc, #180]	; (80095a8 <MX_TIM4_Init+0xe8>)
 80094f4:	4a2d      	ldr	r2, [pc, #180]	; (80095ac <MX_TIM4_Init+0xec>)
 80094f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80094f8:	4b2b      	ldr	r3, [pc, #172]	; (80095a8 <MX_TIM4_Init+0xe8>)
 80094fa:	2247      	movs	r2, #71	; 0x47
 80094fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094fe:	4b2a      	ldr	r3, [pc, #168]	; (80095a8 <MX_TIM4_Init+0xe8>)
 8009500:	2200      	movs	r2, #0
 8009502:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8009504:	4b28      	ldr	r3, [pc, #160]	; (80095a8 <MX_TIM4_Init+0xe8>)
 8009506:	f240 32e7 	movw	r2, #999	; 0x3e7
 800950a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800950c:	4b26      	ldr	r3, [pc, #152]	; (80095a8 <MX_TIM4_Init+0xe8>)
 800950e:	2200      	movs	r2, #0
 8009510:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009512:	4b25      	ldr	r3, [pc, #148]	; (80095a8 <MX_TIM4_Init+0xe8>)
 8009514:	2200      	movs	r2, #0
 8009516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009518:	4823      	ldr	r0, [pc, #140]	; (80095a8 <MX_TIM4_Init+0xe8>)
 800951a:	f7fb fdd9 	bl	80050d0 <HAL_TIM_Base_Init>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8009524:	f7ff fd84 	bl	8009030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800952c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800952e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009532:	4619      	mov	r1, r3
 8009534:	481c      	ldr	r0, [pc, #112]	; (80095a8 <MX_TIM4_Init+0xe8>)
 8009536:	f7fc f8a7 	bl	8005688 <HAL_TIM_ConfigClockSource>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8009540:	f7ff fd76 	bl	8009030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009544:	4818      	ldr	r0, [pc, #96]	; (80095a8 <MX_TIM4_Init+0xe8>)
 8009546:	f7fb fdee 	bl	8005126 <HAL_TIM_PWM_Init>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8009550:	f7ff fd6e 	bl	8009030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009554:	2300      	movs	r3, #0
 8009556:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009558:	2300      	movs	r3, #0
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800955c:	f107 031c 	add.w	r3, r7, #28
 8009560:	4619      	mov	r1, r3
 8009562:	4811      	ldr	r0, [pc, #68]	; (80095a8 <MX_TIM4_Init+0xe8>)
 8009564:	f7fc fd3a 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800956e:	f7ff fd5f 	bl	8009030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009572:	2360      	movs	r3, #96	; 0x60
 8009574:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8009576:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800957a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800957c:	2300      	movs	r3, #0
 800957e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009580:	2300      	movs	r3, #0
 8009582:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009584:	463b      	mov	r3, r7
 8009586:	2200      	movs	r2, #0
 8009588:	4619      	mov	r1, r3
 800958a:	4807      	ldr	r0, [pc, #28]	; (80095a8 <MX_TIM4_Init+0xe8>)
 800958c:	f7fb ff64 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8009596:	f7ff fd4b 	bl	8009030 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800959a:	4803      	ldr	r0, [pc, #12]	; (80095a8 <MX_TIM4_Init+0xe8>)
 800959c:	f000 f85c 	bl	8009658 <HAL_TIM_MspPostInit>

}
 80095a0:	bf00      	nop
 80095a2:	3738      	adds	r7, #56	; 0x38
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	200003f0 	.word	0x200003f0
 80095ac:	40000800 	.word	0x40000800

080095b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c0:	d114      	bne.n	80095ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095c2:	4b22      	ldr	r3, [pc, #136]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	4a21      	ldr	r2, [pc, #132]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 80095c8:	f043 0301 	orr.w	r3, r3, #1
 80095cc:	6413      	str	r3, [r2, #64]	; 0x40
 80095ce:	4b1f      	ldr	r3, [pc, #124]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80095da:	2200      	movs	r2, #0
 80095dc:	2100      	movs	r1, #0
 80095de:	201c      	movs	r0, #28
 80095e0:	f7f7 fe83 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80095e4:	201c      	movs	r0, #28
 80095e6:	f7f7 fe9c 	bl	8001322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80095ea:	e02a      	b.n	8009642 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a17      	ldr	r2, [pc, #92]	; (8009650 <HAL_TIM_Base_MspInit+0xa0>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d10c      	bne.n	8009610 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80095f6:	4b15      	ldr	r3, [pc, #84]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 80095f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fa:	4a14      	ldr	r2, [pc, #80]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 80095fc:	f043 0302 	orr.w	r3, r3, #2
 8009600:	6413      	str	r3, [r2, #64]	; 0x40
 8009602:	4b12      	ldr	r3, [pc, #72]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	693b      	ldr	r3, [r7, #16]
}
 800960e:	e018      	b.n	8009642 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a0f      	ldr	r2, [pc, #60]	; (8009654 <HAL_TIM_Base_MspInit+0xa4>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d113      	bne.n	8009642 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800961a:	4b0c      	ldr	r3, [pc, #48]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	4a0b      	ldr	r2, [pc, #44]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 8009620:	f043 0304 	orr.w	r3, r3, #4
 8009624:	6413      	str	r3, [r2, #64]	; 0x40
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <HAL_TIM_Base_MspInit+0x9c>)
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	201e      	movs	r0, #30
 8009638:	f7f7 fe57 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800963c:	201e      	movs	r0, #30
 800963e:	f7f7 fe70 	bl	8001322 <HAL_NVIC_EnableIRQ>
}
 8009642:	bf00      	nop
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	40023800 	.word	0x40023800
 8009650:	40000400 	.word	0x40000400
 8009654:	40000800 	.word	0x40000800

08009658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08a      	sub	sp, #40	; 0x28
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009660:	f107 0314 	add.w	r3, r7, #20
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	609a      	str	r2, [r3, #8]
 800966c:	60da      	str	r2, [r3, #12]
 800966e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a22      	ldr	r2, [pc, #136]	; (8009700 <HAL_TIM_MspPostInit+0xa8>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d11c      	bne.n	80096b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800967a:	4b22      	ldr	r3, [pc, #136]	; (8009704 <HAL_TIM_MspPostInit+0xac>)
 800967c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967e:	4a21      	ldr	r2, [pc, #132]	; (8009704 <HAL_TIM_MspPostInit+0xac>)
 8009680:	f043 0301 	orr.w	r3, r3, #1
 8009684:	6313      	str	r3, [r2, #48]	; 0x30
 8009686:	4b1f      	ldr	r3, [pc, #124]	; (8009704 <HAL_TIM_MspPostInit+0xac>)
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	613b      	str	r3, [r7, #16]
 8009690:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009692:	2340      	movs	r3, #64	; 0x40
 8009694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009696:	2302      	movs	r3, #2
 8009698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800969e:	2300      	movs	r3, #0
 80096a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80096a2:	2302      	movs	r3, #2
 80096a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096a6:	f107 0314 	add.w	r3, r7, #20
 80096aa:	4619      	mov	r1, r3
 80096ac:	4816      	ldr	r0, [pc, #88]	; (8009708 <HAL_TIM_MspPostInit+0xb0>)
 80096ae:	f7f8 fae1 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80096b2:	e021      	b.n	80096f8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a14      	ldr	r2, [pc, #80]	; (800970c <HAL_TIM_MspPostInit+0xb4>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d11c      	bne.n	80096f8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80096be:	4b11      	ldr	r3, [pc, #68]	; (8009704 <HAL_TIM_MspPostInit+0xac>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	4a10      	ldr	r2, [pc, #64]	; (8009704 <HAL_TIM_MspPostInit+0xac>)
 80096c4:	f043 0308 	orr.w	r3, r3, #8
 80096c8:	6313      	str	r3, [r2, #48]	; 0x30
 80096ca:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <HAL_TIM_MspPostInit+0xac>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	f003 0308 	and.w	r3, r3, #8
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80096d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096dc:	2302      	movs	r3, #2
 80096de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096e4:	2300      	movs	r3, #0
 80096e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80096e8:	2302      	movs	r3, #2
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80096ec:	f107 0314 	add.w	r3, r7, #20
 80096f0:	4619      	mov	r1, r3
 80096f2:	4807      	ldr	r0, [pc, #28]	; (8009710 <HAL_TIM_MspPostInit+0xb8>)
 80096f4:	f7f8 fabe 	bl	8001c74 <HAL_GPIO_Init>
}
 80096f8:	bf00      	nop
 80096fa:	3728      	adds	r7, #40	; 0x28
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	40000400 	.word	0x40000400
 8009704:	40023800 	.word	0x40023800
 8009708:	40020000 	.word	0x40020000
 800970c:	40000800 	.word	0x40000800
 8009710:	40020c00 	.word	0x40020c00

08009714 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8009718:	4b14      	ldr	r3, [pc, #80]	; (800976c <MX_USART3_UART_Init+0x58>)
 800971a:	4a15      	ldr	r2, [pc, #84]	; (8009770 <MX_USART3_UART_Init+0x5c>)
 800971c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <MX_USART3_UART_Init+0x58>)
 8009720:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009726:	4b11      	ldr	r3, [pc, #68]	; (800976c <MX_USART3_UART_Init+0x58>)
 8009728:	2200      	movs	r2, #0
 800972a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800972c:	4b0f      	ldr	r3, [pc, #60]	; (800976c <MX_USART3_UART_Init+0x58>)
 800972e:	2200      	movs	r2, #0
 8009730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009732:	4b0e      	ldr	r3, [pc, #56]	; (800976c <MX_USART3_UART_Init+0x58>)
 8009734:	2200      	movs	r2, #0
 8009736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <MX_USART3_UART_Init+0x58>)
 800973a:	220c      	movs	r2, #12
 800973c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <MX_USART3_UART_Init+0x58>)
 8009740:	2200      	movs	r2, #0
 8009742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009744:	4b09      	ldr	r3, [pc, #36]	; (800976c <MX_USART3_UART_Init+0x58>)
 8009746:	2200      	movs	r2, #0
 8009748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800974a:	4b08      	ldr	r3, [pc, #32]	; (800976c <MX_USART3_UART_Init+0x58>)
 800974c:	2200      	movs	r2, #0
 800974e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <MX_USART3_UART_Init+0x58>)
 8009752:	2200      	movs	r2, #0
 8009754:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009756:	4805      	ldr	r0, [pc, #20]	; (800976c <MX_USART3_UART_Init+0x58>)
 8009758:	f7fc fcba 	bl	80060d0 <HAL_UART_Init>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8009762:	f7ff fc65 	bl	8009030 <Error_Handler>
  }

}
 8009766:	bf00      	nop
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	200004b0 	.word	0x200004b0
 8009770:	40004800 	.word	0x40004800

08009774 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	; 0x28
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800977c:	f107 0314 	add.w	r3, r7, #20
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	605a      	str	r2, [r3, #4]
 8009786:	609a      	str	r2, [r3, #8]
 8009788:	60da      	str	r2, [r3, #12]
 800978a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1b      	ldr	r2, [pc, #108]	; (8009800 <HAL_UART_MspInit+0x8c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d130      	bne.n	80097f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009796:	4b1b      	ldr	r3, [pc, #108]	; (8009804 <HAL_UART_MspInit+0x90>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	4a1a      	ldr	r2, [pc, #104]	; (8009804 <HAL_UART_MspInit+0x90>)
 800979c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097a0:	6413      	str	r3, [r2, #64]	; 0x40
 80097a2:	4b18      	ldr	r3, [pc, #96]	; (8009804 <HAL_UART_MspInit+0x90>)
 80097a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097aa:	613b      	str	r3, [r7, #16]
 80097ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80097ae:	4b15      	ldr	r3, [pc, #84]	; (8009804 <HAL_UART_MspInit+0x90>)
 80097b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b2:	4a14      	ldr	r2, [pc, #80]	; (8009804 <HAL_UART_MspInit+0x90>)
 80097b4:	f043 0308 	orr.w	r3, r3, #8
 80097b8:	6313      	str	r3, [r2, #48]	; 0x30
 80097ba:	4b12      	ldr	r3, [pc, #72]	; (8009804 <HAL_UART_MspInit+0x90>)
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	f003 0308 	and.w	r3, r3, #8
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80097c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80097ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097cc:	2302      	movs	r3, #2
 80097ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d4:	2303      	movs	r3, #3
 80097d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80097d8:	2307      	movs	r3, #7
 80097da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80097dc:	f107 0314 	add.w	r3, r7, #20
 80097e0:	4619      	mov	r1, r3
 80097e2:	4809      	ldr	r0, [pc, #36]	; (8009808 <HAL_UART_MspInit+0x94>)
 80097e4:	f7f8 fa46 	bl	8001c74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80097e8:	2200      	movs	r2, #0
 80097ea:	2100      	movs	r1, #0
 80097ec:	2027      	movs	r0, #39	; 0x27
 80097ee:	f7f7 fd7c 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80097f2:	2027      	movs	r0, #39	; 0x27
 80097f4:	f7f7 fd95 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */
    //HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
     //  HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE END USART3_MspInit 1 */
  }
}
 80097f8:	bf00      	nop
 80097fa:	3728      	adds	r7, #40	; 0x28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40004800 	.word	0x40004800
 8009804:	40023800 	.word	0x40023800
 8009808:	40020c00 	.word	0x40020c00

0800980c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009810:	4b14      	ldr	r3, [pc, #80]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009816:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009818:	4b12      	ldr	r3, [pc, #72]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800981a:	2206      	movs	r2, #6
 800981c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009820:	2202      	movs	r2, #2
 8009822:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009824:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009826:	2200      	movs	r2, #0
 8009828:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800982a:	4b0e      	ldr	r3, [pc, #56]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800982c:	2202      	movs	r2, #2
 800982e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009830:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009832:	2201      	movs	r2, #1
 8009834:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009836:	4b0b      	ldr	r3, [pc, #44]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009838:	2200      	movs	r2, #0
 800983a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800983e:	2200      	movs	r2, #0
 8009840:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009842:	4b08      	ldr	r3, [pc, #32]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009844:	2201      	movs	r2, #1
 8009846:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009848:	4b06      	ldr	r3, [pc, #24]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800984a:	2200      	movs	r2, #0
 800984c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800984e:	4805      	ldr	r0, [pc, #20]	; (8009864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009850:	f7f9 fc58 	bl	8003104 <HAL_PCD_Init>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800985a:	f7ff fbe9 	bl	8009030 <Error_Handler>
  }

}
 800985e:	bf00      	nop
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20000530 	.word	0x20000530

08009868 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08a      	sub	sp, #40	; 0x28
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009870:	f107 0314 	add.w	r3, r7, #20
 8009874:	2200      	movs	r2, #0
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	605a      	str	r2, [r3, #4]
 800987a:	609a      	str	r2, [r3, #8]
 800987c:	60da      	str	r2, [r3, #12]
 800987e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009888:	d141      	bne.n	800990e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800988a:	4b23      	ldr	r3, [pc, #140]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	4a22      	ldr	r2, [pc, #136]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	6313      	str	r3, [r2, #48]	; 0x30
 8009896:	4b20      	ldr	r3, [pc, #128]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	613b      	str	r3, [r7, #16]
 80098a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80098a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80098a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098a8:	2302      	movs	r3, #2
 80098aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098b0:	2303      	movs	r3, #3
 80098b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098b4:	230a      	movs	r3, #10
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098b8:	f107 0314 	add.w	r3, r7, #20
 80098bc:	4619      	mov	r1, r3
 80098be:	4817      	ldr	r0, [pc, #92]	; (800991c <HAL_PCD_MspInit+0xb4>)
 80098c0:	f7f8 f9d8 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80098c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098ca:	2300      	movs	r3, #0
 80098cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098d2:	f107 0314 	add.w	r3, r7, #20
 80098d6:	4619      	mov	r1, r3
 80098d8:	4810      	ldr	r0, [pc, #64]	; (800991c <HAL_PCD_MspInit+0xb4>)
 80098da:	f7f8 f9cb 	bl	8001c74 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 80098e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e2:	4a0d      	ldr	r2, [pc, #52]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 80098e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e8:	6353      	str	r3, [r2, #52]	; 0x34
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 80098ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4b08      	ldr	r3, [pc, #32]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 80098f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fa:	4a07      	ldr	r2, [pc, #28]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 80098fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009900:	6453      	str	r3, [r2, #68]	; 0x44
 8009902:	4b05      	ldr	r3, [pc, #20]	; (8009918 <HAL_PCD_MspInit+0xb0>)
 8009904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800990a:	60bb      	str	r3, [r7, #8]
 800990c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800990e:	bf00      	nop
 8009910:	3728      	adds	r7, #40	; 0x28
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40023800 	.word	0x40023800
 800991c:	40020000 	.word	0x40020000

08009920 <Reset_Handler>:
 8009920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009958 <LoopFillZerobss+0x14>
 8009924:	2100      	movs	r1, #0
 8009926:	e003      	b.n	8009930 <LoopCopyDataInit>

08009928 <CopyDataInit>:
 8009928:	4b0c      	ldr	r3, [pc, #48]	; (800995c <LoopFillZerobss+0x18>)
 800992a:	585b      	ldr	r3, [r3, r1]
 800992c:	5043      	str	r3, [r0, r1]
 800992e:	3104      	adds	r1, #4

08009930 <LoopCopyDataInit>:
 8009930:	480b      	ldr	r0, [pc, #44]	; (8009960 <LoopFillZerobss+0x1c>)
 8009932:	4b0c      	ldr	r3, [pc, #48]	; (8009964 <LoopFillZerobss+0x20>)
 8009934:	1842      	adds	r2, r0, r1
 8009936:	429a      	cmp	r2, r3
 8009938:	d3f6      	bcc.n	8009928 <CopyDataInit>
 800993a:	4a0b      	ldr	r2, [pc, #44]	; (8009968 <LoopFillZerobss+0x24>)
 800993c:	e002      	b.n	8009944 <LoopFillZerobss>

0800993e <FillZerobss>:
 800993e:	2300      	movs	r3, #0
 8009940:	f842 3b04 	str.w	r3, [r2], #4

08009944 <LoopFillZerobss>:
 8009944:	4b09      	ldr	r3, [pc, #36]	; (800996c <LoopFillZerobss+0x28>)
 8009946:	429a      	cmp	r2, r3
 8009948:	d3f9      	bcc.n	800993e <FillZerobss>
 800994a:	f7ff fcbd 	bl	80092c8 <SystemInit>
 800994e:	f000 f819 	bl	8009984 <__libc_init_array>
 8009952:	f7ff f911 	bl	8008b78 <main>
 8009956:	4770      	bx	lr
 8009958:	20050000 	.word	0x20050000
 800995c:	0800d3d0 	.word	0x0800d3d0
 8009960:	20000000 	.word	0x20000000
 8009964:	200001dc 	.word	0x200001dc
 8009968:	200001e0 	.word	0x200001e0
 800996c:	20000938 	.word	0x20000938

08009970 <ADC_IRQHandler>:
 8009970:	e7fe      	b.n	8009970 <ADC_IRQHandler>

08009972 <atof>:
 8009972:	2100      	movs	r1, #0
 8009974:	f001 bac0 	b.w	800aef8 <strtod>

08009978 <__errno>:
 8009978:	4b01      	ldr	r3, [pc, #4]	; (8009980 <__errno+0x8>)
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	2000000c 	.word	0x2000000c

08009984 <__libc_init_array>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	4e0d      	ldr	r6, [pc, #52]	; (80099bc <__libc_init_array+0x38>)
 8009988:	4c0d      	ldr	r4, [pc, #52]	; (80099c0 <__libc_init_array+0x3c>)
 800998a:	1ba4      	subs	r4, r4, r6
 800998c:	10a4      	asrs	r4, r4, #2
 800998e:	2500      	movs	r5, #0
 8009990:	42a5      	cmp	r5, r4
 8009992:	d109      	bne.n	80099a8 <__libc_init_array+0x24>
 8009994:	4e0b      	ldr	r6, [pc, #44]	; (80099c4 <__libc_init_array+0x40>)
 8009996:	4c0c      	ldr	r4, [pc, #48]	; (80099c8 <__libc_init_array+0x44>)
 8009998:	f003 fb66 	bl	800d068 <_init>
 800999c:	1ba4      	subs	r4, r4, r6
 800999e:	10a4      	asrs	r4, r4, #2
 80099a0:	2500      	movs	r5, #0
 80099a2:	42a5      	cmp	r5, r4
 80099a4:	d105      	bne.n	80099b2 <__libc_init_array+0x2e>
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099ac:	4798      	blx	r3
 80099ae:	3501      	adds	r5, #1
 80099b0:	e7ee      	b.n	8009990 <__libc_init_array+0xc>
 80099b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099b6:	4798      	blx	r3
 80099b8:	3501      	adds	r5, #1
 80099ba:	e7f2      	b.n	80099a2 <__libc_init_array+0x1e>
 80099bc:	0800d3c8 	.word	0x0800d3c8
 80099c0:	0800d3c8 	.word	0x0800d3c8
 80099c4:	0800d3c8 	.word	0x0800d3c8
 80099c8:	0800d3cc 	.word	0x0800d3cc

080099cc <memset>:
 80099cc:	4402      	add	r2, r0
 80099ce:	4603      	mov	r3, r0
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d100      	bne.n	80099d6 <memset+0xa>
 80099d4:	4770      	bx	lr
 80099d6:	f803 1b01 	strb.w	r1, [r3], #1
 80099da:	e7f9      	b.n	80099d0 <memset+0x4>

080099dc <__cvt>:
 80099dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	ec55 4b10 	vmov	r4, r5, d0
 80099e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80099e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	460e      	mov	r6, r1
 80099ee:	4691      	mov	r9, r2
 80099f0:	4619      	mov	r1, r3
 80099f2:	bfb8      	it	lt
 80099f4:	4622      	movlt	r2, r4
 80099f6:	462b      	mov	r3, r5
 80099f8:	f027 0720 	bic.w	r7, r7, #32
 80099fc:	bfbb      	ittet	lt
 80099fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a02:	461d      	movlt	r5, r3
 8009a04:	2300      	movge	r3, #0
 8009a06:	232d      	movlt	r3, #45	; 0x2d
 8009a08:	bfb8      	it	lt
 8009a0a:	4614      	movlt	r4, r2
 8009a0c:	2f46      	cmp	r7, #70	; 0x46
 8009a0e:	700b      	strb	r3, [r1, #0]
 8009a10:	d004      	beq.n	8009a1c <__cvt+0x40>
 8009a12:	2f45      	cmp	r7, #69	; 0x45
 8009a14:	d100      	bne.n	8009a18 <__cvt+0x3c>
 8009a16:	3601      	adds	r6, #1
 8009a18:	2102      	movs	r1, #2
 8009a1a:	e000      	b.n	8009a1e <__cvt+0x42>
 8009a1c:	2103      	movs	r1, #3
 8009a1e:	ab03      	add	r3, sp, #12
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	ab02      	add	r3, sp, #8
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	4632      	mov	r2, r6
 8009a28:	4653      	mov	r3, sl
 8009a2a:	ec45 4b10 	vmov	d0, r4, r5
 8009a2e:	f001 fb03 	bl	800b038 <_dtoa_r>
 8009a32:	2f47      	cmp	r7, #71	; 0x47
 8009a34:	4680      	mov	r8, r0
 8009a36:	d102      	bne.n	8009a3e <__cvt+0x62>
 8009a38:	f019 0f01 	tst.w	r9, #1
 8009a3c:	d026      	beq.n	8009a8c <__cvt+0xb0>
 8009a3e:	2f46      	cmp	r7, #70	; 0x46
 8009a40:	eb08 0906 	add.w	r9, r8, r6
 8009a44:	d111      	bne.n	8009a6a <__cvt+0x8e>
 8009a46:	f898 3000 	ldrb.w	r3, [r8]
 8009a4a:	2b30      	cmp	r3, #48	; 0x30
 8009a4c:	d10a      	bne.n	8009a64 <__cvt+0x88>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2300      	movs	r3, #0
 8009a52:	4620      	mov	r0, r4
 8009a54:	4629      	mov	r1, r5
 8009a56:	f7f7 f857 	bl	8000b08 <__aeabi_dcmpeq>
 8009a5a:	b918      	cbnz	r0, 8009a64 <__cvt+0x88>
 8009a5c:	f1c6 0601 	rsb	r6, r6, #1
 8009a60:	f8ca 6000 	str.w	r6, [sl]
 8009a64:	f8da 3000 	ldr.w	r3, [sl]
 8009a68:	4499      	add	r9, r3
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f7 f849 	bl	8000b08 <__aeabi_dcmpeq>
 8009a76:	b938      	cbnz	r0, 8009a88 <__cvt+0xac>
 8009a78:	2230      	movs	r2, #48	; 0x30
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	454b      	cmp	r3, r9
 8009a7e:	d205      	bcs.n	8009a8c <__cvt+0xb0>
 8009a80:	1c59      	adds	r1, r3, #1
 8009a82:	9103      	str	r1, [sp, #12]
 8009a84:	701a      	strb	r2, [r3, #0]
 8009a86:	e7f8      	b.n	8009a7a <__cvt+0x9e>
 8009a88:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a90:	eba3 0308 	sub.w	r3, r3, r8
 8009a94:	4640      	mov	r0, r8
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	b004      	add	sp, #16
 8009a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009a9e <__exponent>:
 8009a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	bfba      	itte	lt
 8009aa6:	4249      	neglt	r1, r1
 8009aa8:	232d      	movlt	r3, #45	; 0x2d
 8009aaa:	232b      	movge	r3, #43	; 0x2b
 8009aac:	2909      	cmp	r1, #9
 8009aae:	f804 2b02 	strb.w	r2, [r4], #2
 8009ab2:	7043      	strb	r3, [r0, #1]
 8009ab4:	dd20      	ble.n	8009af8 <__exponent+0x5a>
 8009ab6:	f10d 0307 	add.w	r3, sp, #7
 8009aba:	461f      	mov	r7, r3
 8009abc:	260a      	movs	r6, #10
 8009abe:	fb91 f5f6 	sdiv	r5, r1, r6
 8009ac2:	fb06 1115 	mls	r1, r6, r5, r1
 8009ac6:	3130      	adds	r1, #48	; 0x30
 8009ac8:	2d09      	cmp	r5, #9
 8009aca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ace:	f103 32ff 	add.w	r2, r3, #4294967295
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	dc09      	bgt.n	8009aea <__exponent+0x4c>
 8009ad6:	3130      	adds	r1, #48	; 0x30
 8009ad8:	3b02      	subs	r3, #2
 8009ada:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ade:	42bb      	cmp	r3, r7
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	d304      	bcc.n	8009aee <__exponent+0x50>
 8009ae4:	1a10      	subs	r0, r2, r0
 8009ae6:	b003      	add	sp, #12
 8009ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aea:	4613      	mov	r3, r2
 8009aec:	e7e7      	b.n	8009abe <__exponent+0x20>
 8009aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af2:	f804 2b01 	strb.w	r2, [r4], #1
 8009af6:	e7f2      	b.n	8009ade <__exponent+0x40>
 8009af8:	2330      	movs	r3, #48	; 0x30
 8009afa:	4419      	add	r1, r3
 8009afc:	7083      	strb	r3, [r0, #2]
 8009afe:	1d02      	adds	r2, r0, #4
 8009b00:	70c1      	strb	r1, [r0, #3]
 8009b02:	e7ef      	b.n	8009ae4 <__exponent+0x46>

08009b04 <_printf_float>:
 8009b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	b08d      	sub	sp, #52	; 0x34
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009b10:	4616      	mov	r6, r2
 8009b12:	461f      	mov	r7, r3
 8009b14:	4605      	mov	r5, r0
 8009b16:	f002 fb6f 	bl	800c1f8 <_localeconv_r>
 8009b1a:	6803      	ldr	r3, [r0, #0]
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f6 fb76 	bl	8000210 <strlen>
 8009b24:	2300      	movs	r3, #0
 8009b26:	930a      	str	r3, [sp, #40]	; 0x28
 8009b28:	f8d8 3000 	ldr.w	r3, [r8]
 8009b2c:	9005      	str	r0, [sp, #20]
 8009b2e:	3307      	adds	r3, #7
 8009b30:	f023 0307 	bic.w	r3, r3, #7
 8009b34:	f103 0208 	add.w	r2, r3, #8
 8009b38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b3c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b40:	f8c8 2000 	str.w	r2, [r8]
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b4c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5e:	4ba7      	ldr	r3, [pc, #668]	; (8009dfc <_printf_float+0x2f8>)
 8009b60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b64:	f7f7 f802 	bl	8000b6c <__aeabi_dcmpun>
 8009b68:	bb70      	cbnz	r0, 8009bc8 <_printf_float+0xc4>
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	4ba3      	ldr	r3, [pc, #652]	; (8009dfc <_printf_float+0x2f8>)
 8009b70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b74:	f7f6 ffdc 	bl	8000b30 <__aeabi_dcmple>
 8009b78:	bb30      	cbnz	r0, 8009bc8 <_printf_float+0xc4>
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4640      	mov	r0, r8
 8009b80:	4649      	mov	r1, r9
 8009b82:	f7f6 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8009b86:	b110      	cbz	r0, 8009b8e <_printf_float+0x8a>
 8009b88:	232d      	movs	r3, #45	; 0x2d
 8009b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b8e:	4a9c      	ldr	r2, [pc, #624]	; (8009e00 <_printf_float+0x2fc>)
 8009b90:	4b9c      	ldr	r3, [pc, #624]	; (8009e04 <_printf_float+0x300>)
 8009b92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009b96:	bf8c      	ite	hi
 8009b98:	4690      	movhi	r8, r2
 8009b9a:	4698      	movls	r8, r3
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	f02b 0204 	bic.w	r2, fp, #4
 8009ba2:	6123      	str	r3, [r4, #16]
 8009ba4:	6022      	str	r2, [r4, #0]
 8009ba6:	f04f 0900 	mov.w	r9, #0
 8009baa:	9700      	str	r7, [sp, #0]
 8009bac:	4633      	mov	r3, r6
 8009bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f000 f9e6 	bl	8009f84 <_printf_common>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	f040 808d 	bne.w	8009cd8 <_printf_float+0x1d4>
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc2:	b00d      	add	sp, #52	; 0x34
 8009bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	4642      	mov	r2, r8
 8009bca:	464b      	mov	r3, r9
 8009bcc:	4640      	mov	r0, r8
 8009bce:	4649      	mov	r1, r9
 8009bd0:	f7f6 ffcc 	bl	8000b6c <__aeabi_dcmpun>
 8009bd4:	b110      	cbz	r0, 8009bdc <_printf_float+0xd8>
 8009bd6:	4a8c      	ldr	r2, [pc, #560]	; (8009e08 <_printf_float+0x304>)
 8009bd8:	4b8c      	ldr	r3, [pc, #560]	; (8009e0c <_printf_float+0x308>)
 8009bda:	e7da      	b.n	8009b92 <_printf_float+0x8e>
 8009bdc:	6861      	ldr	r1, [r4, #4]
 8009bde:	1c4b      	adds	r3, r1, #1
 8009be0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009be4:	a80a      	add	r0, sp, #40	; 0x28
 8009be6:	d13e      	bne.n	8009c66 <_printf_float+0x162>
 8009be8:	2306      	movs	r3, #6
 8009bea:	6063      	str	r3, [r4, #4]
 8009bec:	2300      	movs	r3, #0
 8009bee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009bf2:	ab09      	add	r3, sp, #36	; 0x24
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	ec49 8b10 	vmov	d0, r8, r9
 8009bfa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bfe:	6022      	str	r2, [r4, #0]
 8009c00:	f8cd a004 	str.w	sl, [sp, #4]
 8009c04:	6861      	ldr	r1, [r4, #4]
 8009c06:	4628      	mov	r0, r5
 8009c08:	f7ff fee8 	bl	80099dc <__cvt>
 8009c0c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009c10:	2b47      	cmp	r3, #71	; 0x47
 8009c12:	4680      	mov	r8, r0
 8009c14:	d109      	bne.n	8009c2a <_printf_float+0x126>
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	1cd8      	adds	r0, r3, #3
 8009c1a:	db02      	blt.n	8009c22 <_printf_float+0x11e>
 8009c1c:	6862      	ldr	r2, [r4, #4]
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	dd47      	ble.n	8009cb2 <_printf_float+0x1ae>
 8009c22:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c26:	fa5f fa8a 	uxtb.w	sl, sl
 8009c2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c30:	d824      	bhi.n	8009c7c <_printf_float+0x178>
 8009c32:	3901      	subs	r1, #1
 8009c34:	4652      	mov	r2, sl
 8009c36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c3a:	9109      	str	r1, [sp, #36]	; 0x24
 8009c3c:	f7ff ff2f 	bl	8009a9e <__exponent>
 8009c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c42:	1813      	adds	r3, r2, r0
 8009c44:	2a01      	cmp	r2, #1
 8009c46:	4681      	mov	r9, r0
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	dc02      	bgt.n	8009c52 <_printf_float+0x14e>
 8009c4c:	6822      	ldr	r2, [r4, #0]
 8009c4e:	07d1      	lsls	r1, r2, #31
 8009c50:	d501      	bpl.n	8009c56 <_printf_float+0x152>
 8009c52:	3301      	adds	r3, #1
 8009c54:	6123      	str	r3, [r4, #16]
 8009c56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0a5      	beq.n	8009baa <_printf_float+0xa6>
 8009c5e:	232d      	movs	r3, #45	; 0x2d
 8009c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c64:	e7a1      	b.n	8009baa <_printf_float+0xa6>
 8009c66:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009c6a:	f000 8177 	beq.w	8009f5c <_printf_float+0x458>
 8009c6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009c72:	d1bb      	bne.n	8009bec <_printf_float+0xe8>
 8009c74:	2900      	cmp	r1, #0
 8009c76:	d1b9      	bne.n	8009bec <_printf_float+0xe8>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e7b6      	b.n	8009bea <_printf_float+0xe6>
 8009c7c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009c80:	d119      	bne.n	8009cb6 <_printf_float+0x1b2>
 8009c82:	2900      	cmp	r1, #0
 8009c84:	6863      	ldr	r3, [r4, #4]
 8009c86:	dd0c      	ble.n	8009ca2 <_printf_float+0x19e>
 8009c88:	6121      	str	r1, [r4, #16]
 8009c8a:	b913      	cbnz	r3, 8009c92 <_printf_float+0x18e>
 8009c8c:	6822      	ldr	r2, [r4, #0]
 8009c8e:	07d2      	lsls	r2, r2, #31
 8009c90:	d502      	bpl.n	8009c98 <_printf_float+0x194>
 8009c92:	3301      	adds	r3, #1
 8009c94:	440b      	add	r3, r1
 8009c96:	6123      	str	r3, [r4, #16]
 8009c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c9c:	f04f 0900 	mov.w	r9, #0
 8009ca0:	e7d9      	b.n	8009c56 <_printf_float+0x152>
 8009ca2:	b913      	cbnz	r3, 8009caa <_printf_float+0x1a6>
 8009ca4:	6822      	ldr	r2, [r4, #0]
 8009ca6:	07d0      	lsls	r0, r2, #31
 8009ca8:	d501      	bpl.n	8009cae <_printf_float+0x1aa>
 8009caa:	3302      	adds	r3, #2
 8009cac:	e7f3      	b.n	8009c96 <_printf_float+0x192>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e7f1      	b.n	8009c96 <_printf_float+0x192>
 8009cb2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009cb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	db05      	blt.n	8009cca <_printf_float+0x1c6>
 8009cbe:	6822      	ldr	r2, [r4, #0]
 8009cc0:	6123      	str	r3, [r4, #16]
 8009cc2:	07d1      	lsls	r1, r2, #31
 8009cc4:	d5e8      	bpl.n	8009c98 <_printf_float+0x194>
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	e7e5      	b.n	8009c96 <_printf_float+0x192>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bfd4      	ite	le
 8009cce:	f1c3 0302 	rsble	r3, r3, #2
 8009cd2:	2301      	movgt	r3, #1
 8009cd4:	4413      	add	r3, r2
 8009cd6:	e7de      	b.n	8009c96 <_printf_float+0x192>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	055a      	lsls	r2, r3, #21
 8009cdc:	d407      	bmi.n	8009cee <_printf_float+0x1ea>
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	47b8      	blx	r7
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d12b      	bne.n	8009d44 <_printf_float+0x240>
 8009cec:	e767      	b.n	8009bbe <_printf_float+0xba>
 8009cee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009cf2:	f240 80dc 	bls.w	8009eae <_printf_float+0x3aa>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cfe:	f7f6 ff03 	bl	8000b08 <__aeabi_dcmpeq>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d033      	beq.n	8009d6e <_printf_float+0x26a>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4a41      	ldr	r2, [pc, #260]	; (8009e10 <_printf_float+0x30c>)
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f af54 	beq.w	8009bbe <_printf_float+0xba>
 8009d16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	db02      	blt.n	8009d24 <_printf_float+0x220>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	07d8      	lsls	r0, r3, #31
 8009d22:	d50f      	bpl.n	8009d44 <_printf_float+0x240>
 8009d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	47b8      	blx	r7
 8009d2e:	3001      	adds	r0, #1
 8009d30:	f43f af45 	beq.w	8009bbe <_printf_float+0xba>
 8009d34:	f04f 0800 	mov.w	r8, #0
 8009d38:	f104 091a 	add.w	r9, r4, #26
 8009d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	4543      	cmp	r3, r8
 8009d42:	dc09      	bgt.n	8009d58 <_printf_float+0x254>
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	079b      	lsls	r3, r3, #30
 8009d48:	f100 8103 	bmi.w	8009f52 <_printf_float+0x44e>
 8009d4c:	68e0      	ldr	r0, [r4, #12]
 8009d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d50:	4298      	cmp	r0, r3
 8009d52:	bfb8      	it	lt
 8009d54:	4618      	movlt	r0, r3
 8009d56:	e734      	b.n	8009bc2 <_printf_float+0xbe>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	464a      	mov	r2, r9
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4628      	mov	r0, r5
 8009d60:	47b8      	blx	r7
 8009d62:	3001      	adds	r0, #1
 8009d64:	f43f af2b 	beq.w	8009bbe <_printf_float+0xba>
 8009d68:	f108 0801 	add.w	r8, r8, #1
 8009d6c:	e7e6      	b.n	8009d3c <_printf_float+0x238>
 8009d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	dc2b      	bgt.n	8009dcc <_printf_float+0x2c8>
 8009d74:	2301      	movs	r3, #1
 8009d76:	4a26      	ldr	r2, [pc, #152]	; (8009e10 <_printf_float+0x30c>)
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	47b8      	blx	r7
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f43f af1d 	beq.w	8009bbe <_printf_float+0xba>
 8009d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d86:	b923      	cbnz	r3, 8009d92 <_printf_float+0x28e>
 8009d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d8a:	b913      	cbnz	r3, 8009d92 <_printf_float+0x28e>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	07d9      	lsls	r1, r3, #31
 8009d90:	d5d8      	bpl.n	8009d44 <_printf_float+0x240>
 8009d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f af0e 	beq.w	8009bbe <_printf_float+0xba>
 8009da2:	f04f 0900 	mov.w	r9, #0
 8009da6:	f104 0a1a 	add.w	sl, r4, #26
 8009daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dac:	425b      	negs	r3, r3
 8009dae:	454b      	cmp	r3, r9
 8009db0:	dc01      	bgt.n	8009db6 <_printf_float+0x2b2>
 8009db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db4:	e794      	b.n	8009ce0 <_printf_float+0x1dc>
 8009db6:	2301      	movs	r3, #1
 8009db8:	4652      	mov	r2, sl
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f43f aefc 	beq.w	8009bbe <_printf_float+0xba>
 8009dc6:	f109 0901 	add.w	r9, r9, #1
 8009dca:	e7ee      	b.n	8009daa <_printf_float+0x2a6>
 8009dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	bfa8      	it	ge
 8009dd4:	461a      	movge	r2, r3
 8009dd6:	2a00      	cmp	r2, #0
 8009dd8:	4691      	mov	r9, r2
 8009dda:	dd07      	ble.n	8009dec <_printf_float+0x2e8>
 8009ddc:	4613      	mov	r3, r2
 8009dde:	4631      	mov	r1, r6
 8009de0:	4642      	mov	r2, r8
 8009de2:	4628      	mov	r0, r5
 8009de4:	47b8      	blx	r7
 8009de6:	3001      	adds	r0, #1
 8009de8:	f43f aee9 	beq.w	8009bbe <_printf_float+0xba>
 8009dec:	f104 031a 	add.w	r3, r4, #26
 8009df0:	f04f 0b00 	mov.w	fp, #0
 8009df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009df8:	9306      	str	r3, [sp, #24]
 8009dfa:	e015      	b.n	8009e28 <_printf_float+0x324>
 8009dfc:	7fefffff 	.word	0x7fefffff
 8009e00:	0800d114 	.word	0x0800d114
 8009e04:	0800d110 	.word	0x0800d110
 8009e08:	0800d11c 	.word	0x0800d11c
 8009e0c:	0800d118 	.word	0x0800d118
 8009e10:	0800d120 	.word	0x0800d120
 8009e14:	2301      	movs	r3, #1
 8009e16:	9a06      	ldr	r2, [sp, #24]
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b8      	blx	r7
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f43f aecd 	beq.w	8009bbe <_printf_float+0xba>
 8009e24:	f10b 0b01 	add.w	fp, fp, #1
 8009e28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009e2c:	ebaa 0309 	sub.w	r3, sl, r9
 8009e30:	455b      	cmp	r3, fp
 8009e32:	dcef      	bgt.n	8009e14 <_printf_float+0x310>
 8009e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	44d0      	add	r8, sl
 8009e3c:	db15      	blt.n	8009e6a <_printf_float+0x366>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	07da      	lsls	r2, r3, #31
 8009e42:	d412      	bmi.n	8009e6a <_printf_float+0x366>
 8009e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e48:	eba3 020a 	sub.w	r2, r3, sl
 8009e4c:	eba3 0a01 	sub.w	sl, r3, r1
 8009e50:	4592      	cmp	sl, r2
 8009e52:	bfa8      	it	ge
 8009e54:	4692      	movge	sl, r2
 8009e56:	f1ba 0f00 	cmp.w	sl, #0
 8009e5a:	dc0e      	bgt.n	8009e7a <_printf_float+0x376>
 8009e5c:	f04f 0800 	mov.w	r8, #0
 8009e60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e64:	f104 091a 	add.w	r9, r4, #26
 8009e68:	e019      	b.n	8009e9e <_printf_float+0x39a>
 8009e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b8      	blx	r7
 8009e74:	3001      	adds	r0, #1
 8009e76:	d1e5      	bne.n	8009e44 <_printf_float+0x340>
 8009e78:	e6a1      	b.n	8009bbe <_printf_float+0xba>
 8009e7a:	4653      	mov	r3, sl
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	d1e9      	bne.n	8009e5c <_printf_float+0x358>
 8009e88:	e699      	b.n	8009bbe <_printf_float+0xba>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	464a      	mov	r2, r9
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b8      	blx	r7
 8009e94:	3001      	adds	r0, #1
 8009e96:	f43f ae92 	beq.w	8009bbe <_printf_float+0xba>
 8009e9a:	f108 0801 	add.w	r8, r8, #1
 8009e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	eba3 030a 	sub.w	r3, r3, sl
 8009ea8:	4543      	cmp	r3, r8
 8009eaa:	dcee      	bgt.n	8009e8a <_printf_float+0x386>
 8009eac:	e74a      	b.n	8009d44 <_printf_float+0x240>
 8009eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb0:	2a01      	cmp	r2, #1
 8009eb2:	dc01      	bgt.n	8009eb8 <_printf_float+0x3b4>
 8009eb4:	07db      	lsls	r3, r3, #31
 8009eb6:	d53a      	bpl.n	8009f2e <_printf_float+0x42a>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4642      	mov	r2, r8
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f ae7b 	beq.w	8009bbe <_printf_float+0xba>
 8009ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47b8      	blx	r7
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	f108 0801 	add.w	r8, r8, #1
 8009ed8:	f43f ae71 	beq.w	8009bbe <_printf_float+0xba>
 8009edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f103 3aff 	add.w	sl, r3, #4294967295
 8009ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f7f6 fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8009eee:	b9c8      	cbnz	r0, 8009f24 <_printf_float+0x420>
 8009ef0:	4653      	mov	r3, sl
 8009ef2:	4642      	mov	r2, r8
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	d10e      	bne.n	8009f1c <_printf_float+0x418>
 8009efe:	e65e      	b.n	8009bbe <_printf_float+0xba>
 8009f00:	2301      	movs	r3, #1
 8009f02:	4652      	mov	r2, sl
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f ae57 	beq.w	8009bbe <_printf_float+0xba>
 8009f10:	f108 0801 	add.w	r8, r8, #1
 8009f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f16:	3b01      	subs	r3, #1
 8009f18:	4543      	cmp	r3, r8
 8009f1a:	dcf1      	bgt.n	8009f00 <_printf_float+0x3fc>
 8009f1c:	464b      	mov	r3, r9
 8009f1e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f22:	e6de      	b.n	8009ce2 <_printf_float+0x1de>
 8009f24:	f04f 0800 	mov.w	r8, #0
 8009f28:	f104 0a1a 	add.w	sl, r4, #26
 8009f2c:	e7f2      	b.n	8009f14 <_printf_float+0x410>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e7df      	b.n	8009ef2 <_printf_float+0x3ee>
 8009f32:	2301      	movs	r3, #1
 8009f34:	464a      	mov	r2, r9
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f43f ae3e 	beq.w	8009bbe <_printf_float+0xba>
 8009f42:	f108 0801 	add.w	r8, r8, #1
 8009f46:	68e3      	ldr	r3, [r4, #12]
 8009f48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	4543      	cmp	r3, r8
 8009f4e:	dcf0      	bgt.n	8009f32 <_printf_float+0x42e>
 8009f50:	e6fc      	b.n	8009d4c <_printf_float+0x248>
 8009f52:	f04f 0800 	mov.w	r8, #0
 8009f56:	f104 0919 	add.w	r9, r4, #25
 8009f5a:	e7f4      	b.n	8009f46 <_printf_float+0x442>
 8009f5c:	2900      	cmp	r1, #0
 8009f5e:	f43f ae8b 	beq.w	8009c78 <_printf_float+0x174>
 8009f62:	2300      	movs	r3, #0
 8009f64:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009f68:	ab09      	add	r3, sp, #36	; 0x24
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	ec49 8b10 	vmov	d0, r8, r9
 8009f70:	6022      	str	r2, [r4, #0]
 8009f72:	f8cd a004 	str.w	sl, [sp, #4]
 8009f76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f7ff fd2e 	bl	80099dc <__cvt>
 8009f80:	4680      	mov	r8, r0
 8009f82:	e648      	b.n	8009c16 <_printf_float+0x112>

08009f84 <_printf_common>:
 8009f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	4691      	mov	r9, r2
 8009f8a:	461f      	mov	r7, r3
 8009f8c:	688a      	ldr	r2, [r1, #8]
 8009f8e:	690b      	ldr	r3, [r1, #16]
 8009f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f94:	4293      	cmp	r3, r2
 8009f96:	bfb8      	it	lt
 8009f98:	4613      	movlt	r3, r2
 8009f9a:	f8c9 3000 	str.w	r3, [r9]
 8009f9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	b112      	cbz	r2, 8009fae <_printf_common+0x2a>
 8009fa8:	3301      	adds	r3, #1
 8009faa:	f8c9 3000 	str.w	r3, [r9]
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	0699      	lsls	r1, r3, #26
 8009fb2:	bf42      	ittt	mi
 8009fb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009fb8:	3302      	addmi	r3, #2
 8009fba:	f8c9 3000 	strmi.w	r3, [r9]
 8009fbe:	6825      	ldr	r5, [r4, #0]
 8009fc0:	f015 0506 	ands.w	r5, r5, #6
 8009fc4:	d107      	bne.n	8009fd6 <_printf_common+0x52>
 8009fc6:	f104 0a19 	add.w	sl, r4, #25
 8009fca:	68e3      	ldr	r3, [r4, #12]
 8009fcc:	f8d9 2000 	ldr.w	r2, [r9]
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	42ab      	cmp	r3, r5
 8009fd4:	dc28      	bgt.n	800a028 <_printf_common+0xa4>
 8009fd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fda:	6822      	ldr	r2, [r4, #0]
 8009fdc:	3300      	adds	r3, #0
 8009fde:	bf18      	it	ne
 8009fe0:	2301      	movne	r3, #1
 8009fe2:	0692      	lsls	r2, r2, #26
 8009fe4:	d42d      	bmi.n	800a042 <_printf_common+0xbe>
 8009fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fea:	4639      	mov	r1, r7
 8009fec:	4630      	mov	r0, r6
 8009fee:	47c0      	blx	r8
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	d020      	beq.n	800a036 <_printf_common+0xb2>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	68e5      	ldr	r5, [r4, #12]
 8009ff8:	f8d9 2000 	ldr.w	r2, [r9]
 8009ffc:	f003 0306 	and.w	r3, r3, #6
 800a000:	2b04      	cmp	r3, #4
 800a002:	bf08      	it	eq
 800a004:	1aad      	subeq	r5, r5, r2
 800a006:	68a3      	ldr	r3, [r4, #8]
 800a008:	6922      	ldr	r2, [r4, #16]
 800a00a:	bf0c      	ite	eq
 800a00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a010:	2500      	movne	r5, #0
 800a012:	4293      	cmp	r3, r2
 800a014:	bfc4      	itt	gt
 800a016:	1a9b      	subgt	r3, r3, r2
 800a018:	18ed      	addgt	r5, r5, r3
 800a01a:	f04f 0900 	mov.w	r9, #0
 800a01e:	341a      	adds	r4, #26
 800a020:	454d      	cmp	r5, r9
 800a022:	d11a      	bne.n	800a05a <_printf_common+0xd6>
 800a024:	2000      	movs	r0, #0
 800a026:	e008      	b.n	800a03a <_printf_common+0xb6>
 800a028:	2301      	movs	r3, #1
 800a02a:	4652      	mov	r2, sl
 800a02c:	4639      	mov	r1, r7
 800a02e:	4630      	mov	r0, r6
 800a030:	47c0      	blx	r8
 800a032:	3001      	adds	r0, #1
 800a034:	d103      	bne.n	800a03e <_printf_common+0xba>
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03e:	3501      	adds	r5, #1
 800a040:	e7c3      	b.n	8009fca <_printf_common+0x46>
 800a042:	18e1      	adds	r1, r4, r3
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	2030      	movs	r0, #48	; 0x30
 800a048:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a04c:	4422      	add	r2, r4
 800a04e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a052:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a056:	3302      	adds	r3, #2
 800a058:	e7c5      	b.n	8009fe6 <_printf_common+0x62>
 800a05a:	2301      	movs	r3, #1
 800a05c:	4622      	mov	r2, r4
 800a05e:	4639      	mov	r1, r7
 800a060:	4630      	mov	r0, r6
 800a062:	47c0      	blx	r8
 800a064:	3001      	adds	r0, #1
 800a066:	d0e6      	beq.n	800a036 <_printf_common+0xb2>
 800a068:	f109 0901 	add.w	r9, r9, #1
 800a06c:	e7d8      	b.n	800a020 <_printf_common+0x9c>
	...

0800a070 <_printf_i>:
 800a070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a074:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a078:	460c      	mov	r4, r1
 800a07a:	7e09      	ldrb	r1, [r1, #24]
 800a07c:	b085      	sub	sp, #20
 800a07e:	296e      	cmp	r1, #110	; 0x6e
 800a080:	4617      	mov	r7, r2
 800a082:	4606      	mov	r6, r0
 800a084:	4698      	mov	r8, r3
 800a086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a088:	f000 80b3 	beq.w	800a1f2 <_printf_i+0x182>
 800a08c:	d822      	bhi.n	800a0d4 <_printf_i+0x64>
 800a08e:	2963      	cmp	r1, #99	; 0x63
 800a090:	d036      	beq.n	800a100 <_printf_i+0x90>
 800a092:	d80a      	bhi.n	800a0aa <_printf_i+0x3a>
 800a094:	2900      	cmp	r1, #0
 800a096:	f000 80b9 	beq.w	800a20c <_printf_i+0x19c>
 800a09a:	2958      	cmp	r1, #88	; 0x58
 800a09c:	f000 8083 	beq.w	800a1a6 <_printf_i+0x136>
 800a0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a0a8:	e032      	b.n	800a110 <_printf_i+0xa0>
 800a0aa:	2964      	cmp	r1, #100	; 0x64
 800a0ac:	d001      	beq.n	800a0b2 <_printf_i+0x42>
 800a0ae:	2969      	cmp	r1, #105	; 0x69
 800a0b0:	d1f6      	bne.n	800a0a0 <_printf_i+0x30>
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	6813      	ldr	r3, [r2, #0]
 800a0b6:	0605      	lsls	r5, r0, #24
 800a0b8:	f103 0104 	add.w	r1, r3, #4
 800a0bc:	d52a      	bpl.n	800a114 <_printf_i+0xa4>
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6011      	str	r1, [r2, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	da03      	bge.n	800a0ce <_printf_i+0x5e>
 800a0c6:	222d      	movs	r2, #45	; 0x2d
 800a0c8:	425b      	negs	r3, r3
 800a0ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a0ce:	486f      	ldr	r0, [pc, #444]	; (800a28c <_printf_i+0x21c>)
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	e039      	b.n	800a148 <_printf_i+0xd8>
 800a0d4:	2973      	cmp	r1, #115	; 0x73
 800a0d6:	f000 809d 	beq.w	800a214 <_printf_i+0x1a4>
 800a0da:	d808      	bhi.n	800a0ee <_printf_i+0x7e>
 800a0dc:	296f      	cmp	r1, #111	; 0x6f
 800a0de:	d020      	beq.n	800a122 <_printf_i+0xb2>
 800a0e0:	2970      	cmp	r1, #112	; 0x70
 800a0e2:	d1dd      	bne.n	800a0a0 <_printf_i+0x30>
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	f043 0320 	orr.w	r3, r3, #32
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	e003      	b.n	800a0f6 <_printf_i+0x86>
 800a0ee:	2975      	cmp	r1, #117	; 0x75
 800a0f0:	d017      	beq.n	800a122 <_printf_i+0xb2>
 800a0f2:	2978      	cmp	r1, #120	; 0x78
 800a0f4:	d1d4      	bne.n	800a0a0 <_printf_i+0x30>
 800a0f6:	2378      	movs	r3, #120	; 0x78
 800a0f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0fc:	4864      	ldr	r0, [pc, #400]	; (800a290 <_printf_i+0x220>)
 800a0fe:	e055      	b.n	800a1ac <_printf_i+0x13c>
 800a100:	6813      	ldr	r3, [r2, #0]
 800a102:	1d19      	adds	r1, r3, #4
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6011      	str	r1, [r2, #0]
 800a108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a10c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a110:	2301      	movs	r3, #1
 800a112:	e08c      	b.n	800a22e <_printf_i+0x1be>
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6011      	str	r1, [r2, #0]
 800a118:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a11c:	bf18      	it	ne
 800a11e:	b21b      	sxthne	r3, r3
 800a120:	e7cf      	b.n	800a0c2 <_printf_i+0x52>
 800a122:	6813      	ldr	r3, [r2, #0]
 800a124:	6825      	ldr	r5, [r4, #0]
 800a126:	1d18      	adds	r0, r3, #4
 800a128:	6010      	str	r0, [r2, #0]
 800a12a:	0628      	lsls	r0, r5, #24
 800a12c:	d501      	bpl.n	800a132 <_printf_i+0xc2>
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	e002      	b.n	800a138 <_printf_i+0xc8>
 800a132:	0668      	lsls	r0, r5, #25
 800a134:	d5fb      	bpl.n	800a12e <_printf_i+0xbe>
 800a136:	881b      	ldrh	r3, [r3, #0]
 800a138:	4854      	ldr	r0, [pc, #336]	; (800a28c <_printf_i+0x21c>)
 800a13a:	296f      	cmp	r1, #111	; 0x6f
 800a13c:	bf14      	ite	ne
 800a13e:	220a      	movne	r2, #10
 800a140:	2208      	moveq	r2, #8
 800a142:	2100      	movs	r1, #0
 800a144:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a148:	6865      	ldr	r5, [r4, #4]
 800a14a:	60a5      	str	r5, [r4, #8]
 800a14c:	2d00      	cmp	r5, #0
 800a14e:	f2c0 8095 	blt.w	800a27c <_printf_i+0x20c>
 800a152:	6821      	ldr	r1, [r4, #0]
 800a154:	f021 0104 	bic.w	r1, r1, #4
 800a158:	6021      	str	r1, [r4, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d13d      	bne.n	800a1da <_printf_i+0x16a>
 800a15e:	2d00      	cmp	r5, #0
 800a160:	f040 808e 	bne.w	800a280 <_printf_i+0x210>
 800a164:	4665      	mov	r5, ip
 800a166:	2a08      	cmp	r2, #8
 800a168:	d10b      	bne.n	800a182 <_printf_i+0x112>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	07db      	lsls	r3, r3, #31
 800a16e:	d508      	bpl.n	800a182 <_printf_i+0x112>
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	6862      	ldr	r2, [r4, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	bfde      	ittt	le
 800a178:	2330      	movle	r3, #48	; 0x30
 800a17a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a17e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a182:	ebac 0305 	sub.w	r3, ip, r5
 800a186:	6123      	str	r3, [r4, #16]
 800a188:	f8cd 8000 	str.w	r8, [sp]
 800a18c:	463b      	mov	r3, r7
 800a18e:	aa03      	add	r2, sp, #12
 800a190:	4621      	mov	r1, r4
 800a192:	4630      	mov	r0, r6
 800a194:	f7ff fef6 	bl	8009f84 <_printf_common>
 800a198:	3001      	adds	r0, #1
 800a19a:	d14d      	bne.n	800a238 <_printf_i+0x1c8>
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	b005      	add	sp, #20
 800a1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1a6:	4839      	ldr	r0, [pc, #228]	; (800a28c <_printf_i+0x21c>)
 800a1a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a1ac:	6813      	ldr	r3, [r2, #0]
 800a1ae:	6821      	ldr	r1, [r4, #0]
 800a1b0:	1d1d      	adds	r5, r3, #4
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6015      	str	r5, [r2, #0]
 800a1b6:	060a      	lsls	r2, r1, #24
 800a1b8:	d50b      	bpl.n	800a1d2 <_printf_i+0x162>
 800a1ba:	07ca      	lsls	r2, r1, #31
 800a1bc:	bf44      	itt	mi
 800a1be:	f041 0120 	orrmi.w	r1, r1, #32
 800a1c2:	6021      	strmi	r1, [r4, #0]
 800a1c4:	b91b      	cbnz	r3, 800a1ce <_printf_i+0x15e>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	f022 0220 	bic.w	r2, r2, #32
 800a1cc:	6022      	str	r2, [r4, #0]
 800a1ce:	2210      	movs	r2, #16
 800a1d0:	e7b7      	b.n	800a142 <_printf_i+0xd2>
 800a1d2:	064d      	lsls	r5, r1, #25
 800a1d4:	bf48      	it	mi
 800a1d6:	b29b      	uxthmi	r3, r3
 800a1d8:	e7ef      	b.n	800a1ba <_printf_i+0x14a>
 800a1da:	4665      	mov	r5, ip
 800a1dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1e0:	fb02 3311 	mls	r3, r2, r1, r3
 800a1e4:	5cc3      	ldrb	r3, [r0, r3]
 800a1e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	d1f5      	bne.n	800a1dc <_printf_i+0x16c>
 800a1f0:	e7b9      	b.n	800a166 <_printf_i+0xf6>
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	6825      	ldr	r5, [r4, #0]
 800a1f6:	6961      	ldr	r1, [r4, #20]
 800a1f8:	1d18      	adds	r0, r3, #4
 800a1fa:	6010      	str	r0, [r2, #0]
 800a1fc:	0628      	lsls	r0, r5, #24
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	d501      	bpl.n	800a206 <_printf_i+0x196>
 800a202:	6019      	str	r1, [r3, #0]
 800a204:	e002      	b.n	800a20c <_printf_i+0x19c>
 800a206:	066a      	lsls	r2, r5, #25
 800a208:	d5fb      	bpl.n	800a202 <_printf_i+0x192>
 800a20a:	8019      	strh	r1, [r3, #0]
 800a20c:	2300      	movs	r3, #0
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	4665      	mov	r5, ip
 800a212:	e7b9      	b.n	800a188 <_printf_i+0x118>
 800a214:	6813      	ldr	r3, [r2, #0]
 800a216:	1d19      	adds	r1, r3, #4
 800a218:	6011      	str	r1, [r2, #0]
 800a21a:	681d      	ldr	r5, [r3, #0]
 800a21c:	6862      	ldr	r2, [r4, #4]
 800a21e:	2100      	movs	r1, #0
 800a220:	4628      	mov	r0, r5
 800a222:	f7f5 fffd 	bl	8000220 <memchr>
 800a226:	b108      	cbz	r0, 800a22c <_printf_i+0x1bc>
 800a228:	1b40      	subs	r0, r0, r5
 800a22a:	6060      	str	r0, [r4, #4]
 800a22c:	6863      	ldr	r3, [r4, #4]
 800a22e:	6123      	str	r3, [r4, #16]
 800a230:	2300      	movs	r3, #0
 800a232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a236:	e7a7      	b.n	800a188 <_printf_i+0x118>
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	462a      	mov	r2, r5
 800a23c:	4639      	mov	r1, r7
 800a23e:	4630      	mov	r0, r6
 800a240:	47c0      	blx	r8
 800a242:	3001      	adds	r0, #1
 800a244:	d0aa      	beq.n	800a19c <_printf_i+0x12c>
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	079b      	lsls	r3, r3, #30
 800a24a:	d413      	bmi.n	800a274 <_printf_i+0x204>
 800a24c:	68e0      	ldr	r0, [r4, #12]
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	4298      	cmp	r0, r3
 800a252:	bfb8      	it	lt
 800a254:	4618      	movlt	r0, r3
 800a256:	e7a3      	b.n	800a1a0 <_printf_i+0x130>
 800a258:	2301      	movs	r3, #1
 800a25a:	464a      	mov	r2, r9
 800a25c:	4639      	mov	r1, r7
 800a25e:	4630      	mov	r0, r6
 800a260:	47c0      	blx	r8
 800a262:	3001      	adds	r0, #1
 800a264:	d09a      	beq.n	800a19c <_printf_i+0x12c>
 800a266:	3501      	adds	r5, #1
 800a268:	68e3      	ldr	r3, [r4, #12]
 800a26a:	9a03      	ldr	r2, [sp, #12]
 800a26c:	1a9b      	subs	r3, r3, r2
 800a26e:	42ab      	cmp	r3, r5
 800a270:	dcf2      	bgt.n	800a258 <_printf_i+0x1e8>
 800a272:	e7eb      	b.n	800a24c <_printf_i+0x1dc>
 800a274:	2500      	movs	r5, #0
 800a276:	f104 0919 	add.w	r9, r4, #25
 800a27a:	e7f5      	b.n	800a268 <_printf_i+0x1f8>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1ac      	bne.n	800a1da <_printf_i+0x16a>
 800a280:	7803      	ldrb	r3, [r0, #0]
 800a282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a286:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a28a:	e76c      	b.n	800a166 <_printf_i+0xf6>
 800a28c:	0800d122 	.word	0x0800d122
 800a290:	0800d133 	.word	0x0800d133

0800a294 <siprintf>:
 800a294:	b40e      	push	{r1, r2, r3}
 800a296:	b500      	push	{lr}
 800a298:	b09c      	sub	sp, #112	; 0x70
 800a29a:	ab1d      	add	r3, sp, #116	; 0x74
 800a29c:	9002      	str	r0, [sp, #8]
 800a29e:	9006      	str	r0, [sp, #24]
 800a2a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2a4:	4809      	ldr	r0, [pc, #36]	; (800a2cc <siprintf+0x38>)
 800a2a6:	9107      	str	r1, [sp, #28]
 800a2a8:	9104      	str	r1, [sp, #16]
 800a2aa:	4909      	ldr	r1, [pc, #36]	; (800a2d0 <siprintf+0x3c>)
 800a2ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2b0:	9105      	str	r1, [sp, #20]
 800a2b2:	6800      	ldr	r0, [r0, #0]
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	a902      	add	r1, sp, #8
 800a2b8:	f002 fce0 	bl	800cc7c <_svfiprintf_r>
 800a2bc:	9b02      	ldr	r3, [sp, #8]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	701a      	strb	r2, [r3, #0]
 800a2c2:	b01c      	add	sp, #112	; 0x70
 800a2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2c8:	b003      	add	sp, #12
 800a2ca:	4770      	bx	lr
 800a2cc:	2000000c 	.word	0x2000000c
 800a2d0:	ffff0208 	.word	0xffff0208

0800a2d4 <sulp>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	460d      	mov	r5, r1
 800a2da:	ec45 4b10 	vmov	d0, r4, r5
 800a2de:	4616      	mov	r6, r2
 800a2e0:	f002 fa88 	bl	800c7f4 <__ulp>
 800a2e4:	ec51 0b10 	vmov	r0, r1, d0
 800a2e8:	b17e      	cbz	r6, 800a30a <sulp+0x36>
 800a2ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	dd09      	ble.n	800a30a <sulp+0x36>
 800a2f6:	051b      	lsls	r3, r3, #20
 800a2f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a2fc:	2400      	movs	r4, #0
 800a2fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a302:	4622      	mov	r2, r4
 800a304:	462b      	mov	r3, r5
 800a306:	f7f6 f997 	bl	8000638 <__aeabi_dmul>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	0000      	movs	r0, r0
	...

0800a310 <_strtod_l>:
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	461f      	mov	r7, r3
 800a316:	b0a1      	sub	sp, #132	; 0x84
 800a318:	2300      	movs	r3, #0
 800a31a:	4681      	mov	r9, r0
 800a31c:	4638      	mov	r0, r7
 800a31e:	460e      	mov	r6, r1
 800a320:	9217      	str	r2, [sp, #92]	; 0x5c
 800a322:	931c      	str	r3, [sp, #112]	; 0x70
 800a324:	f001 ff66 	bl	800c1f4 <__localeconv_l>
 800a328:	4680      	mov	r8, r0
 800a32a:	6800      	ldr	r0, [r0, #0]
 800a32c:	f7f5 ff70 	bl	8000210 <strlen>
 800a330:	f04f 0a00 	mov.w	sl, #0
 800a334:	4604      	mov	r4, r0
 800a336:	f04f 0b00 	mov.w	fp, #0
 800a33a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a33c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a33e:	781a      	ldrb	r2, [r3, #0]
 800a340:	2a0d      	cmp	r2, #13
 800a342:	d832      	bhi.n	800a3aa <_strtod_l+0x9a>
 800a344:	2a09      	cmp	r2, #9
 800a346:	d236      	bcs.n	800a3b6 <_strtod_l+0xa6>
 800a348:	2a00      	cmp	r2, #0
 800a34a:	d03e      	beq.n	800a3ca <_strtod_l+0xba>
 800a34c:	2300      	movs	r3, #0
 800a34e:	930d      	str	r3, [sp, #52]	; 0x34
 800a350:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a352:	782b      	ldrb	r3, [r5, #0]
 800a354:	2b30      	cmp	r3, #48	; 0x30
 800a356:	f040 80ac 	bne.w	800a4b2 <_strtod_l+0x1a2>
 800a35a:	786b      	ldrb	r3, [r5, #1]
 800a35c:	2b58      	cmp	r3, #88	; 0x58
 800a35e:	d001      	beq.n	800a364 <_strtod_l+0x54>
 800a360:	2b78      	cmp	r3, #120	; 0x78
 800a362:	d167      	bne.n	800a434 <_strtod_l+0x124>
 800a364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	ab1c      	add	r3, sp, #112	; 0x70
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	9702      	str	r7, [sp, #8]
 800a36e:	ab1d      	add	r3, sp, #116	; 0x74
 800a370:	4a88      	ldr	r2, [pc, #544]	; (800a594 <_strtod_l+0x284>)
 800a372:	a91b      	add	r1, sp, #108	; 0x6c
 800a374:	4648      	mov	r0, r9
 800a376:	f001 fc66 	bl	800bc46 <__gethex>
 800a37a:	f010 0407 	ands.w	r4, r0, #7
 800a37e:	4606      	mov	r6, r0
 800a380:	d005      	beq.n	800a38e <_strtod_l+0x7e>
 800a382:	2c06      	cmp	r4, #6
 800a384:	d12b      	bne.n	800a3de <_strtod_l+0xce>
 800a386:	3501      	adds	r5, #1
 800a388:	2300      	movs	r3, #0
 800a38a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a38c:	930d      	str	r3, [sp, #52]	; 0x34
 800a38e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a390:	2b00      	cmp	r3, #0
 800a392:	f040 859a 	bne.w	800aeca <_strtod_l+0xbba>
 800a396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a398:	b1e3      	cbz	r3, 800a3d4 <_strtod_l+0xc4>
 800a39a:	4652      	mov	r2, sl
 800a39c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a3a0:	ec43 2b10 	vmov	d0, r2, r3
 800a3a4:	b021      	add	sp, #132	; 0x84
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	2a2b      	cmp	r2, #43	; 0x2b
 800a3ac:	d015      	beq.n	800a3da <_strtod_l+0xca>
 800a3ae:	2a2d      	cmp	r2, #45	; 0x2d
 800a3b0:	d004      	beq.n	800a3bc <_strtod_l+0xac>
 800a3b2:	2a20      	cmp	r2, #32
 800a3b4:	d1ca      	bne.n	800a34c <_strtod_l+0x3c>
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3ba:	e7bf      	b.n	800a33c <_strtod_l+0x2c>
 800a3bc:	2201      	movs	r2, #1
 800a3be:	920d      	str	r2, [sp, #52]	; 0x34
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1c2      	bne.n	800a350 <_strtod_l+0x40>
 800a3ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3cc:	961b      	str	r6, [sp, #108]	; 0x6c
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f040 8579 	bne.w	800aec6 <_strtod_l+0xbb6>
 800a3d4:	4652      	mov	r2, sl
 800a3d6:	465b      	mov	r3, fp
 800a3d8:	e7e2      	b.n	800a3a0 <_strtod_l+0x90>
 800a3da:	2200      	movs	r2, #0
 800a3dc:	e7ef      	b.n	800a3be <_strtod_l+0xae>
 800a3de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a3e0:	b13a      	cbz	r2, 800a3f2 <_strtod_l+0xe2>
 800a3e2:	2135      	movs	r1, #53	; 0x35
 800a3e4:	a81e      	add	r0, sp, #120	; 0x78
 800a3e6:	f002 fafd 	bl	800c9e4 <__copybits>
 800a3ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3ec:	4648      	mov	r0, r9
 800a3ee:	f001 ff6a 	bl	800c2c6 <_Bfree>
 800a3f2:	3c01      	subs	r4, #1
 800a3f4:	2c04      	cmp	r4, #4
 800a3f6:	d806      	bhi.n	800a406 <_strtod_l+0xf6>
 800a3f8:	e8df f004 	tbb	[pc, r4]
 800a3fc:	1714030a 	.word	0x1714030a
 800a400:	0a          	.byte	0x0a
 800a401:	00          	.byte	0x00
 800a402:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a406:	0730      	lsls	r0, r6, #28
 800a408:	d5c1      	bpl.n	800a38e <_strtod_l+0x7e>
 800a40a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a40e:	e7be      	b.n	800a38e <_strtod_l+0x7e>
 800a410:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a414:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a416:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a41a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a41e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a422:	e7f0      	b.n	800a406 <_strtod_l+0xf6>
 800a424:	f8df b170 	ldr.w	fp, [pc, #368]	; 800a598 <_strtod_l+0x288>
 800a428:	e7ed      	b.n	800a406 <_strtod_l+0xf6>
 800a42a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a42e:	f04f 3aff 	mov.w	sl, #4294967295
 800a432:	e7e8      	b.n	800a406 <_strtod_l+0xf6>
 800a434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	921b      	str	r2, [sp, #108]	; 0x6c
 800a43a:	785b      	ldrb	r3, [r3, #1]
 800a43c:	2b30      	cmp	r3, #48	; 0x30
 800a43e:	d0f9      	beq.n	800a434 <_strtod_l+0x124>
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0a4      	beq.n	800a38e <_strtod_l+0x7e>
 800a444:	2301      	movs	r3, #1
 800a446:	2500      	movs	r5, #0
 800a448:	9306      	str	r3, [sp, #24]
 800a44a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a44c:	9308      	str	r3, [sp, #32]
 800a44e:	9507      	str	r5, [sp, #28]
 800a450:	9505      	str	r5, [sp, #20]
 800a452:	220a      	movs	r2, #10
 800a454:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a456:	7807      	ldrb	r7, [r0, #0]
 800a458:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a45c:	b2d9      	uxtb	r1, r3
 800a45e:	2909      	cmp	r1, #9
 800a460:	d929      	bls.n	800a4b6 <_strtod_l+0x1a6>
 800a462:	4622      	mov	r2, r4
 800a464:	f8d8 1000 	ldr.w	r1, [r8]
 800a468:	f002 fd10 	bl	800ce8c <strncmp>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d031      	beq.n	800a4d4 <_strtod_l+0x1c4>
 800a470:	2000      	movs	r0, #0
 800a472:	9c05      	ldr	r4, [sp, #20]
 800a474:	9004      	str	r0, [sp, #16]
 800a476:	463b      	mov	r3, r7
 800a478:	4602      	mov	r2, r0
 800a47a:	2b65      	cmp	r3, #101	; 0x65
 800a47c:	d001      	beq.n	800a482 <_strtod_l+0x172>
 800a47e:	2b45      	cmp	r3, #69	; 0x45
 800a480:	d114      	bne.n	800a4ac <_strtod_l+0x19c>
 800a482:	b924      	cbnz	r4, 800a48e <_strtod_l+0x17e>
 800a484:	b910      	cbnz	r0, 800a48c <_strtod_l+0x17c>
 800a486:	9b06      	ldr	r3, [sp, #24]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d09e      	beq.n	800a3ca <_strtod_l+0xba>
 800a48c:	2400      	movs	r4, #0
 800a48e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a490:	1c73      	adds	r3, r6, #1
 800a492:	931b      	str	r3, [sp, #108]	; 0x6c
 800a494:	7873      	ldrb	r3, [r6, #1]
 800a496:	2b2b      	cmp	r3, #43	; 0x2b
 800a498:	d078      	beq.n	800a58c <_strtod_l+0x27c>
 800a49a:	2b2d      	cmp	r3, #45	; 0x2d
 800a49c:	d070      	beq.n	800a580 <_strtod_l+0x270>
 800a49e:	f04f 0c00 	mov.w	ip, #0
 800a4a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a4a6:	2f09      	cmp	r7, #9
 800a4a8:	d97c      	bls.n	800a5a4 <_strtod_l+0x294>
 800a4aa:	961b      	str	r6, [sp, #108]	; 0x6c
 800a4ac:	f04f 0e00 	mov.w	lr, #0
 800a4b0:	e09a      	b.n	800a5e8 <_strtod_l+0x2d8>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e7c7      	b.n	800a446 <_strtod_l+0x136>
 800a4b6:	9905      	ldr	r1, [sp, #20]
 800a4b8:	2908      	cmp	r1, #8
 800a4ba:	bfdd      	ittte	le
 800a4bc:	9907      	ldrle	r1, [sp, #28]
 800a4be:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4c2:	9307      	strle	r3, [sp, #28]
 800a4c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a4c8:	9b05      	ldr	r3, [sp, #20]
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	9305      	str	r3, [sp, #20]
 800a4d0:	901b      	str	r0, [sp, #108]	; 0x6c
 800a4d2:	e7bf      	b.n	800a454 <_strtod_l+0x144>
 800a4d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4d6:	191a      	adds	r2, r3, r4
 800a4d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4da:	9a05      	ldr	r2, [sp, #20]
 800a4dc:	5d1b      	ldrb	r3, [r3, r4]
 800a4de:	2a00      	cmp	r2, #0
 800a4e0:	d037      	beq.n	800a552 <_strtod_l+0x242>
 800a4e2:	9c05      	ldr	r4, [sp, #20]
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a4ea:	2909      	cmp	r1, #9
 800a4ec:	d913      	bls.n	800a516 <_strtod_l+0x206>
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	9104      	str	r1, [sp, #16]
 800a4f2:	e7c2      	b.n	800a47a <_strtod_l+0x16a>
 800a4f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4f6:	1c5a      	adds	r2, r3, #1
 800a4f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	2b30      	cmp	r3, #48	; 0x30
 800a500:	d0f8      	beq.n	800a4f4 <_strtod_l+0x1e4>
 800a502:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a506:	2a08      	cmp	r2, #8
 800a508:	f200 84e4 	bhi.w	800aed4 <_strtod_l+0xbc4>
 800a50c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a50e:	9208      	str	r2, [sp, #32]
 800a510:	4602      	mov	r2, r0
 800a512:	2000      	movs	r0, #0
 800a514:	4604      	mov	r4, r0
 800a516:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a51a:	f100 0101 	add.w	r1, r0, #1
 800a51e:	d012      	beq.n	800a546 <_strtod_l+0x236>
 800a520:	440a      	add	r2, r1
 800a522:	eb00 0c04 	add.w	ip, r0, r4
 800a526:	4621      	mov	r1, r4
 800a528:	270a      	movs	r7, #10
 800a52a:	458c      	cmp	ip, r1
 800a52c:	d113      	bne.n	800a556 <_strtod_l+0x246>
 800a52e:	1821      	adds	r1, r4, r0
 800a530:	2908      	cmp	r1, #8
 800a532:	f104 0401 	add.w	r4, r4, #1
 800a536:	4404      	add	r4, r0
 800a538:	dc19      	bgt.n	800a56e <_strtod_l+0x25e>
 800a53a:	9b07      	ldr	r3, [sp, #28]
 800a53c:	210a      	movs	r1, #10
 800a53e:	fb01 e303 	mla	r3, r1, r3, lr
 800a542:	9307      	str	r3, [sp, #28]
 800a544:	2100      	movs	r1, #0
 800a546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a548:	1c58      	adds	r0, r3, #1
 800a54a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a54c:	785b      	ldrb	r3, [r3, #1]
 800a54e:	4608      	mov	r0, r1
 800a550:	e7c9      	b.n	800a4e6 <_strtod_l+0x1d6>
 800a552:	9805      	ldr	r0, [sp, #20]
 800a554:	e7d3      	b.n	800a4fe <_strtod_l+0x1ee>
 800a556:	2908      	cmp	r1, #8
 800a558:	f101 0101 	add.w	r1, r1, #1
 800a55c:	dc03      	bgt.n	800a566 <_strtod_l+0x256>
 800a55e:	9b07      	ldr	r3, [sp, #28]
 800a560:	437b      	muls	r3, r7
 800a562:	9307      	str	r3, [sp, #28]
 800a564:	e7e1      	b.n	800a52a <_strtod_l+0x21a>
 800a566:	2910      	cmp	r1, #16
 800a568:	bfd8      	it	le
 800a56a:	437d      	mulle	r5, r7
 800a56c:	e7dd      	b.n	800a52a <_strtod_l+0x21a>
 800a56e:	2c10      	cmp	r4, #16
 800a570:	bfdc      	itt	le
 800a572:	210a      	movle	r1, #10
 800a574:	fb01 e505 	mlale	r5, r1, r5, lr
 800a578:	e7e4      	b.n	800a544 <_strtod_l+0x234>
 800a57a:	2301      	movs	r3, #1
 800a57c:	9304      	str	r3, [sp, #16]
 800a57e:	e781      	b.n	800a484 <_strtod_l+0x174>
 800a580:	f04f 0c01 	mov.w	ip, #1
 800a584:	1cb3      	adds	r3, r6, #2
 800a586:	931b      	str	r3, [sp, #108]	; 0x6c
 800a588:	78b3      	ldrb	r3, [r6, #2]
 800a58a:	e78a      	b.n	800a4a2 <_strtod_l+0x192>
 800a58c:	f04f 0c00 	mov.w	ip, #0
 800a590:	e7f8      	b.n	800a584 <_strtod_l+0x274>
 800a592:	bf00      	nop
 800a594:	0800d144 	.word	0x0800d144
 800a598:	7ff00000 	.word	0x7ff00000
 800a59c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a59e:	1c5f      	adds	r7, r3, #1
 800a5a0:	971b      	str	r7, [sp, #108]	; 0x6c
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	2b30      	cmp	r3, #48	; 0x30
 800a5a6:	d0f9      	beq.n	800a59c <_strtod_l+0x28c>
 800a5a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a5ac:	2f08      	cmp	r7, #8
 800a5ae:	f63f af7d 	bhi.w	800a4ac <_strtod_l+0x19c>
 800a5b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a5b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a5ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5bc:	1c5f      	adds	r7, r3, #1
 800a5be:	971b      	str	r7, [sp, #108]	; 0x6c
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a5c6:	f1b8 0f09 	cmp.w	r8, #9
 800a5ca:	d937      	bls.n	800a63c <_strtod_l+0x32c>
 800a5cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5ce:	1a7f      	subs	r7, r7, r1
 800a5d0:	2f08      	cmp	r7, #8
 800a5d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a5d6:	dc37      	bgt.n	800a648 <_strtod_l+0x338>
 800a5d8:	45be      	cmp	lr, r7
 800a5da:	bfa8      	it	ge
 800a5dc:	46be      	movge	lr, r7
 800a5de:	f1bc 0f00 	cmp.w	ip, #0
 800a5e2:	d001      	beq.n	800a5e8 <_strtod_l+0x2d8>
 800a5e4:	f1ce 0e00 	rsb	lr, lr, #0
 800a5e8:	2c00      	cmp	r4, #0
 800a5ea:	d151      	bne.n	800a690 <_strtod_l+0x380>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	f47f aece 	bne.w	800a38e <_strtod_l+0x7e>
 800a5f2:	9a06      	ldr	r2, [sp, #24]
 800a5f4:	2a00      	cmp	r2, #0
 800a5f6:	f47f aeca 	bne.w	800a38e <_strtod_l+0x7e>
 800a5fa:	9a04      	ldr	r2, [sp, #16]
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	f47f aee4 	bne.w	800a3ca <_strtod_l+0xba>
 800a602:	2b4e      	cmp	r3, #78	; 0x4e
 800a604:	d027      	beq.n	800a656 <_strtod_l+0x346>
 800a606:	dc21      	bgt.n	800a64c <_strtod_l+0x33c>
 800a608:	2b49      	cmp	r3, #73	; 0x49
 800a60a:	f47f aede 	bne.w	800a3ca <_strtod_l+0xba>
 800a60e:	49a0      	ldr	r1, [pc, #640]	; (800a890 <_strtod_l+0x580>)
 800a610:	a81b      	add	r0, sp, #108	; 0x6c
 800a612:	f001 fd4b 	bl	800c0ac <__match>
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f aed7 	beq.w	800a3ca <_strtod_l+0xba>
 800a61c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a61e:	499d      	ldr	r1, [pc, #628]	; (800a894 <_strtod_l+0x584>)
 800a620:	3b01      	subs	r3, #1
 800a622:	a81b      	add	r0, sp, #108	; 0x6c
 800a624:	931b      	str	r3, [sp, #108]	; 0x6c
 800a626:	f001 fd41 	bl	800c0ac <__match>
 800a62a:	b910      	cbnz	r0, 800a632 <_strtod_l+0x322>
 800a62c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a62e:	3301      	adds	r3, #1
 800a630:	931b      	str	r3, [sp, #108]	; 0x6c
 800a632:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a8a8 <_strtod_l+0x598>
 800a636:	f04f 0a00 	mov.w	sl, #0
 800a63a:	e6a8      	b.n	800a38e <_strtod_l+0x7e>
 800a63c:	210a      	movs	r1, #10
 800a63e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a642:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a646:	e7b8      	b.n	800a5ba <_strtod_l+0x2aa>
 800a648:	46be      	mov	lr, r7
 800a64a:	e7c8      	b.n	800a5de <_strtod_l+0x2ce>
 800a64c:	2b69      	cmp	r3, #105	; 0x69
 800a64e:	d0de      	beq.n	800a60e <_strtod_l+0x2fe>
 800a650:	2b6e      	cmp	r3, #110	; 0x6e
 800a652:	f47f aeba 	bne.w	800a3ca <_strtod_l+0xba>
 800a656:	4990      	ldr	r1, [pc, #576]	; (800a898 <_strtod_l+0x588>)
 800a658:	a81b      	add	r0, sp, #108	; 0x6c
 800a65a:	f001 fd27 	bl	800c0ac <__match>
 800a65e:	2800      	cmp	r0, #0
 800a660:	f43f aeb3 	beq.w	800a3ca <_strtod_l+0xba>
 800a664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	2b28      	cmp	r3, #40	; 0x28
 800a66a:	d10e      	bne.n	800a68a <_strtod_l+0x37a>
 800a66c:	aa1e      	add	r2, sp, #120	; 0x78
 800a66e:	498b      	ldr	r1, [pc, #556]	; (800a89c <_strtod_l+0x58c>)
 800a670:	a81b      	add	r0, sp, #108	; 0x6c
 800a672:	f001 fd2f 	bl	800c0d4 <__hexnan>
 800a676:	2805      	cmp	r0, #5
 800a678:	d107      	bne.n	800a68a <_strtod_l+0x37a>
 800a67a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a67c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800a680:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a684:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a688:	e681      	b.n	800a38e <_strtod_l+0x7e>
 800a68a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a8b0 <_strtod_l+0x5a0>
 800a68e:	e7d2      	b.n	800a636 <_strtod_l+0x326>
 800a690:	ebae 0302 	sub.w	r3, lr, r2
 800a694:	9306      	str	r3, [sp, #24]
 800a696:	9b05      	ldr	r3, [sp, #20]
 800a698:	9807      	ldr	r0, [sp, #28]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	bf08      	it	eq
 800a69e:	4623      	moveq	r3, r4
 800a6a0:	2c10      	cmp	r4, #16
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	46a0      	mov	r8, r4
 800a6a6:	bfa8      	it	ge
 800a6a8:	f04f 0810 	movge.w	r8, #16
 800a6ac:	f7f5 ff4a 	bl	8000544 <__aeabi_ui2d>
 800a6b0:	2c09      	cmp	r4, #9
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	468b      	mov	fp, r1
 800a6b6:	dc13      	bgt.n	800a6e0 <_strtod_l+0x3d0>
 800a6b8:	9b06      	ldr	r3, [sp, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f43f ae67 	beq.w	800a38e <_strtod_l+0x7e>
 800a6c0:	9b06      	ldr	r3, [sp, #24]
 800a6c2:	dd7a      	ble.n	800a7ba <_strtod_l+0x4aa>
 800a6c4:	2b16      	cmp	r3, #22
 800a6c6:	dc61      	bgt.n	800a78c <_strtod_l+0x47c>
 800a6c8:	4a75      	ldr	r2, [pc, #468]	; (800a8a0 <_strtod_l+0x590>)
 800a6ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a6ce:	e9de 0100 	ldrd	r0, r1, [lr]
 800a6d2:	4652      	mov	r2, sl
 800a6d4:	465b      	mov	r3, fp
 800a6d6:	f7f5 ffaf 	bl	8000638 <__aeabi_dmul>
 800a6da:	4682      	mov	sl, r0
 800a6dc:	468b      	mov	fp, r1
 800a6de:	e656      	b.n	800a38e <_strtod_l+0x7e>
 800a6e0:	4b6f      	ldr	r3, [pc, #444]	; (800a8a0 <_strtod_l+0x590>)
 800a6e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a6e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6ea:	f7f5 ffa5 	bl	8000638 <__aeabi_dmul>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	f7f5 ff26 	bl	8000544 <__aeabi_ui2d>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	4639      	mov	r1, r7
 800a700:	f7f5 fde4 	bl	80002cc <__adddf3>
 800a704:	2c0f      	cmp	r4, #15
 800a706:	4682      	mov	sl, r0
 800a708:	468b      	mov	fp, r1
 800a70a:	ddd5      	ble.n	800a6b8 <_strtod_l+0x3a8>
 800a70c:	9b06      	ldr	r3, [sp, #24]
 800a70e:	eba4 0808 	sub.w	r8, r4, r8
 800a712:	4498      	add	r8, r3
 800a714:	f1b8 0f00 	cmp.w	r8, #0
 800a718:	f340 8096 	ble.w	800a848 <_strtod_l+0x538>
 800a71c:	f018 030f 	ands.w	r3, r8, #15
 800a720:	d00a      	beq.n	800a738 <_strtod_l+0x428>
 800a722:	495f      	ldr	r1, [pc, #380]	; (800a8a0 <_strtod_l+0x590>)
 800a724:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a728:	4652      	mov	r2, sl
 800a72a:	465b      	mov	r3, fp
 800a72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a730:	f7f5 ff82 	bl	8000638 <__aeabi_dmul>
 800a734:	4682      	mov	sl, r0
 800a736:	468b      	mov	fp, r1
 800a738:	f038 080f 	bics.w	r8, r8, #15
 800a73c:	d073      	beq.n	800a826 <_strtod_l+0x516>
 800a73e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a742:	dd47      	ble.n	800a7d4 <_strtod_l+0x4c4>
 800a744:	2400      	movs	r4, #0
 800a746:	46a0      	mov	r8, r4
 800a748:	9407      	str	r4, [sp, #28]
 800a74a:	9405      	str	r4, [sp, #20]
 800a74c:	2322      	movs	r3, #34	; 0x22
 800a74e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a8a8 <_strtod_l+0x598>
 800a752:	f8c9 3000 	str.w	r3, [r9]
 800a756:	f04f 0a00 	mov.w	sl, #0
 800a75a:	9b07      	ldr	r3, [sp, #28]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f43f ae16 	beq.w	800a38e <_strtod_l+0x7e>
 800a762:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a764:	4648      	mov	r0, r9
 800a766:	f001 fdae 	bl	800c2c6 <_Bfree>
 800a76a:	9905      	ldr	r1, [sp, #20]
 800a76c:	4648      	mov	r0, r9
 800a76e:	f001 fdaa 	bl	800c2c6 <_Bfree>
 800a772:	4641      	mov	r1, r8
 800a774:	4648      	mov	r0, r9
 800a776:	f001 fda6 	bl	800c2c6 <_Bfree>
 800a77a:	9907      	ldr	r1, [sp, #28]
 800a77c:	4648      	mov	r0, r9
 800a77e:	f001 fda2 	bl	800c2c6 <_Bfree>
 800a782:	4621      	mov	r1, r4
 800a784:	4648      	mov	r0, r9
 800a786:	f001 fd9e 	bl	800c2c6 <_Bfree>
 800a78a:	e600      	b.n	800a38e <_strtod_l+0x7e>
 800a78c:	9a06      	ldr	r2, [sp, #24]
 800a78e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a792:	4293      	cmp	r3, r2
 800a794:	dbba      	blt.n	800a70c <_strtod_l+0x3fc>
 800a796:	4d42      	ldr	r5, [pc, #264]	; (800a8a0 <_strtod_l+0x590>)
 800a798:	f1c4 040f 	rsb	r4, r4, #15
 800a79c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a7a0:	4652      	mov	r2, sl
 800a7a2:	465b      	mov	r3, fp
 800a7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a8:	f7f5 ff46 	bl	8000638 <__aeabi_dmul>
 800a7ac:	9b06      	ldr	r3, [sp, #24]
 800a7ae:	1b1c      	subs	r4, r3, r4
 800a7b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a7b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7b8:	e78d      	b.n	800a6d6 <_strtod_l+0x3c6>
 800a7ba:	f113 0f16 	cmn.w	r3, #22
 800a7be:	dba5      	blt.n	800a70c <_strtod_l+0x3fc>
 800a7c0:	4a37      	ldr	r2, [pc, #220]	; (800a8a0 <_strtod_l+0x590>)
 800a7c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a7c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a7ca:	4650      	mov	r0, sl
 800a7cc:	4659      	mov	r1, fp
 800a7ce:	f7f6 f85d 	bl	800088c <__aeabi_ddiv>
 800a7d2:	e782      	b.n	800a6da <_strtod_l+0x3ca>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4e33      	ldr	r6, [pc, #204]	; (800a8a4 <_strtod_l+0x594>)
 800a7d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a7dc:	4650      	mov	r0, sl
 800a7de:	4659      	mov	r1, fp
 800a7e0:	461d      	mov	r5, r3
 800a7e2:	f1b8 0f01 	cmp.w	r8, #1
 800a7e6:	dc21      	bgt.n	800a82c <_strtod_l+0x51c>
 800a7e8:	b10b      	cbz	r3, 800a7ee <_strtod_l+0x4de>
 800a7ea:	4682      	mov	sl, r0
 800a7ec:	468b      	mov	fp, r1
 800a7ee:	4b2d      	ldr	r3, [pc, #180]	; (800a8a4 <_strtod_l+0x594>)
 800a7f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a7f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a7f8:	4652      	mov	r2, sl
 800a7fa:	465b      	mov	r3, fp
 800a7fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a800:	f7f5 ff1a 	bl	8000638 <__aeabi_dmul>
 800a804:	4b28      	ldr	r3, [pc, #160]	; (800a8a8 <_strtod_l+0x598>)
 800a806:	460a      	mov	r2, r1
 800a808:	400b      	ands	r3, r1
 800a80a:	4928      	ldr	r1, [pc, #160]	; (800a8ac <_strtod_l+0x59c>)
 800a80c:	428b      	cmp	r3, r1
 800a80e:	4682      	mov	sl, r0
 800a810:	d898      	bhi.n	800a744 <_strtod_l+0x434>
 800a812:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a816:	428b      	cmp	r3, r1
 800a818:	bf86      	itte	hi
 800a81a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a8b4 <_strtod_l+0x5a4>
 800a81e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a822:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a826:	2300      	movs	r3, #0
 800a828:	9304      	str	r3, [sp, #16]
 800a82a:	e077      	b.n	800a91c <_strtod_l+0x60c>
 800a82c:	f018 0f01 	tst.w	r8, #1
 800a830:	d006      	beq.n	800a840 <_strtod_l+0x530>
 800a832:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	f7f5 fefd 	bl	8000638 <__aeabi_dmul>
 800a83e:	2301      	movs	r3, #1
 800a840:	3501      	adds	r5, #1
 800a842:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a846:	e7cc      	b.n	800a7e2 <_strtod_l+0x4d2>
 800a848:	d0ed      	beq.n	800a826 <_strtod_l+0x516>
 800a84a:	f1c8 0800 	rsb	r8, r8, #0
 800a84e:	f018 020f 	ands.w	r2, r8, #15
 800a852:	d00a      	beq.n	800a86a <_strtod_l+0x55a>
 800a854:	4b12      	ldr	r3, [pc, #72]	; (800a8a0 <_strtod_l+0x590>)
 800a856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a85a:	4650      	mov	r0, sl
 800a85c:	4659      	mov	r1, fp
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f6 f813 	bl	800088c <__aeabi_ddiv>
 800a866:	4682      	mov	sl, r0
 800a868:	468b      	mov	fp, r1
 800a86a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a86e:	d0da      	beq.n	800a826 <_strtod_l+0x516>
 800a870:	f1b8 0f1f 	cmp.w	r8, #31
 800a874:	dd20      	ble.n	800a8b8 <_strtod_l+0x5a8>
 800a876:	2400      	movs	r4, #0
 800a878:	46a0      	mov	r8, r4
 800a87a:	9407      	str	r4, [sp, #28]
 800a87c:	9405      	str	r4, [sp, #20]
 800a87e:	2322      	movs	r3, #34	; 0x22
 800a880:	f04f 0a00 	mov.w	sl, #0
 800a884:	f04f 0b00 	mov.w	fp, #0
 800a888:	f8c9 3000 	str.w	r3, [r9]
 800a88c:	e765      	b.n	800a75a <_strtod_l+0x44a>
 800a88e:	bf00      	nop
 800a890:	0800d115 	.word	0x0800d115
 800a894:	0800d19b 	.word	0x0800d19b
 800a898:	0800d11d 	.word	0x0800d11d
 800a89c:	0800d158 	.word	0x0800d158
 800a8a0:	0800d1d8 	.word	0x0800d1d8
 800a8a4:	0800d1b0 	.word	0x0800d1b0
 800a8a8:	7ff00000 	.word	0x7ff00000
 800a8ac:	7ca00000 	.word	0x7ca00000
 800a8b0:	fff80000 	.word	0xfff80000
 800a8b4:	7fefffff 	.word	0x7fefffff
 800a8b8:	f018 0310 	ands.w	r3, r8, #16
 800a8bc:	bf18      	it	ne
 800a8be:	236a      	movne	r3, #106	; 0x6a
 800a8c0:	4da0      	ldr	r5, [pc, #640]	; (800ab44 <_strtod_l+0x834>)
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	4650      	mov	r0, sl
 800a8c6:	4659      	mov	r1, fp
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f1b8 0f00 	cmp.w	r8, #0
 800a8ce:	f300 810a 	bgt.w	800aae6 <_strtod_l+0x7d6>
 800a8d2:	b10b      	cbz	r3, 800a8d8 <_strtod_l+0x5c8>
 800a8d4:	4682      	mov	sl, r0
 800a8d6:	468b      	mov	fp, r1
 800a8d8:	9b04      	ldr	r3, [sp, #16]
 800a8da:	b1bb      	cbz	r3, 800a90c <_strtod_l+0x5fc>
 800a8dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a8e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	4659      	mov	r1, fp
 800a8e8:	dd10      	ble.n	800a90c <_strtod_l+0x5fc>
 800a8ea:	2b1f      	cmp	r3, #31
 800a8ec:	f340 8107 	ble.w	800aafe <_strtod_l+0x7ee>
 800a8f0:	2b34      	cmp	r3, #52	; 0x34
 800a8f2:	bfde      	ittt	le
 800a8f4:	3b20      	suble	r3, #32
 800a8f6:	f04f 32ff 	movle.w	r2, #4294967295
 800a8fa:	fa02 f303 	lslle.w	r3, r2, r3
 800a8fe:	f04f 0a00 	mov.w	sl, #0
 800a902:	bfcc      	ite	gt
 800a904:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a908:	ea03 0b01 	andle.w	fp, r3, r1
 800a90c:	2200      	movs	r2, #0
 800a90e:	2300      	movs	r3, #0
 800a910:	4650      	mov	r0, sl
 800a912:	4659      	mov	r1, fp
 800a914:	f7f6 f8f8 	bl	8000b08 <__aeabi_dcmpeq>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d1ac      	bne.n	800a876 <_strtod_l+0x566>
 800a91c:	9b07      	ldr	r3, [sp, #28]
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	9a05      	ldr	r2, [sp, #20]
 800a922:	9908      	ldr	r1, [sp, #32]
 800a924:	4623      	mov	r3, r4
 800a926:	4648      	mov	r0, r9
 800a928:	f001 fd1f 	bl	800c36a <__s2b>
 800a92c:	9007      	str	r0, [sp, #28]
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f af08 	beq.w	800a744 <_strtod_l+0x434>
 800a934:	9a06      	ldr	r2, [sp, #24]
 800a936:	9b06      	ldr	r3, [sp, #24]
 800a938:	2a00      	cmp	r2, #0
 800a93a:	f1c3 0300 	rsb	r3, r3, #0
 800a93e:	bfa8      	it	ge
 800a940:	2300      	movge	r3, #0
 800a942:	930e      	str	r3, [sp, #56]	; 0x38
 800a944:	2400      	movs	r4, #0
 800a946:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a94a:	9316      	str	r3, [sp, #88]	; 0x58
 800a94c:	46a0      	mov	r8, r4
 800a94e:	9b07      	ldr	r3, [sp, #28]
 800a950:	4648      	mov	r0, r9
 800a952:	6859      	ldr	r1, [r3, #4]
 800a954:	f001 fc83 	bl	800c25e <_Balloc>
 800a958:	9005      	str	r0, [sp, #20]
 800a95a:	2800      	cmp	r0, #0
 800a95c:	f43f aef6 	beq.w	800a74c <_strtod_l+0x43c>
 800a960:	9b07      	ldr	r3, [sp, #28]
 800a962:	691a      	ldr	r2, [r3, #16]
 800a964:	3202      	adds	r2, #2
 800a966:	f103 010c 	add.w	r1, r3, #12
 800a96a:	0092      	lsls	r2, r2, #2
 800a96c:	300c      	adds	r0, #12
 800a96e:	f001 fc6b 	bl	800c248 <memcpy>
 800a972:	aa1e      	add	r2, sp, #120	; 0x78
 800a974:	a91d      	add	r1, sp, #116	; 0x74
 800a976:	ec4b ab10 	vmov	d0, sl, fp
 800a97a:	4648      	mov	r0, r9
 800a97c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a980:	f001 ffae 	bl	800c8e0 <__d2b>
 800a984:	901c      	str	r0, [sp, #112]	; 0x70
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f aee0 	beq.w	800a74c <_strtod_l+0x43c>
 800a98c:	2101      	movs	r1, #1
 800a98e:	4648      	mov	r0, r9
 800a990:	f001 fd77 	bl	800c482 <__i2b>
 800a994:	4680      	mov	r8, r0
 800a996:	2800      	cmp	r0, #0
 800a998:	f43f aed8 	beq.w	800a74c <_strtod_l+0x43c>
 800a99c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a99e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a9a0:	2e00      	cmp	r6, #0
 800a9a2:	bfab      	itete	ge
 800a9a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a9a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a9a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a9aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a9ac:	bfac      	ite	ge
 800a9ae:	18f7      	addge	r7, r6, r3
 800a9b0:	1b9d      	sublt	r5, r3, r6
 800a9b2:	9b04      	ldr	r3, [sp, #16]
 800a9b4:	1af6      	subs	r6, r6, r3
 800a9b6:	4416      	add	r6, r2
 800a9b8:	4b63      	ldr	r3, [pc, #396]	; (800ab48 <_strtod_l+0x838>)
 800a9ba:	3e01      	subs	r6, #1
 800a9bc:	429e      	cmp	r6, r3
 800a9be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9c2:	f280 80af 	bge.w	800ab24 <_strtod_l+0x814>
 800a9c6:	1b9b      	subs	r3, r3, r6
 800a9c8:	2b1f      	cmp	r3, #31
 800a9ca:	eba2 0203 	sub.w	r2, r2, r3
 800a9ce:	f04f 0101 	mov.w	r1, #1
 800a9d2:	f300 809b 	bgt.w	800ab0c <_strtod_l+0x7fc>
 800a9d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9da:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9dc:	2300      	movs	r3, #0
 800a9de:	930a      	str	r3, [sp, #40]	; 0x28
 800a9e0:	18be      	adds	r6, r7, r2
 800a9e2:	9b04      	ldr	r3, [sp, #16]
 800a9e4:	42b7      	cmp	r7, r6
 800a9e6:	4415      	add	r5, r2
 800a9e8:	441d      	add	r5, r3
 800a9ea:	463b      	mov	r3, r7
 800a9ec:	bfa8      	it	ge
 800a9ee:	4633      	movge	r3, r6
 800a9f0:	42ab      	cmp	r3, r5
 800a9f2:	bfa8      	it	ge
 800a9f4:	462b      	movge	r3, r5
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bfc2      	ittt	gt
 800a9fa:	1af6      	subgt	r6, r6, r3
 800a9fc:	1aed      	subgt	r5, r5, r3
 800a9fe:	1aff      	subgt	r7, r7, r3
 800aa00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa02:	b1bb      	cbz	r3, 800aa34 <_strtod_l+0x724>
 800aa04:	4641      	mov	r1, r8
 800aa06:	461a      	mov	r2, r3
 800aa08:	4648      	mov	r0, r9
 800aa0a:	f001 fdd9 	bl	800c5c0 <__pow5mult>
 800aa0e:	4680      	mov	r8, r0
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f43f ae9b 	beq.w	800a74c <_strtod_l+0x43c>
 800aa16:	4601      	mov	r1, r0
 800aa18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa1a:	4648      	mov	r0, r9
 800aa1c:	f001 fd3a 	bl	800c494 <__multiply>
 800aa20:	900c      	str	r0, [sp, #48]	; 0x30
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f43f ae92 	beq.w	800a74c <_strtod_l+0x43c>
 800aa28:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa2a:	4648      	mov	r0, r9
 800aa2c:	f001 fc4b 	bl	800c2c6 <_Bfree>
 800aa30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa32:	931c      	str	r3, [sp, #112]	; 0x70
 800aa34:	2e00      	cmp	r6, #0
 800aa36:	dc7a      	bgt.n	800ab2e <_strtod_l+0x81e>
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dd08      	ble.n	800aa50 <_strtod_l+0x740>
 800aa3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa40:	9905      	ldr	r1, [sp, #20]
 800aa42:	4648      	mov	r0, r9
 800aa44:	f001 fdbc 	bl	800c5c0 <__pow5mult>
 800aa48:	9005      	str	r0, [sp, #20]
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	f43f ae7e 	beq.w	800a74c <_strtod_l+0x43c>
 800aa50:	2d00      	cmp	r5, #0
 800aa52:	dd08      	ble.n	800aa66 <_strtod_l+0x756>
 800aa54:	462a      	mov	r2, r5
 800aa56:	9905      	ldr	r1, [sp, #20]
 800aa58:	4648      	mov	r0, r9
 800aa5a:	f001 fdff 	bl	800c65c <__lshift>
 800aa5e:	9005      	str	r0, [sp, #20]
 800aa60:	2800      	cmp	r0, #0
 800aa62:	f43f ae73 	beq.w	800a74c <_strtod_l+0x43c>
 800aa66:	2f00      	cmp	r7, #0
 800aa68:	dd08      	ble.n	800aa7c <_strtod_l+0x76c>
 800aa6a:	4641      	mov	r1, r8
 800aa6c:	463a      	mov	r2, r7
 800aa6e:	4648      	mov	r0, r9
 800aa70:	f001 fdf4 	bl	800c65c <__lshift>
 800aa74:	4680      	mov	r8, r0
 800aa76:	2800      	cmp	r0, #0
 800aa78:	f43f ae68 	beq.w	800a74c <_strtod_l+0x43c>
 800aa7c:	9a05      	ldr	r2, [sp, #20]
 800aa7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa80:	4648      	mov	r0, r9
 800aa82:	f001 fe59 	bl	800c738 <__mdiff>
 800aa86:	4604      	mov	r4, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	f43f ae5f 	beq.w	800a74c <_strtod_l+0x43c>
 800aa8e:	68c3      	ldr	r3, [r0, #12]
 800aa90:	930c      	str	r3, [sp, #48]	; 0x30
 800aa92:	2300      	movs	r3, #0
 800aa94:	60c3      	str	r3, [r0, #12]
 800aa96:	4641      	mov	r1, r8
 800aa98:	f001 fe34 	bl	800c704 <__mcmp>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	da55      	bge.n	800ab4c <_strtod_l+0x83c>
 800aaa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaa2:	b9e3      	cbnz	r3, 800aade <_strtod_l+0x7ce>
 800aaa4:	f1ba 0f00 	cmp.w	sl, #0
 800aaa8:	d119      	bne.n	800aade <_strtod_l+0x7ce>
 800aaaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaae:	b9b3      	cbnz	r3, 800aade <_strtod_l+0x7ce>
 800aab0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aab4:	0d1b      	lsrs	r3, r3, #20
 800aab6:	051b      	lsls	r3, r3, #20
 800aab8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aabc:	d90f      	bls.n	800aade <_strtod_l+0x7ce>
 800aabe:	6963      	ldr	r3, [r4, #20]
 800aac0:	b913      	cbnz	r3, 800aac8 <_strtod_l+0x7b8>
 800aac2:	6923      	ldr	r3, [r4, #16]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	dd0a      	ble.n	800aade <_strtod_l+0x7ce>
 800aac8:	4621      	mov	r1, r4
 800aaca:	2201      	movs	r2, #1
 800aacc:	4648      	mov	r0, r9
 800aace:	f001 fdc5 	bl	800c65c <__lshift>
 800aad2:	4641      	mov	r1, r8
 800aad4:	4604      	mov	r4, r0
 800aad6:	f001 fe15 	bl	800c704 <__mcmp>
 800aada:	2800      	cmp	r0, #0
 800aadc:	dc67      	bgt.n	800abae <_strtod_l+0x89e>
 800aade:	9b04      	ldr	r3, [sp, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d171      	bne.n	800abc8 <_strtod_l+0x8b8>
 800aae4:	e63d      	b.n	800a762 <_strtod_l+0x452>
 800aae6:	f018 0f01 	tst.w	r8, #1
 800aaea:	d004      	beq.n	800aaf6 <_strtod_l+0x7e6>
 800aaec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aaf0:	f7f5 fda2 	bl	8000638 <__aeabi_dmul>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aafa:	3508      	adds	r5, #8
 800aafc:	e6e5      	b.n	800a8ca <_strtod_l+0x5ba>
 800aafe:	f04f 32ff 	mov.w	r2, #4294967295
 800ab02:	fa02 f303 	lsl.w	r3, r2, r3
 800ab06:	ea03 0a0a 	and.w	sl, r3, sl
 800ab0a:	e6ff      	b.n	800a90c <_strtod_l+0x5fc>
 800ab0c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ab10:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ab14:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ab18:	36e2      	adds	r6, #226	; 0xe2
 800ab1a:	fa01 f306 	lsl.w	r3, r1, r6
 800ab1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab20:	910f      	str	r1, [sp, #60]	; 0x3c
 800ab22:	e75d      	b.n	800a9e0 <_strtod_l+0x6d0>
 800ab24:	2300      	movs	r3, #0
 800ab26:	930a      	str	r3, [sp, #40]	; 0x28
 800ab28:	2301      	movs	r3, #1
 800ab2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab2c:	e758      	b.n	800a9e0 <_strtod_l+0x6d0>
 800ab2e:	4632      	mov	r2, r6
 800ab30:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab32:	4648      	mov	r0, r9
 800ab34:	f001 fd92 	bl	800c65c <__lshift>
 800ab38:	901c      	str	r0, [sp, #112]	; 0x70
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	f47f af7c 	bne.w	800aa38 <_strtod_l+0x728>
 800ab40:	e604      	b.n	800a74c <_strtod_l+0x43c>
 800ab42:	bf00      	nop
 800ab44:	0800d170 	.word	0x0800d170
 800ab48:	fffffc02 	.word	0xfffffc02
 800ab4c:	465d      	mov	r5, fp
 800ab4e:	f040 8086 	bne.w	800ac5e <_strtod_l+0x94e>
 800ab52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab58:	b32a      	cbz	r2, 800aba6 <_strtod_l+0x896>
 800ab5a:	4aaf      	ldr	r2, [pc, #700]	; (800ae18 <_strtod_l+0xb08>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d153      	bne.n	800ac08 <_strtod_l+0x8f8>
 800ab60:	9b04      	ldr	r3, [sp, #16]
 800ab62:	4650      	mov	r0, sl
 800ab64:	b1d3      	cbz	r3, 800ab9c <_strtod_l+0x88c>
 800ab66:	4aad      	ldr	r2, [pc, #692]	; (800ae1c <_strtod_l+0xb0c>)
 800ab68:	402a      	ands	r2, r5
 800ab6a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ab6e:	f04f 31ff 	mov.w	r1, #4294967295
 800ab72:	d816      	bhi.n	800aba2 <_strtod_l+0x892>
 800ab74:	0d12      	lsrs	r2, r2, #20
 800ab76:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7e:	4298      	cmp	r0, r3
 800ab80:	d142      	bne.n	800ac08 <_strtod_l+0x8f8>
 800ab82:	4ba7      	ldr	r3, [pc, #668]	; (800ae20 <_strtod_l+0xb10>)
 800ab84:	429d      	cmp	r5, r3
 800ab86:	d102      	bne.n	800ab8e <_strtod_l+0x87e>
 800ab88:	3001      	adds	r0, #1
 800ab8a:	f43f addf 	beq.w	800a74c <_strtod_l+0x43c>
 800ab8e:	4ba3      	ldr	r3, [pc, #652]	; (800ae1c <_strtod_l+0xb0c>)
 800ab90:	402b      	ands	r3, r5
 800ab92:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ab96:	f04f 0a00 	mov.w	sl, #0
 800ab9a:	e7a0      	b.n	800aade <_strtod_l+0x7ce>
 800ab9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aba0:	e7ed      	b.n	800ab7e <_strtod_l+0x86e>
 800aba2:	460b      	mov	r3, r1
 800aba4:	e7eb      	b.n	800ab7e <_strtod_l+0x86e>
 800aba6:	bb7b      	cbnz	r3, 800ac08 <_strtod_l+0x8f8>
 800aba8:	f1ba 0f00 	cmp.w	sl, #0
 800abac:	d12c      	bne.n	800ac08 <_strtod_l+0x8f8>
 800abae:	9904      	ldr	r1, [sp, #16]
 800abb0:	4a9a      	ldr	r2, [pc, #616]	; (800ae1c <_strtod_l+0xb0c>)
 800abb2:	465b      	mov	r3, fp
 800abb4:	b1f1      	cbz	r1, 800abf4 <_strtod_l+0x8e4>
 800abb6:	ea02 010b 	and.w	r1, r2, fp
 800abba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800abbe:	dc19      	bgt.n	800abf4 <_strtod_l+0x8e4>
 800abc0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800abc4:	f77f ae5b 	ble.w	800a87e <_strtod_l+0x56e>
 800abc8:	4a96      	ldr	r2, [pc, #600]	; (800ae24 <_strtod_l+0xb14>)
 800abca:	2300      	movs	r3, #0
 800abcc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800abd0:	4650      	mov	r0, sl
 800abd2:	4659      	mov	r1, fp
 800abd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800abd8:	f7f5 fd2e 	bl	8000638 <__aeabi_dmul>
 800abdc:	4682      	mov	sl, r0
 800abde:	468b      	mov	fp, r1
 800abe0:	2900      	cmp	r1, #0
 800abe2:	f47f adbe 	bne.w	800a762 <_strtod_l+0x452>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	f47f adbb 	bne.w	800a762 <_strtod_l+0x452>
 800abec:	2322      	movs	r3, #34	; 0x22
 800abee:	f8c9 3000 	str.w	r3, [r9]
 800abf2:	e5b6      	b.n	800a762 <_strtod_l+0x452>
 800abf4:	4013      	ands	r3, r2
 800abf6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800abfa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800abfe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac02:	f04f 3aff 	mov.w	sl, #4294967295
 800ac06:	e76a      	b.n	800aade <_strtod_l+0x7ce>
 800ac08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac0a:	b193      	cbz	r3, 800ac32 <_strtod_l+0x922>
 800ac0c:	422b      	tst	r3, r5
 800ac0e:	f43f af66 	beq.w	800aade <_strtod_l+0x7ce>
 800ac12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac14:	9a04      	ldr	r2, [sp, #16]
 800ac16:	4650      	mov	r0, sl
 800ac18:	4659      	mov	r1, fp
 800ac1a:	b173      	cbz	r3, 800ac3a <_strtod_l+0x92a>
 800ac1c:	f7ff fb5a 	bl	800a2d4 <sulp>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac28:	f7f5 fb50 	bl	80002cc <__adddf3>
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	468b      	mov	fp, r1
 800ac30:	e755      	b.n	800aade <_strtod_l+0x7ce>
 800ac32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac34:	ea13 0f0a 	tst.w	r3, sl
 800ac38:	e7e9      	b.n	800ac0e <_strtod_l+0x8fe>
 800ac3a:	f7ff fb4b 	bl	800a2d4 <sulp>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac46:	f7f5 fb3f 	bl	80002c8 <__aeabi_dsub>
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4682      	mov	sl, r0
 800ac50:	468b      	mov	fp, r1
 800ac52:	f7f5 ff59 	bl	8000b08 <__aeabi_dcmpeq>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f47f ae11 	bne.w	800a87e <_strtod_l+0x56e>
 800ac5c:	e73f      	b.n	800aade <_strtod_l+0x7ce>
 800ac5e:	4641      	mov	r1, r8
 800ac60:	4620      	mov	r0, r4
 800ac62:	f001 fe8c 	bl	800c97e <__ratio>
 800ac66:	ec57 6b10 	vmov	r6, r7, d0
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac70:	ee10 0a10 	vmov	r0, s0
 800ac74:	4639      	mov	r1, r7
 800ac76:	f7f5 ff5b 	bl	8000b30 <__aeabi_dcmple>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d077      	beq.n	800ad6e <_strtod_l+0xa5e>
 800ac7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d04a      	beq.n	800ad1a <_strtod_l+0xa0a>
 800ac84:	4b68      	ldr	r3, [pc, #416]	; (800ae28 <_strtod_l+0xb18>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac8c:	4f66      	ldr	r7, [pc, #408]	; (800ae28 <_strtod_l+0xb18>)
 800ac8e:	2600      	movs	r6, #0
 800ac90:	4b62      	ldr	r3, [pc, #392]	; (800ae1c <_strtod_l+0xb0c>)
 800ac92:	402b      	ands	r3, r5
 800ac94:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac98:	4b64      	ldr	r3, [pc, #400]	; (800ae2c <_strtod_l+0xb1c>)
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	f040 80ce 	bne.w	800ae3c <_strtod_l+0xb2c>
 800aca0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aca4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aca8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800acac:	ec4b ab10 	vmov	d0, sl, fp
 800acb0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800acb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800acb8:	f001 fd9c 	bl	800c7f4 <__ulp>
 800acbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800acc0:	ec53 2b10 	vmov	r2, r3, d0
 800acc4:	f7f5 fcb8 	bl	8000638 <__aeabi_dmul>
 800acc8:	4652      	mov	r2, sl
 800acca:	465b      	mov	r3, fp
 800accc:	f7f5 fafe 	bl	80002cc <__adddf3>
 800acd0:	460b      	mov	r3, r1
 800acd2:	4952      	ldr	r1, [pc, #328]	; (800ae1c <_strtod_l+0xb0c>)
 800acd4:	4a56      	ldr	r2, [pc, #344]	; (800ae30 <_strtod_l+0xb20>)
 800acd6:	4019      	ands	r1, r3
 800acd8:	4291      	cmp	r1, r2
 800acda:	4682      	mov	sl, r0
 800acdc:	d95b      	bls.n	800ad96 <_strtod_l+0xa86>
 800acde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d103      	bne.n	800acf0 <_strtod_l+0x9e0>
 800ace8:	9b08      	ldr	r3, [sp, #32]
 800acea:	3301      	adds	r3, #1
 800acec:	f43f ad2e 	beq.w	800a74c <_strtod_l+0x43c>
 800acf0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800ae20 <_strtod_l+0xb10>
 800acf4:	f04f 3aff 	mov.w	sl, #4294967295
 800acf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800acfa:	4648      	mov	r0, r9
 800acfc:	f001 fae3 	bl	800c2c6 <_Bfree>
 800ad00:	9905      	ldr	r1, [sp, #20]
 800ad02:	4648      	mov	r0, r9
 800ad04:	f001 fadf 	bl	800c2c6 <_Bfree>
 800ad08:	4641      	mov	r1, r8
 800ad0a:	4648      	mov	r0, r9
 800ad0c:	f001 fadb 	bl	800c2c6 <_Bfree>
 800ad10:	4621      	mov	r1, r4
 800ad12:	4648      	mov	r0, r9
 800ad14:	f001 fad7 	bl	800c2c6 <_Bfree>
 800ad18:	e619      	b.n	800a94e <_strtod_l+0x63e>
 800ad1a:	f1ba 0f00 	cmp.w	sl, #0
 800ad1e:	d11a      	bne.n	800ad56 <_strtod_l+0xa46>
 800ad20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad24:	b9eb      	cbnz	r3, 800ad62 <_strtod_l+0xa52>
 800ad26:	2200      	movs	r2, #0
 800ad28:	4b3f      	ldr	r3, [pc, #252]	; (800ae28 <_strtod_l+0xb18>)
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	f7f5 fef5 	bl	8000b1c <__aeabi_dcmplt>
 800ad32:	b9c8      	cbnz	r0, 800ad68 <_strtod_l+0xa58>
 800ad34:	4630      	mov	r0, r6
 800ad36:	4639      	mov	r1, r7
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4b3e      	ldr	r3, [pc, #248]	; (800ae34 <_strtod_l+0xb24>)
 800ad3c:	f7f5 fc7c 	bl	8000638 <__aeabi_dmul>
 800ad40:	4606      	mov	r6, r0
 800ad42:	460f      	mov	r7, r1
 800ad44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ad48:	9618      	str	r6, [sp, #96]	; 0x60
 800ad4a:	9319      	str	r3, [sp, #100]	; 0x64
 800ad4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ad50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad54:	e79c      	b.n	800ac90 <_strtod_l+0x980>
 800ad56:	f1ba 0f01 	cmp.w	sl, #1
 800ad5a:	d102      	bne.n	800ad62 <_strtod_l+0xa52>
 800ad5c:	2d00      	cmp	r5, #0
 800ad5e:	f43f ad8e 	beq.w	800a87e <_strtod_l+0x56e>
 800ad62:	2200      	movs	r2, #0
 800ad64:	4b34      	ldr	r3, [pc, #208]	; (800ae38 <_strtod_l+0xb28>)
 800ad66:	e78f      	b.n	800ac88 <_strtod_l+0x978>
 800ad68:	2600      	movs	r6, #0
 800ad6a:	4f32      	ldr	r7, [pc, #200]	; (800ae34 <_strtod_l+0xb24>)
 800ad6c:	e7ea      	b.n	800ad44 <_strtod_l+0xa34>
 800ad6e:	4b31      	ldr	r3, [pc, #196]	; (800ae34 <_strtod_l+0xb24>)
 800ad70:	4630      	mov	r0, r6
 800ad72:	4639      	mov	r1, r7
 800ad74:	2200      	movs	r2, #0
 800ad76:	f7f5 fc5f 	bl	8000638 <__aeabi_dmul>
 800ad7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	b933      	cbnz	r3, 800ad90 <_strtod_l+0xa80>
 800ad82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad86:	9010      	str	r0, [sp, #64]	; 0x40
 800ad88:	9311      	str	r3, [sp, #68]	; 0x44
 800ad8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad8e:	e7df      	b.n	800ad50 <_strtod_l+0xa40>
 800ad90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ad94:	e7f9      	b.n	800ad8a <_strtod_l+0xa7a>
 800ad96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1ab      	bne.n	800acf8 <_strtod_l+0x9e8>
 800ada0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ada4:	0d1b      	lsrs	r3, r3, #20
 800ada6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ada8:	051b      	lsls	r3, r3, #20
 800adaa:	429a      	cmp	r2, r3
 800adac:	465d      	mov	r5, fp
 800adae:	d1a3      	bne.n	800acf8 <_strtod_l+0x9e8>
 800adb0:	4639      	mov	r1, r7
 800adb2:	4630      	mov	r0, r6
 800adb4:	f7f5 fef0 	bl	8000b98 <__aeabi_d2iz>
 800adb8:	f7f5 fbd4 	bl	8000564 <__aeabi_i2d>
 800adbc:	460b      	mov	r3, r1
 800adbe:	4602      	mov	r2, r0
 800adc0:	4639      	mov	r1, r7
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7f5 fa80 	bl	80002c8 <__aeabi_dsub>
 800adc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adca:	4606      	mov	r6, r0
 800adcc:	460f      	mov	r7, r1
 800adce:	b933      	cbnz	r3, 800adde <_strtod_l+0xace>
 800add0:	f1ba 0f00 	cmp.w	sl, #0
 800add4:	d103      	bne.n	800adde <_strtod_l+0xace>
 800add6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800adda:	2d00      	cmp	r5, #0
 800addc:	d06d      	beq.n	800aeba <_strtod_l+0xbaa>
 800adde:	a30a      	add	r3, pc, #40	; (adr r3, 800ae08 <_strtod_l+0xaf8>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	4630      	mov	r0, r6
 800ade6:	4639      	mov	r1, r7
 800ade8:	f7f5 fe98 	bl	8000b1c <__aeabi_dcmplt>
 800adec:	2800      	cmp	r0, #0
 800adee:	f47f acb8 	bne.w	800a762 <_strtod_l+0x452>
 800adf2:	a307      	add	r3, pc, #28	; (adr r3, 800ae10 <_strtod_l+0xb00>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	4630      	mov	r0, r6
 800adfa:	4639      	mov	r1, r7
 800adfc:	f7f5 feac 	bl	8000b58 <__aeabi_dcmpgt>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	f43f af79 	beq.w	800acf8 <_strtod_l+0x9e8>
 800ae06:	e4ac      	b.n	800a762 <_strtod_l+0x452>
 800ae08:	94a03595 	.word	0x94a03595
 800ae0c:	3fdfffff 	.word	0x3fdfffff
 800ae10:	35afe535 	.word	0x35afe535
 800ae14:	3fe00000 	.word	0x3fe00000
 800ae18:	000fffff 	.word	0x000fffff
 800ae1c:	7ff00000 	.word	0x7ff00000
 800ae20:	7fefffff 	.word	0x7fefffff
 800ae24:	39500000 	.word	0x39500000
 800ae28:	3ff00000 	.word	0x3ff00000
 800ae2c:	7fe00000 	.word	0x7fe00000
 800ae30:	7c9fffff 	.word	0x7c9fffff
 800ae34:	3fe00000 	.word	0x3fe00000
 800ae38:	bff00000 	.word	0xbff00000
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	b333      	cbz	r3, 800ae8e <_strtod_l+0xb7e>
 800ae40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae46:	d822      	bhi.n	800ae8e <_strtod_l+0xb7e>
 800ae48:	a327      	add	r3, pc, #156	; (adr r3, 800aee8 <_strtod_l+0xbd8>)
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	4630      	mov	r0, r6
 800ae50:	4639      	mov	r1, r7
 800ae52:	f7f5 fe6d 	bl	8000b30 <__aeabi_dcmple>
 800ae56:	b1a0      	cbz	r0, 800ae82 <_strtod_l+0xb72>
 800ae58:	4639      	mov	r1, r7
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f7f5 fec4 	bl	8000be8 <__aeabi_d2uiz>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	bf08      	it	eq
 800ae64:	2001      	moveq	r0, #1
 800ae66:	f7f5 fb6d 	bl	8000544 <__aeabi_ui2d>
 800ae6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	bb03      	cbnz	r3, 800aeb4 <_strtod_l+0xba4>
 800ae72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae76:	9012      	str	r0, [sp, #72]	; 0x48
 800ae78:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ae7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ae82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ae8a:	1a9b      	subs	r3, r3, r2
 800ae8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ae92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ae96:	f001 fcad 	bl	800c7f4 <__ulp>
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	ec53 2b10 	vmov	r2, r3, d0
 800aea0:	4659      	mov	r1, fp
 800aea2:	f7f5 fbc9 	bl	8000638 <__aeabi_dmul>
 800aea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aeaa:	f7f5 fa0f 	bl	80002cc <__adddf3>
 800aeae:	4682      	mov	sl, r0
 800aeb0:	468b      	mov	fp, r1
 800aeb2:	e772      	b.n	800ad9a <_strtod_l+0xa8a>
 800aeb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800aeb8:	e7df      	b.n	800ae7a <_strtod_l+0xb6a>
 800aeba:	a30d      	add	r3, pc, #52	; (adr r3, 800aef0 <_strtod_l+0xbe0>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 800aec4:	e79c      	b.n	800ae00 <_strtod_l+0xaf0>
 800aec6:	2300      	movs	r3, #0
 800aec8:	930d      	str	r3, [sp, #52]	; 0x34
 800aeca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	f7ff ba61 	b.w	800a396 <_strtod_l+0x86>
 800aed4:	2b65      	cmp	r3, #101	; 0x65
 800aed6:	f04f 0200 	mov.w	r2, #0
 800aeda:	f43f ab4e 	beq.w	800a57a <_strtod_l+0x26a>
 800aede:	2101      	movs	r1, #1
 800aee0:	4614      	mov	r4, r2
 800aee2:	9104      	str	r1, [sp, #16]
 800aee4:	f7ff bacb 	b.w	800a47e <_strtod_l+0x16e>
 800aee8:	ffc00000 	.word	0xffc00000
 800aeec:	41dfffff 	.word	0x41dfffff
 800aef0:	94a03595 	.word	0x94a03595
 800aef4:	3fcfffff 	.word	0x3fcfffff

0800aef8 <strtod>:
 800aef8:	4b07      	ldr	r3, [pc, #28]	; (800af18 <strtod+0x20>)
 800aefa:	4a08      	ldr	r2, [pc, #32]	; (800af1c <strtod+0x24>)
 800aefc:	b410      	push	{r4}
 800aefe:	681c      	ldr	r4, [r3, #0]
 800af00:	6a23      	ldr	r3, [r4, #32]
 800af02:	2b00      	cmp	r3, #0
 800af04:	bf08      	it	eq
 800af06:	4613      	moveq	r3, r2
 800af08:	460a      	mov	r2, r1
 800af0a:	4601      	mov	r1, r0
 800af0c:	4620      	mov	r0, r4
 800af0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af12:	f7ff b9fd 	b.w	800a310 <_strtod_l>
 800af16:	bf00      	nop
 800af18:	2000000c 	.word	0x2000000c
 800af1c:	20000070 	.word	0x20000070

0800af20 <quorem>:
 800af20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	6903      	ldr	r3, [r0, #16]
 800af26:	690c      	ldr	r4, [r1, #16]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	4680      	mov	r8, r0
 800af2c:	f2c0 8082 	blt.w	800b034 <quorem+0x114>
 800af30:	3c01      	subs	r4, #1
 800af32:	f101 0714 	add.w	r7, r1, #20
 800af36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800af3a:	f100 0614 	add.w	r6, r0, #20
 800af3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800af42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800af46:	eb06 030c 	add.w	r3, r6, ip
 800af4a:	3501      	adds	r5, #1
 800af4c:	eb07 090c 	add.w	r9, r7, ip
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	fbb0 f5f5 	udiv	r5, r0, r5
 800af56:	b395      	cbz	r5, 800afbe <quorem+0x9e>
 800af58:	f04f 0a00 	mov.w	sl, #0
 800af5c:	4638      	mov	r0, r7
 800af5e:	46b6      	mov	lr, r6
 800af60:	46d3      	mov	fp, sl
 800af62:	f850 2b04 	ldr.w	r2, [r0], #4
 800af66:	b293      	uxth	r3, r2
 800af68:	fb05 a303 	mla	r3, r5, r3, sl
 800af6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af70:	b29b      	uxth	r3, r3
 800af72:	ebab 0303 	sub.w	r3, fp, r3
 800af76:	0c12      	lsrs	r2, r2, #16
 800af78:	f8de b000 	ldr.w	fp, [lr]
 800af7c:	fb05 a202 	mla	r2, r5, r2, sl
 800af80:	fa13 f38b 	uxtah	r3, r3, fp
 800af84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800af88:	fa1f fb82 	uxth.w	fp, r2
 800af8c:	f8de 2000 	ldr.w	r2, [lr]
 800af90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800af94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af98:	b29b      	uxth	r3, r3
 800af9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af9e:	4581      	cmp	r9, r0
 800afa0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800afa4:	f84e 3b04 	str.w	r3, [lr], #4
 800afa8:	d2db      	bcs.n	800af62 <quorem+0x42>
 800afaa:	f856 300c 	ldr.w	r3, [r6, ip]
 800afae:	b933      	cbnz	r3, 800afbe <quorem+0x9e>
 800afb0:	9b01      	ldr	r3, [sp, #4]
 800afb2:	3b04      	subs	r3, #4
 800afb4:	429e      	cmp	r6, r3
 800afb6:	461a      	mov	r2, r3
 800afb8:	d330      	bcc.n	800b01c <quorem+0xfc>
 800afba:	f8c8 4010 	str.w	r4, [r8, #16]
 800afbe:	4640      	mov	r0, r8
 800afc0:	f001 fba0 	bl	800c704 <__mcmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	db25      	blt.n	800b014 <quorem+0xf4>
 800afc8:	3501      	adds	r5, #1
 800afca:	4630      	mov	r0, r6
 800afcc:	f04f 0c00 	mov.w	ip, #0
 800afd0:	f857 2b04 	ldr.w	r2, [r7], #4
 800afd4:	f8d0 e000 	ldr.w	lr, [r0]
 800afd8:	b293      	uxth	r3, r2
 800afda:	ebac 0303 	sub.w	r3, ip, r3
 800afde:	0c12      	lsrs	r2, r2, #16
 800afe0:	fa13 f38e 	uxtah	r3, r3, lr
 800afe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afec:	b29b      	uxth	r3, r3
 800afee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aff2:	45b9      	cmp	r9, r7
 800aff4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aff8:	f840 3b04 	str.w	r3, [r0], #4
 800affc:	d2e8      	bcs.n	800afd0 <quorem+0xb0>
 800affe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b002:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b006:	b92a      	cbnz	r2, 800b014 <quorem+0xf4>
 800b008:	3b04      	subs	r3, #4
 800b00a:	429e      	cmp	r6, r3
 800b00c:	461a      	mov	r2, r3
 800b00e:	d30b      	bcc.n	800b028 <quorem+0x108>
 800b010:	f8c8 4010 	str.w	r4, [r8, #16]
 800b014:	4628      	mov	r0, r5
 800b016:	b003      	add	sp, #12
 800b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01c:	6812      	ldr	r2, [r2, #0]
 800b01e:	3b04      	subs	r3, #4
 800b020:	2a00      	cmp	r2, #0
 800b022:	d1ca      	bne.n	800afba <quorem+0x9a>
 800b024:	3c01      	subs	r4, #1
 800b026:	e7c5      	b.n	800afb4 <quorem+0x94>
 800b028:	6812      	ldr	r2, [r2, #0]
 800b02a:	3b04      	subs	r3, #4
 800b02c:	2a00      	cmp	r2, #0
 800b02e:	d1ef      	bne.n	800b010 <quorem+0xf0>
 800b030:	3c01      	subs	r4, #1
 800b032:	e7ea      	b.n	800b00a <quorem+0xea>
 800b034:	2000      	movs	r0, #0
 800b036:	e7ee      	b.n	800b016 <quorem+0xf6>

0800b038 <_dtoa_r>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	ec57 6b10 	vmov	r6, r7, d0
 800b040:	b097      	sub	sp, #92	; 0x5c
 800b042:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b044:	9106      	str	r1, [sp, #24]
 800b046:	4604      	mov	r4, r0
 800b048:	920b      	str	r2, [sp, #44]	; 0x2c
 800b04a:	9312      	str	r3, [sp, #72]	; 0x48
 800b04c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b050:	e9cd 6700 	strd	r6, r7, [sp]
 800b054:	b93d      	cbnz	r5, 800b066 <_dtoa_r+0x2e>
 800b056:	2010      	movs	r0, #16
 800b058:	f001 f8dc 	bl	800c214 <malloc>
 800b05c:	6260      	str	r0, [r4, #36]	; 0x24
 800b05e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b062:	6005      	str	r5, [r0, #0]
 800b064:	60c5      	str	r5, [r0, #12]
 800b066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b068:	6819      	ldr	r1, [r3, #0]
 800b06a:	b151      	cbz	r1, 800b082 <_dtoa_r+0x4a>
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	604a      	str	r2, [r1, #4]
 800b070:	2301      	movs	r3, #1
 800b072:	4093      	lsls	r3, r2
 800b074:	608b      	str	r3, [r1, #8]
 800b076:	4620      	mov	r0, r4
 800b078:	f001 f925 	bl	800c2c6 <_Bfree>
 800b07c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	1e3b      	subs	r3, r7, #0
 800b084:	bfbb      	ittet	lt
 800b086:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b08a:	9301      	strlt	r3, [sp, #4]
 800b08c:	2300      	movge	r3, #0
 800b08e:	2201      	movlt	r2, #1
 800b090:	bfac      	ite	ge
 800b092:	f8c8 3000 	strge.w	r3, [r8]
 800b096:	f8c8 2000 	strlt.w	r2, [r8]
 800b09a:	4baf      	ldr	r3, [pc, #700]	; (800b358 <_dtoa_r+0x320>)
 800b09c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b0a0:	ea33 0308 	bics.w	r3, r3, r8
 800b0a4:	d114      	bne.n	800b0d0 <_dtoa_r+0x98>
 800b0a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	9b00      	ldr	r3, [sp, #0]
 800b0b0:	b923      	cbnz	r3, 800b0bc <_dtoa_r+0x84>
 800b0b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f000 8542 	beq.w	800bb40 <_dtoa_r+0xb08>
 800b0bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b36c <_dtoa_r+0x334>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 8544 	beq.w	800bb50 <_dtoa_r+0xb18>
 800b0c8:	f10b 0303 	add.w	r3, fp, #3
 800b0cc:	f000 bd3e 	b.w	800bb4c <_dtoa_r+0xb14>
 800b0d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 fd14 	bl	8000b08 <__aeabi_dcmpeq>
 800b0e0:	4681      	mov	r9, r0
 800b0e2:	b168      	cbz	r0, 800b100 <_dtoa_r+0xc8>
 800b0e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 8524 	beq.w	800bb3a <_dtoa_r+0xb02>
 800b0f2:	4b9a      	ldr	r3, [pc, #616]	; (800b35c <_dtoa_r+0x324>)
 800b0f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0f6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	f000 bd28 	b.w	800bb50 <_dtoa_r+0xb18>
 800b100:	aa14      	add	r2, sp, #80	; 0x50
 800b102:	a915      	add	r1, sp, #84	; 0x54
 800b104:	ec47 6b10 	vmov	d0, r6, r7
 800b108:	4620      	mov	r0, r4
 800b10a:	f001 fbe9 	bl	800c8e0 <__d2b>
 800b10e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b112:	9004      	str	r0, [sp, #16]
 800b114:	2d00      	cmp	r5, #0
 800b116:	d07c      	beq.n	800b212 <_dtoa_r+0x1da>
 800b118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b11c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b120:	46b2      	mov	sl, r6
 800b122:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b126:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b12a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b12e:	2200      	movs	r2, #0
 800b130:	4b8b      	ldr	r3, [pc, #556]	; (800b360 <_dtoa_r+0x328>)
 800b132:	4650      	mov	r0, sl
 800b134:	4659      	mov	r1, fp
 800b136:	f7f5 f8c7 	bl	80002c8 <__aeabi_dsub>
 800b13a:	a381      	add	r3, pc, #516	; (adr r3, 800b340 <_dtoa_r+0x308>)
 800b13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b140:	f7f5 fa7a 	bl	8000638 <__aeabi_dmul>
 800b144:	a380      	add	r3, pc, #512	; (adr r3, 800b348 <_dtoa_r+0x310>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	f7f5 f8bf 	bl	80002cc <__adddf3>
 800b14e:	4606      	mov	r6, r0
 800b150:	4628      	mov	r0, r5
 800b152:	460f      	mov	r7, r1
 800b154:	f7f5 fa06 	bl	8000564 <__aeabi_i2d>
 800b158:	a37d      	add	r3, pc, #500	; (adr r3, 800b350 <_dtoa_r+0x318>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f7f5 fa6b 	bl	8000638 <__aeabi_dmul>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	4630      	mov	r0, r6
 800b168:	4639      	mov	r1, r7
 800b16a:	f7f5 f8af 	bl	80002cc <__adddf3>
 800b16e:	4606      	mov	r6, r0
 800b170:	460f      	mov	r7, r1
 800b172:	f7f5 fd11 	bl	8000b98 <__aeabi_d2iz>
 800b176:	2200      	movs	r2, #0
 800b178:	4682      	mov	sl, r0
 800b17a:	2300      	movs	r3, #0
 800b17c:	4630      	mov	r0, r6
 800b17e:	4639      	mov	r1, r7
 800b180:	f7f5 fccc 	bl	8000b1c <__aeabi_dcmplt>
 800b184:	b148      	cbz	r0, 800b19a <_dtoa_r+0x162>
 800b186:	4650      	mov	r0, sl
 800b188:	f7f5 f9ec 	bl	8000564 <__aeabi_i2d>
 800b18c:	4632      	mov	r2, r6
 800b18e:	463b      	mov	r3, r7
 800b190:	f7f5 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 800b194:	b908      	cbnz	r0, 800b19a <_dtoa_r+0x162>
 800b196:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b19a:	f1ba 0f16 	cmp.w	sl, #22
 800b19e:	d859      	bhi.n	800b254 <_dtoa_r+0x21c>
 800b1a0:	4970      	ldr	r1, [pc, #448]	; (800b364 <_dtoa_r+0x32c>)
 800b1a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ae:	f7f5 fcd3 	bl	8000b58 <__aeabi_dcmpgt>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d050      	beq.n	800b258 <_dtoa_r+0x220>
 800b1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1c0:	1b5d      	subs	r5, r3, r5
 800b1c2:	f1b5 0801 	subs.w	r8, r5, #1
 800b1c6:	bf49      	itett	mi
 800b1c8:	f1c5 0301 	rsbmi	r3, r5, #1
 800b1cc:	2300      	movpl	r3, #0
 800b1ce:	9305      	strmi	r3, [sp, #20]
 800b1d0:	f04f 0800 	movmi.w	r8, #0
 800b1d4:	bf58      	it	pl
 800b1d6:	9305      	strpl	r3, [sp, #20]
 800b1d8:	f1ba 0f00 	cmp.w	sl, #0
 800b1dc:	db3e      	blt.n	800b25c <_dtoa_r+0x224>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	44d0      	add	r8, sl
 800b1e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b1e6:	9307      	str	r3, [sp, #28]
 800b1e8:	9b06      	ldr	r3, [sp, #24]
 800b1ea:	2b09      	cmp	r3, #9
 800b1ec:	f200 8090 	bhi.w	800b310 <_dtoa_r+0x2d8>
 800b1f0:	2b05      	cmp	r3, #5
 800b1f2:	bfc4      	itt	gt
 800b1f4:	3b04      	subgt	r3, #4
 800b1f6:	9306      	strgt	r3, [sp, #24]
 800b1f8:	9b06      	ldr	r3, [sp, #24]
 800b1fa:	f1a3 0302 	sub.w	r3, r3, #2
 800b1fe:	bfcc      	ite	gt
 800b200:	2500      	movgt	r5, #0
 800b202:	2501      	movle	r5, #1
 800b204:	2b03      	cmp	r3, #3
 800b206:	f200 808f 	bhi.w	800b328 <_dtoa_r+0x2f0>
 800b20a:	e8df f003 	tbb	[pc, r3]
 800b20e:	7f7d      	.short	0x7f7d
 800b210:	7131      	.short	0x7131
 800b212:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b216:	441d      	add	r5, r3
 800b218:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b21c:	2820      	cmp	r0, #32
 800b21e:	dd13      	ble.n	800b248 <_dtoa_r+0x210>
 800b220:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b224:	9b00      	ldr	r3, [sp, #0]
 800b226:	fa08 f800 	lsl.w	r8, r8, r0
 800b22a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b22e:	fa23 f000 	lsr.w	r0, r3, r0
 800b232:	ea48 0000 	orr.w	r0, r8, r0
 800b236:	f7f5 f985 	bl	8000544 <__aeabi_ui2d>
 800b23a:	2301      	movs	r3, #1
 800b23c:	4682      	mov	sl, r0
 800b23e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b242:	3d01      	subs	r5, #1
 800b244:	9313      	str	r3, [sp, #76]	; 0x4c
 800b246:	e772      	b.n	800b12e <_dtoa_r+0xf6>
 800b248:	9b00      	ldr	r3, [sp, #0]
 800b24a:	f1c0 0020 	rsb	r0, r0, #32
 800b24e:	fa03 f000 	lsl.w	r0, r3, r0
 800b252:	e7f0      	b.n	800b236 <_dtoa_r+0x1fe>
 800b254:	2301      	movs	r3, #1
 800b256:	e7b1      	b.n	800b1bc <_dtoa_r+0x184>
 800b258:	900f      	str	r0, [sp, #60]	; 0x3c
 800b25a:	e7b0      	b.n	800b1be <_dtoa_r+0x186>
 800b25c:	9b05      	ldr	r3, [sp, #20]
 800b25e:	eba3 030a 	sub.w	r3, r3, sl
 800b262:	9305      	str	r3, [sp, #20]
 800b264:	f1ca 0300 	rsb	r3, sl, #0
 800b268:	9307      	str	r3, [sp, #28]
 800b26a:	2300      	movs	r3, #0
 800b26c:	930e      	str	r3, [sp, #56]	; 0x38
 800b26e:	e7bb      	b.n	800b1e8 <_dtoa_r+0x1b0>
 800b270:	2301      	movs	r3, #1
 800b272:	930a      	str	r3, [sp, #40]	; 0x28
 800b274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b276:	2b00      	cmp	r3, #0
 800b278:	dd59      	ble.n	800b32e <_dtoa_r+0x2f6>
 800b27a:	9302      	str	r3, [sp, #8]
 800b27c:	4699      	mov	r9, r3
 800b27e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b280:	2200      	movs	r2, #0
 800b282:	6072      	str	r2, [r6, #4]
 800b284:	2204      	movs	r2, #4
 800b286:	f102 0014 	add.w	r0, r2, #20
 800b28a:	4298      	cmp	r0, r3
 800b28c:	6871      	ldr	r1, [r6, #4]
 800b28e:	d953      	bls.n	800b338 <_dtoa_r+0x300>
 800b290:	4620      	mov	r0, r4
 800b292:	f000 ffe4 	bl	800c25e <_Balloc>
 800b296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b298:	6030      	str	r0, [r6, #0]
 800b29a:	f1b9 0f0e 	cmp.w	r9, #14
 800b29e:	f8d3 b000 	ldr.w	fp, [r3]
 800b2a2:	f200 80e6 	bhi.w	800b472 <_dtoa_r+0x43a>
 800b2a6:	2d00      	cmp	r5, #0
 800b2a8:	f000 80e3 	beq.w	800b472 <_dtoa_r+0x43a>
 800b2ac:	ed9d 7b00 	vldr	d7, [sp]
 800b2b0:	f1ba 0f00 	cmp.w	sl, #0
 800b2b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b2b8:	dd74      	ble.n	800b3a4 <_dtoa_r+0x36c>
 800b2ba:	4a2a      	ldr	r2, [pc, #168]	; (800b364 <_dtoa_r+0x32c>)
 800b2bc:	f00a 030f 	and.w	r3, sl, #15
 800b2c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2c4:	ed93 7b00 	vldr	d7, [r3]
 800b2c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b2cc:	06f0      	lsls	r0, r6, #27
 800b2ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b2d2:	d565      	bpl.n	800b3a0 <_dtoa_r+0x368>
 800b2d4:	4b24      	ldr	r3, [pc, #144]	; (800b368 <_dtoa_r+0x330>)
 800b2d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2de:	f7f5 fad5 	bl	800088c <__aeabi_ddiv>
 800b2e2:	e9cd 0100 	strd	r0, r1, [sp]
 800b2e6:	f006 060f 	and.w	r6, r6, #15
 800b2ea:	2503      	movs	r5, #3
 800b2ec:	4f1e      	ldr	r7, [pc, #120]	; (800b368 <_dtoa_r+0x330>)
 800b2ee:	e04c      	b.n	800b38a <_dtoa_r+0x352>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b2f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2f6:	4453      	add	r3, sl
 800b2f8:	f103 0901 	add.w	r9, r3, #1
 800b2fc:	9302      	str	r3, [sp, #8]
 800b2fe:	464b      	mov	r3, r9
 800b300:	2b01      	cmp	r3, #1
 800b302:	bfb8      	it	lt
 800b304:	2301      	movlt	r3, #1
 800b306:	e7ba      	b.n	800b27e <_dtoa_r+0x246>
 800b308:	2300      	movs	r3, #0
 800b30a:	e7b2      	b.n	800b272 <_dtoa_r+0x23a>
 800b30c:	2300      	movs	r3, #0
 800b30e:	e7f0      	b.n	800b2f2 <_dtoa_r+0x2ba>
 800b310:	2501      	movs	r5, #1
 800b312:	2300      	movs	r3, #0
 800b314:	9306      	str	r3, [sp, #24]
 800b316:	950a      	str	r5, [sp, #40]	; 0x28
 800b318:	f04f 33ff 	mov.w	r3, #4294967295
 800b31c:	9302      	str	r3, [sp, #8]
 800b31e:	4699      	mov	r9, r3
 800b320:	2200      	movs	r2, #0
 800b322:	2312      	movs	r3, #18
 800b324:	920b      	str	r2, [sp, #44]	; 0x2c
 800b326:	e7aa      	b.n	800b27e <_dtoa_r+0x246>
 800b328:	2301      	movs	r3, #1
 800b32a:	930a      	str	r3, [sp, #40]	; 0x28
 800b32c:	e7f4      	b.n	800b318 <_dtoa_r+0x2e0>
 800b32e:	2301      	movs	r3, #1
 800b330:	9302      	str	r3, [sp, #8]
 800b332:	4699      	mov	r9, r3
 800b334:	461a      	mov	r2, r3
 800b336:	e7f5      	b.n	800b324 <_dtoa_r+0x2ec>
 800b338:	3101      	adds	r1, #1
 800b33a:	6071      	str	r1, [r6, #4]
 800b33c:	0052      	lsls	r2, r2, #1
 800b33e:	e7a2      	b.n	800b286 <_dtoa_r+0x24e>
 800b340:	636f4361 	.word	0x636f4361
 800b344:	3fd287a7 	.word	0x3fd287a7
 800b348:	8b60c8b3 	.word	0x8b60c8b3
 800b34c:	3fc68a28 	.word	0x3fc68a28
 800b350:	509f79fb 	.word	0x509f79fb
 800b354:	3fd34413 	.word	0x3fd34413
 800b358:	7ff00000 	.word	0x7ff00000
 800b35c:	0800d121 	.word	0x0800d121
 800b360:	3ff80000 	.word	0x3ff80000
 800b364:	0800d1d8 	.word	0x0800d1d8
 800b368:	0800d1b0 	.word	0x0800d1b0
 800b36c:	0800d1a1 	.word	0x0800d1a1
 800b370:	07f1      	lsls	r1, r6, #31
 800b372:	d508      	bpl.n	800b386 <_dtoa_r+0x34e>
 800b374:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b37c:	f7f5 f95c 	bl	8000638 <__aeabi_dmul>
 800b380:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b384:	3501      	adds	r5, #1
 800b386:	1076      	asrs	r6, r6, #1
 800b388:	3708      	adds	r7, #8
 800b38a:	2e00      	cmp	r6, #0
 800b38c:	d1f0      	bne.n	800b370 <_dtoa_r+0x338>
 800b38e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b392:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b396:	f7f5 fa79 	bl	800088c <__aeabi_ddiv>
 800b39a:	e9cd 0100 	strd	r0, r1, [sp]
 800b39e:	e01a      	b.n	800b3d6 <_dtoa_r+0x39e>
 800b3a0:	2502      	movs	r5, #2
 800b3a2:	e7a3      	b.n	800b2ec <_dtoa_r+0x2b4>
 800b3a4:	f000 80a0 	beq.w	800b4e8 <_dtoa_r+0x4b0>
 800b3a8:	f1ca 0600 	rsb	r6, sl, #0
 800b3ac:	4b9f      	ldr	r3, [pc, #636]	; (800b62c <_dtoa_r+0x5f4>)
 800b3ae:	4fa0      	ldr	r7, [pc, #640]	; (800b630 <_dtoa_r+0x5f8>)
 800b3b0:	f006 020f 	and.w	r2, r6, #15
 800b3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b3c0:	f7f5 f93a 	bl	8000638 <__aeabi_dmul>
 800b3c4:	e9cd 0100 	strd	r0, r1, [sp]
 800b3c8:	1136      	asrs	r6, r6, #4
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	2502      	movs	r5, #2
 800b3ce:	2e00      	cmp	r6, #0
 800b3d0:	d17f      	bne.n	800b4d2 <_dtoa_r+0x49a>
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e1      	bne.n	800b39a <_dtoa_r+0x362>
 800b3d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f000 8087 	beq.w	800b4ec <_dtoa_r+0x4b4>
 800b3de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	4b93      	ldr	r3, [pc, #588]	; (800b634 <_dtoa_r+0x5fc>)
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	f7f5 fb97 	bl	8000b1c <__aeabi_dcmplt>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d07c      	beq.n	800b4ec <_dtoa_r+0x4b4>
 800b3f2:	f1b9 0f00 	cmp.w	r9, #0
 800b3f6:	d079      	beq.n	800b4ec <_dtoa_r+0x4b4>
 800b3f8:	9b02      	ldr	r3, [sp, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	dd35      	ble.n	800b46a <_dtoa_r+0x432>
 800b3fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b402:	9308      	str	r3, [sp, #32]
 800b404:	4639      	mov	r1, r7
 800b406:	2200      	movs	r2, #0
 800b408:	4b8b      	ldr	r3, [pc, #556]	; (800b638 <_dtoa_r+0x600>)
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7f5 f914 	bl	8000638 <__aeabi_dmul>
 800b410:	e9cd 0100 	strd	r0, r1, [sp]
 800b414:	9f02      	ldr	r7, [sp, #8]
 800b416:	3501      	adds	r5, #1
 800b418:	4628      	mov	r0, r5
 800b41a:	f7f5 f8a3 	bl	8000564 <__aeabi_i2d>
 800b41e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b422:	f7f5 f909 	bl	8000638 <__aeabi_dmul>
 800b426:	2200      	movs	r2, #0
 800b428:	4b84      	ldr	r3, [pc, #528]	; (800b63c <_dtoa_r+0x604>)
 800b42a:	f7f4 ff4f 	bl	80002cc <__adddf3>
 800b42e:	4605      	mov	r5, r0
 800b430:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b434:	2f00      	cmp	r7, #0
 800b436:	d15d      	bne.n	800b4f4 <_dtoa_r+0x4bc>
 800b438:	2200      	movs	r2, #0
 800b43a:	4b81      	ldr	r3, [pc, #516]	; (800b640 <_dtoa_r+0x608>)
 800b43c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b440:	f7f4 ff42 	bl	80002c8 <__aeabi_dsub>
 800b444:	462a      	mov	r2, r5
 800b446:	4633      	mov	r3, r6
 800b448:	e9cd 0100 	strd	r0, r1, [sp]
 800b44c:	f7f5 fb84 	bl	8000b58 <__aeabi_dcmpgt>
 800b450:	2800      	cmp	r0, #0
 800b452:	f040 8288 	bne.w	800b966 <_dtoa_r+0x92e>
 800b456:	462a      	mov	r2, r5
 800b458:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b45c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b460:	f7f5 fb5c 	bl	8000b1c <__aeabi_dcmplt>
 800b464:	2800      	cmp	r0, #0
 800b466:	f040 827c 	bne.w	800b962 <_dtoa_r+0x92a>
 800b46a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b46e:	e9cd 2300 	strd	r2, r3, [sp]
 800b472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b474:	2b00      	cmp	r3, #0
 800b476:	f2c0 8150 	blt.w	800b71a <_dtoa_r+0x6e2>
 800b47a:	f1ba 0f0e 	cmp.w	sl, #14
 800b47e:	f300 814c 	bgt.w	800b71a <_dtoa_r+0x6e2>
 800b482:	4b6a      	ldr	r3, [pc, #424]	; (800b62c <_dtoa_r+0x5f4>)
 800b484:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b488:	ed93 7b00 	vldr	d7, [r3]
 800b48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b494:	f280 80d8 	bge.w	800b648 <_dtoa_r+0x610>
 800b498:	f1b9 0f00 	cmp.w	r9, #0
 800b49c:	f300 80d4 	bgt.w	800b648 <_dtoa_r+0x610>
 800b4a0:	f040 825e 	bne.w	800b960 <_dtoa_r+0x928>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	4b66      	ldr	r3, [pc, #408]	; (800b640 <_dtoa_r+0x608>)
 800b4a8:	ec51 0b17 	vmov	r0, r1, d7
 800b4ac:	f7f5 f8c4 	bl	8000638 <__aeabi_dmul>
 800b4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4b4:	f7f5 fb46 	bl	8000b44 <__aeabi_dcmpge>
 800b4b8:	464f      	mov	r7, r9
 800b4ba:	464e      	mov	r6, r9
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f040 8234 	bne.w	800b92a <_dtoa_r+0x8f2>
 800b4c2:	2331      	movs	r3, #49	; 0x31
 800b4c4:	f10b 0501 	add.w	r5, fp, #1
 800b4c8:	f88b 3000 	strb.w	r3, [fp]
 800b4cc:	f10a 0a01 	add.w	sl, sl, #1
 800b4d0:	e22f      	b.n	800b932 <_dtoa_r+0x8fa>
 800b4d2:	07f2      	lsls	r2, r6, #31
 800b4d4:	d505      	bpl.n	800b4e2 <_dtoa_r+0x4aa>
 800b4d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4da:	f7f5 f8ad 	bl	8000638 <__aeabi_dmul>
 800b4de:	3501      	adds	r5, #1
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	1076      	asrs	r6, r6, #1
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	e772      	b.n	800b3ce <_dtoa_r+0x396>
 800b4e8:	2502      	movs	r5, #2
 800b4ea:	e774      	b.n	800b3d6 <_dtoa_r+0x39e>
 800b4ec:	f8cd a020 	str.w	sl, [sp, #32]
 800b4f0:	464f      	mov	r7, r9
 800b4f2:	e791      	b.n	800b418 <_dtoa_r+0x3e0>
 800b4f4:	4b4d      	ldr	r3, [pc, #308]	; (800b62c <_dtoa_r+0x5f4>)
 800b4f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b500:	2b00      	cmp	r3, #0
 800b502:	d047      	beq.n	800b594 <_dtoa_r+0x55c>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	2000      	movs	r0, #0
 800b50a:	494e      	ldr	r1, [pc, #312]	; (800b644 <_dtoa_r+0x60c>)
 800b50c:	f7f5 f9be 	bl	800088c <__aeabi_ddiv>
 800b510:	462a      	mov	r2, r5
 800b512:	4633      	mov	r3, r6
 800b514:	f7f4 fed8 	bl	80002c8 <__aeabi_dsub>
 800b518:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b51c:	465d      	mov	r5, fp
 800b51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b522:	f7f5 fb39 	bl	8000b98 <__aeabi_d2iz>
 800b526:	4606      	mov	r6, r0
 800b528:	f7f5 f81c 	bl	8000564 <__aeabi_i2d>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b534:	f7f4 fec8 	bl	80002c8 <__aeabi_dsub>
 800b538:	3630      	adds	r6, #48	; 0x30
 800b53a:	f805 6b01 	strb.w	r6, [r5], #1
 800b53e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b542:	e9cd 0100 	strd	r0, r1, [sp]
 800b546:	f7f5 fae9 	bl	8000b1c <__aeabi_dcmplt>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d163      	bne.n	800b616 <_dtoa_r+0x5de>
 800b54e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b552:	2000      	movs	r0, #0
 800b554:	4937      	ldr	r1, [pc, #220]	; (800b634 <_dtoa_r+0x5fc>)
 800b556:	f7f4 feb7 	bl	80002c8 <__aeabi_dsub>
 800b55a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b55e:	f7f5 fadd 	bl	8000b1c <__aeabi_dcmplt>
 800b562:	2800      	cmp	r0, #0
 800b564:	f040 80b7 	bne.w	800b6d6 <_dtoa_r+0x69e>
 800b568:	eba5 030b 	sub.w	r3, r5, fp
 800b56c:	429f      	cmp	r7, r3
 800b56e:	f77f af7c 	ble.w	800b46a <_dtoa_r+0x432>
 800b572:	2200      	movs	r2, #0
 800b574:	4b30      	ldr	r3, [pc, #192]	; (800b638 <_dtoa_r+0x600>)
 800b576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b57a:	f7f5 f85d 	bl	8000638 <__aeabi_dmul>
 800b57e:	2200      	movs	r2, #0
 800b580:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b584:	4b2c      	ldr	r3, [pc, #176]	; (800b638 <_dtoa_r+0x600>)
 800b586:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b58a:	f7f5 f855 	bl	8000638 <__aeabi_dmul>
 800b58e:	e9cd 0100 	strd	r0, r1, [sp]
 800b592:	e7c4      	b.n	800b51e <_dtoa_r+0x4e6>
 800b594:	462a      	mov	r2, r5
 800b596:	4633      	mov	r3, r6
 800b598:	f7f5 f84e 	bl	8000638 <__aeabi_dmul>
 800b59c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b5a0:	eb0b 0507 	add.w	r5, fp, r7
 800b5a4:	465e      	mov	r6, fp
 800b5a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5aa:	f7f5 faf5 	bl	8000b98 <__aeabi_d2iz>
 800b5ae:	4607      	mov	r7, r0
 800b5b0:	f7f4 ffd8 	bl	8000564 <__aeabi_i2d>
 800b5b4:	3730      	adds	r7, #48	; 0x30
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5be:	f7f4 fe83 	bl	80002c8 <__aeabi_dsub>
 800b5c2:	f806 7b01 	strb.w	r7, [r6], #1
 800b5c6:	42ae      	cmp	r6, r5
 800b5c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b5cc:	f04f 0200 	mov.w	r2, #0
 800b5d0:	d126      	bne.n	800b620 <_dtoa_r+0x5e8>
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <_dtoa_r+0x60c>)
 800b5d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5d8:	f7f4 fe78 	bl	80002cc <__adddf3>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5e4:	f7f5 fab8 	bl	8000b58 <__aeabi_dcmpgt>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d174      	bne.n	800b6d6 <_dtoa_r+0x69e>
 800b5ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	4914      	ldr	r1, [pc, #80]	; (800b644 <_dtoa_r+0x60c>)
 800b5f4:	f7f4 fe68 	bl	80002c8 <__aeabi_dsub>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b600:	f7f5 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 800b604:	2800      	cmp	r0, #0
 800b606:	f43f af30 	beq.w	800b46a <_dtoa_r+0x432>
 800b60a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b60e:	2b30      	cmp	r3, #48	; 0x30
 800b610:	f105 32ff 	add.w	r2, r5, #4294967295
 800b614:	d002      	beq.n	800b61c <_dtoa_r+0x5e4>
 800b616:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b61a:	e04a      	b.n	800b6b2 <_dtoa_r+0x67a>
 800b61c:	4615      	mov	r5, r2
 800b61e:	e7f4      	b.n	800b60a <_dtoa_r+0x5d2>
 800b620:	4b05      	ldr	r3, [pc, #20]	; (800b638 <_dtoa_r+0x600>)
 800b622:	f7f5 f809 	bl	8000638 <__aeabi_dmul>
 800b626:	e9cd 0100 	strd	r0, r1, [sp]
 800b62a:	e7bc      	b.n	800b5a6 <_dtoa_r+0x56e>
 800b62c:	0800d1d8 	.word	0x0800d1d8
 800b630:	0800d1b0 	.word	0x0800d1b0
 800b634:	3ff00000 	.word	0x3ff00000
 800b638:	40240000 	.word	0x40240000
 800b63c:	401c0000 	.word	0x401c0000
 800b640:	40140000 	.word	0x40140000
 800b644:	3fe00000 	.word	0x3fe00000
 800b648:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b64c:	465d      	mov	r5, fp
 800b64e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b652:	4630      	mov	r0, r6
 800b654:	4639      	mov	r1, r7
 800b656:	f7f5 f919 	bl	800088c <__aeabi_ddiv>
 800b65a:	f7f5 fa9d 	bl	8000b98 <__aeabi_d2iz>
 800b65e:	4680      	mov	r8, r0
 800b660:	f7f4 ff80 	bl	8000564 <__aeabi_i2d>
 800b664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b668:	f7f4 ffe6 	bl	8000638 <__aeabi_dmul>
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	4630      	mov	r0, r6
 800b672:	4639      	mov	r1, r7
 800b674:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b678:	f7f4 fe26 	bl	80002c8 <__aeabi_dsub>
 800b67c:	f805 6b01 	strb.w	r6, [r5], #1
 800b680:	eba5 060b 	sub.w	r6, r5, fp
 800b684:	45b1      	cmp	r9, r6
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	d139      	bne.n	800b700 <_dtoa_r+0x6c8>
 800b68c:	f7f4 fe1e 	bl	80002cc <__adddf3>
 800b690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b694:	4606      	mov	r6, r0
 800b696:	460f      	mov	r7, r1
 800b698:	f7f5 fa5e 	bl	8000b58 <__aeabi_dcmpgt>
 800b69c:	b9c8      	cbnz	r0, 800b6d2 <_dtoa_r+0x69a>
 800b69e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	f7f5 fa2f 	bl	8000b08 <__aeabi_dcmpeq>
 800b6aa:	b110      	cbz	r0, 800b6b2 <_dtoa_r+0x67a>
 800b6ac:	f018 0f01 	tst.w	r8, #1
 800b6b0:	d10f      	bne.n	800b6d2 <_dtoa_r+0x69a>
 800b6b2:	9904      	ldr	r1, [sp, #16]
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f000 fe06 	bl	800c2c6 <_Bfree>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6be:	702b      	strb	r3, [r5, #0]
 800b6c0:	f10a 0301 	add.w	r3, sl, #1
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 8241 	beq.w	800bb50 <_dtoa_r+0xb18>
 800b6ce:	601d      	str	r5, [r3, #0]
 800b6d0:	e23e      	b.n	800bb50 <_dtoa_r+0xb18>
 800b6d2:	f8cd a020 	str.w	sl, [sp, #32]
 800b6d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6da:	2a39      	cmp	r2, #57	; 0x39
 800b6dc:	f105 33ff 	add.w	r3, r5, #4294967295
 800b6e0:	d108      	bne.n	800b6f4 <_dtoa_r+0x6bc>
 800b6e2:	459b      	cmp	fp, r3
 800b6e4:	d10a      	bne.n	800b6fc <_dtoa_r+0x6c4>
 800b6e6:	9b08      	ldr	r3, [sp, #32]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	9308      	str	r3, [sp, #32]
 800b6ec:	2330      	movs	r3, #48	; 0x30
 800b6ee:	f88b 3000 	strb.w	r3, [fp]
 800b6f2:	465b      	mov	r3, fp
 800b6f4:	781a      	ldrb	r2, [r3, #0]
 800b6f6:	3201      	adds	r2, #1
 800b6f8:	701a      	strb	r2, [r3, #0]
 800b6fa:	e78c      	b.n	800b616 <_dtoa_r+0x5de>
 800b6fc:	461d      	mov	r5, r3
 800b6fe:	e7ea      	b.n	800b6d6 <_dtoa_r+0x69e>
 800b700:	2200      	movs	r2, #0
 800b702:	4b9b      	ldr	r3, [pc, #620]	; (800b970 <_dtoa_r+0x938>)
 800b704:	f7f4 ff98 	bl	8000638 <__aeabi_dmul>
 800b708:	2200      	movs	r2, #0
 800b70a:	2300      	movs	r3, #0
 800b70c:	4606      	mov	r6, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	f7f5 f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 800b714:	2800      	cmp	r0, #0
 800b716:	d09a      	beq.n	800b64e <_dtoa_r+0x616>
 800b718:	e7cb      	b.n	800b6b2 <_dtoa_r+0x67a>
 800b71a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b71c:	2a00      	cmp	r2, #0
 800b71e:	f000 808b 	beq.w	800b838 <_dtoa_r+0x800>
 800b722:	9a06      	ldr	r2, [sp, #24]
 800b724:	2a01      	cmp	r2, #1
 800b726:	dc6e      	bgt.n	800b806 <_dtoa_r+0x7ce>
 800b728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b72a:	2a00      	cmp	r2, #0
 800b72c:	d067      	beq.n	800b7fe <_dtoa_r+0x7c6>
 800b72e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b732:	9f07      	ldr	r7, [sp, #28]
 800b734:	9d05      	ldr	r5, [sp, #20]
 800b736:	9a05      	ldr	r2, [sp, #20]
 800b738:	2101      	movs	r1, #1
 800b73a:	441a      	add	r2, r3
 800b73c:	4620      	mov	r0, r4
 800b73e:	9205      	str	r2, [sp, #20]
 800b740:	4498      	add	r8, r3
 800b742:	f000 fe9e 	bl	800c482 <__i2b>
 800b746:	4606      	mov	r6, r0
 800b748:	2d00      	cmp	r5, #0
 800b74a:	dd0c      	ble.n	800b766 <_dtoa_r+0x72e>
 800b74c:	f1b8 0f00 	cmp.w	r8, #0
 800b750:	dd09      	ble.n	800b766 <_dtoa_r+0x72e>
 800b752:	4545      	cmp	r5, r8
 800b754:	9a05      	ldr	r2, [sp, #20]
 800b756:	462b      	mov	r3, r5
 800b758:	bfa8      	it	ge
 800b75a:	4643      	movge	r3, r8
 800b75c:	1ad2      	subs	r2, r2, r3
 800b75e:	9205      	str	r2, [sp, #20]
 800b760:	1aed      	subs	r5, r5, r3
 800b762:	eba8 0803 	sub.w	r8, r8, r3
 800b766:	9b07      	ldr	r3, [sp, #28]
 800b768:	b1eb      	cbz	r3, 800b7a6 <_dtoa_r+0x76e>
 800b76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d067      	beq.n	800b840 <_dtoa_r+0x808>
 800b770:	b18f      	cbz	r7, 800b796 <_dtoa_r+0x75e>
 800b772:	4631      	mov	r1, r6
 800b774:	463a      	mov	r2, r7
 800b776:	4620      	mov	r0, r4
 800b778:	f000 ff22 	bl	800c5c0 <__pow5mult>
 800b77c:	9a04      	ldr	r2, [sp, #16]
 800b77e:	4601      	mov	r1, r0
 800b780:	4606      	mov	r6, r0
 800b782:	4620      	mov	r0, r4
 800b784:	f000 fe86 	bl	800c494 <__multiply>
 800b788:	9904      	ldr	r1, [sp, #16]
 800b78a:	9008      	str	r0, [sp, #32]
 800b78c:	4620      	mov	r0, r4
 800b78e:	f000 fd9a 	bl	800c2c6 <_Bfree>
 800b792:	9b08      	ldr	r3, [sp, #32]
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	9b07      	ldr	r3, [sp, #28]
 800b798:	1bda      	subs	r2, r3, r7
 800b79a:	d004      	beq.n	800b7a6 <_dtoa_r+0x76e>
 800b79c:	9904      	ldr	r1, [sp, #16]
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f000 ff0e 	bl	800c5c0 <__pow5mult>
 800b7a4:	9004      	str	r0, [sp, #16]
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 fe6a 	bl	800c482 <__i2b>
 800b7ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 81d0 	beq.w	800bb58 <_dtoa_r+0xb20>
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 feff 	bl	800c5c0 <__pow5mult>
 800b7c2:	9b06      	ldr	r3, [sp, #24]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	4607      	mov	r7, r0
 800b7c8:	dc40      	bgt.n	800b84c <_dtoa_r+0x814>
 800b7ca:	9b00      	ldr	r3, [sp, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d139      	bne.n	800b844 <_dtoa_r+0x80c>
 800b7d0:	9b01      	ldr	r3, [sp, #4]
 800b7d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d136      	bne.n	800b848 <_dtoa_r+0x810>
 800b7da:	9b01      	ldr	r3, [sp, #4]
 800b7dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7e0:	0d1b      	lsrs	r3, r3, #20
 800b7e2:	051b      	lsls	r3, r3, #20
 800b7e4:	b12b      	cbz	r3, 800b7f2 <_dtoa_r+0x7ba>
 800b7e6:	9b05      	ldr	r3, [sp, #20]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	9305      	str	r3, [sp, #20]
 800b7ec:	f108 0801 	add.w	r8, r8, #1
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	9307      	str	r3, [sp, #28]
 800b7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d12a      	bne.n	800b850 <_dtoa_r+0x818>
 800b7fa:	2001      	movs	r0, #1
 800b7fc:	e030      	b.n	800b860 <_dtoa_r+0x828>
 800b7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b800:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b804:	e795      	b.n	800b732 <_dtoa_r+0x6fa>
 800b806:	9b07      	ldr	r3, [sp, #28]
 800b808:	f109 37ff 	add.w	r7, r9, #4294967295
 800b80c:	42bb      	cmp	r3, r7
 800b80e:	bfbf      	itttt	lt
 800b810:	9b07      	ldrlt	r3, [sp, #28]
 800b812:	9707      	strlt	r7, [sp, #28]
 800b814:	1afa      	sublt	r2, r7, r3
 800b816:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b818:	bfbb      	ittet	lt
 800b81a:	189b      	addlt	r3, r3, r2
 800b81c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b81e:	1bdf      	subge	r7, r3, r7
 800b820:	2700      	movlt	r7, #0
 800b822:	f1b9 0f00 	cmp.w	r9, #0
 800b826:	bfb5      	itete	lt
 800b828:	9b05      	ldrlt	r3, [sp, #20]
 800b82a:	9d05      	ldrge	r5, [sp, #20]
 800b82c:	eba3 0509 	sublt.w	r5, r3, r9
 800b830:	464b      	movge	r3, r9
 800b832:	bfb8      	it	lt
 800b834:	2300      	movlt	r3, #0
 800b836:	e77e      	b.n	800b736 <_dtoa_r+0x6fe>
 800b838:	9f07      	ldr	r7, [sp, #28]
 800b83a:	9d05      	ldr	r5, [sp, #20]
 800b83c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b83e:	e783      	b.n	800b748 <_dtoa_r+0x710>
 800b840:	9a07      	ldr	r2, [sp, #28]
 800b842:	e7ab      	b.n	800b79c <_dtoa_r+0x764>
 800b844:	2300      	movs	r3, #0
 800b846:	e7d4      	b.n	800b7f2 <_dtoa_r+0x7ba>
 800b848:	9b00      	ldr	r3, [sp, #0]
 800b84a:	e7d2      	b.n	800b7f2 <_dtoa_r+0x7ba>
 800b84c:	2300      	movs	r3, #0
 800b84e:	9307      	str	r3, [sp, #28]
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b856:	6918      	ldr	r0, [r3, #16]
 800b858:	f000 fdc5 	bl	800c3e6 <__hi0bits>
 800b85c:	f1c0 0020 	rsb	r0, r0, #32
 800b860:	4440      	add	r0, r8
 800b862:	f010 001f 	ands.w	r0, r0, #31
 800b866:	d047      	beq.n	800b8f8 <_dtoa_r+0x8c0>
 800b868:	f1c0 0320 	rsb	r3, r0, #32
 800b86c:	2b04      	cmp	r3, #4
 800b86e:	dd3b      	ble.n	800b8e8 <_dtoa_r+0x8b0>
 800b870:	9b05      	ldr	r3, [sp, #20]
 800b872:	f1c0 001c 	rsb	r0, r0, #28
 800b876:	4403      	add	r3, r0
 800b878:	9305      	str	r3, [sp, #20]
 800b87a:	4405      	add	r5, r0
 800b87c:	4480      	add	r8, r0
 800b87e:	9b05      	ldr	r3, [sp, #20]
 800b880:	2b00      	cmp	r3, #0
 800b882:	dd05      	ble.n	800b890 <_dtoa_r+0x858>
 800b884:	461a      	mov	r2, r3
 800b886:	9904      	ldr	r1, [sp, #16]
 800b888:	4620      	mov	r0, r4
 800b88a:	f000 fee7 	bl	800c65c <__lshift>
 800b88e:	9004      	str	r0, [sp, #16]
 800b890:	f1b8 0f00 	cmp.w	r8, #0
 800b894:	dd05      	ble.n	800b8a2 <_dtoa_r+0x86a>
 800b896:	4639      	mov	r1, r7
 800b898:	4642      	mov	r2, r8
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fede 	bl	800c65c <__lshift>
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8a4:	b353      	cbz	r3, 800b8fc <_dtoa_r+0x8c4>
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	9804      	ldr	r0, [sp, #16]
 800b8aa:	f000 ff2b 	bl	800c704 <__mcmp>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	da24      	bge.n	800b8fc <_dtoa_r+0x8c4>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	220a      	movs	r2, #10
 800b8b6:	9904      	ldr	r1, [sp, #16]
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fd1b 	bl	800c2f4 <__multadd>
 800b8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c0:	9004      	str	r0, [sp, #16]
 800b8c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 814d 	beq.w	800bb66 <_dtoa_r+0xb2e>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	220a      	movs	r2, #10
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 fd0e 	bl	800c2f4 <__multadd>
 800b8d8:	9b02      	ldr	r3, [sp, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	4606      	mov	r6, r0
 800b8de:	dc4f      	bgt.n	800b980 <_dtoa_r+0x948>
 800b8e0:	9b06      	ldr	r3, [sp, #24]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	dd4c      	ble.n	800b980 <_dtoa_r+0x948>
 800b8e6:	e011      	b.n	800b90c <_dtoa_r+0x8d4>
 800b8e8:	d0c9      	beq.n	800b87e <_dtoa_r+0x846>
 800b8ea:	9a05      	ldr	r2, [sp, #20]
 800b8ec:	331c      	adds	r3, #28
 800b8ee:	441a      	add	r2, r3
 800b8f0:	9205      	str	r2, [sp, #20]
 800b8f2:	441d      	add	r5, r3
 800b8f4:	4498      	add	r8, r3
 800b8f6:	e7c2      	b.n	800b87e <_dtoa_r+0x846>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	e7f6      	b.n	800b8ea <_dtoa_r+0x8b2>
 800b8fc:	f1b9 0f00 	cmp.w	r9, #0
 800b900:	dc38      	bgt.n	800b974 <_dtoa_r+0x93c>
 800b902:	9b06      	ldr	r3, [sp, #24]
 800b904:	2b02      	cmp	r3, #2
 800b906:	dd35      	ble.n	800b974 <_dtoa_r+0x93c>
 800b908:	f8cd 9008 	str.w	r9, [sp, #8]
 800b90c:	9b02      	ldr	r3, [sp, #8]
 800b90e:	b963      	cbnz	r3, 800b92a <_dtoa_r+0x8f2>
 800b910:	4639      	mov	r1, r7
 800b912:	2205      	movs	r2, #5
 800b914:	4620      	mov	r0, r4
 800b916:	f000 fced 	bl	800c2f4 <__multadd>
 800b91a:	4601      	mov	r1, r0
 800b91c:	4607      	mov	r7, r0
 800b91e:	9804      	ldr	r0, [sp, #16]
 800b920:	f000 fef0 	bl	800c704 <__mcmp>
 800b924:	2800      	cmp	r0, #0
 800b926:	f73f adcc 	bgt.w	800b4c2 <_dtoa_r+0x48a>
 800b92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b92c:	465d      	mov	r5, fp
 800b92e:	ea6f 0a03 	mvn.w	sl, r3
 800b932:	f04f 0900 	mov.w	r9, #0
 800b936:	4639      	mov	r1, r7
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 fcc4 	bl	800c2c6 <_Bfree>
 800b93e:	2e00      	cmp	r6, #0
 800b940:	f43f aeb7 	beq.w	800b6b2 <_dtoa_r+0x67a>
 800b944:	f1b9 0f00 	cmp.w	r9, #0
 800b948:	d005      	beq.n	800b956 <_dtoa_r+0x91e>
 800b94a:	45b1      	cmp	r9, r6
 800b94c:	d003      	beq.n	800b956 <_dtoa_r+0x91e>
 800b94e:	4649      	mov	r1, r9
 800b950:	4620      	mov	r0, r4
 800b952:	f000 fcb8 	bl	800c2c6 <_Bfree>
 800b956:	4631      	mov	r1, r6
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 fcb4 	bl	800c2c6 <_Bfree>
 800b95e:	e6a8      	b.n	800b6b2 <_dtoa_r+0x67a>
 800b960:	2700      	movs	r7, #0
 800b962:	463e      	mov	r6, r7
 800b964:	e7e1      	b.n	800b92a <_dtoa_r+0x8f2>
 800b966:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b96a:	463e      	mov	r6, r7
 800b96c:	e5a9      	b.n	800b4c2 <_dtoa_r+0x48a>
 800b96e:	bf00      	nop
 800b970:	40240000 	.word	0x40240000
 800b974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b976:	f8cd 9008 	str.w	r9, [sp, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 80fa 	beq.w	800bb74 <_dtoa_r+0xb3c>
 800b980:	2d00      	cmp	r5, #0
 800b982:	dd05      	ble.n	800b990 <_dtoa_r+0x958>
 800b984:	4631      	mov	r1, r6
 800b986:	462a      	mov	r2, r5
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 fe67 	bl	800c65c <__lshift>
 800b98e:	4606      	mov	r6, r0
 800b990:	9b07      	ldr	r3, [sp, #28]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d04c      	beq.n	800ba30 <_dtoa_r+0x9f8>
 800b996:	6871      	ldr	r1, [r6, #4]
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 fc60 	bl	800c25e <_Balloc>
 800b99e:	6932      	ldr	r2, [r6, #16]
 800b9a0:	3202      	adds	r2, #2
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	0092      	lsls	r2, r2, #2
 800b9a6:	f106 010c 	add.w	r1, r6, #12
 800b9aa:	300c      	adds	r0, #12
 800b9ac:	f000 fc4c 	bl	800c248 <memcpy>
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fe51 	bl	800c65c <__lshift>
 800b9ba:	9b00      	ldr	r3, [sp, #0]
 800b9bc:	f8cd b014 	str.w	fp, [sp, #20]
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	46b1      	mov	r9, r6
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	9804      	ldr	r0, [sp, #16]
 800b9ce:	f7ff faa7 	bl	800af20 <quorem>
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b9da:	9804      	ldr	r0, [sp, #16]
 800b9dc:	f000 fe92 	bl	800c704 <__mcmp>
 800b9e0:	4632      	mov	r2, r6
 800b9e2:	9000      	str	r0, [sp, #0]
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 fea6 	bl	800c738 <__mdiff>
 800b9ec:	68c3      	ldr	r3, [r0, #12]
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	bb03      	cbnz	r3, 800ba34 <_dtoa_r+0x9fc>
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	9008      	str	r0, [sp, #32]
 800b9f6:	9804      	ldr	r0, [sp, #16]
 800b9f8:	f000 fe84 	bl	800c704 <__mcmp>
 800b9fc:	9a08      	ldr	r2, [sp, #32]
 800b9fe:	4603      	mov	r3, r0
 800ba00:	4611      	mov	r1, r2
 800ba02:	4620      	mov	r0, r4
 800ba04:	9308      	str	r3, [sp, #32]
 800ba06:	f000 fc5e 	bl	800c2c6 <_Bfree>
 800ba0a:	9b08      	ldr	r3, [sp, #32]
 800ba0c:	b9a3      	cbnz	r3, 800ba38 <_dtoa_r+0xa00>
 800ba0e:	9a06      	ldr	r2, [sp, #24]
 800ba10:	b992      	cbnz	r2, 800ba38 <_dtoa_r+0xa00>
 800ba12:	9a07      	ldr	r2, [sp, #28]
 800ba14:	b982      	cbnz	r2, 800ba38 <_dtoa_r+0xa00>
 800ba16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba1a:	d029      	beq.n	800ba70 <_dtoa_r+0xa38>
 800ba1c:	9b00      	ldr	r3, [sp, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	dd01      	ble.n	800ba26 <_dtoa_r+0x9ee>
 800ba22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ba26:	9b05      	ldr	r3, [sp, #20]
 800ba28:	1c5d      	adds	r5, r3, #1
 800ba2a:	f883 8000 	strb.w	r8, [r3]
 800ba2e:	e782      	b.n	800b936 <_dtoa_r+0x8fe>
 800ba30:	4630      	mov	r0, r6
 800ba32:	e7c2      	b.n	800b9ba <_dtoa_r+0x982>
 800ba34:	2301      	movs	r3, #1
 800ba36:	e7e3      	b.n	800ba00 <_dtoa_r+0x9c8>
 800ba38:	9a00      	ldr	r2, [sp, #0]
 800ba3a:	2a00      	cmp	r2, #0
 800ba3c:	db04      	blt.n	800ba48 <_dtoa_r+0xa10>
 800ba3e:	d125      	bne.n	800ba8c <_dtoa_r+0xa54>
 800ba40:	9a06      	ldr	r2, [sp, #24]
 800ba42:	bb1a      	cbnz	r2, 800ba8c <_dtoa_r+0xa54>
 800ba44:	9a07      	ldr	r2, [sp, #28]
 800ba46:	bb0a      	cbnz	r2, 800ba8c <_dtoa_r+0xa54>
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	ddec      	ble.n	800ba26 <_dtoa_r+0x9ee>
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	9904      	ldr	r1, [sp, #16]
 800ba50:	4620      	mov	r0, r4
 800ba52:	f000 fe03 	bl	800c65c <__lshift>
 800ba56:	4639      	mov	r1, r7
 800ba58:	9004      	str	r0, [sp, #16]
 800ba5a:	f000 fe53 	bl	800c704 <__mcmp>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	dc03      	bgt.n	800ba6a <_dtoa_r+0xa32>
 800ba62:	d1e0      	bne.n	800ba26 <_dtoa_r+0x9ee>
 800ba64:	f018 0f01 	tst.w	r8, #1
 800ba68:	d0dd      	beq.n	800ba26 <_dtoa_r+0x9ee>
 800ba6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba6e:	d1d8      	bne.n	800ba22 <_dtoa_r+0x9ea>
 800ba70:	9b05      	ldr	r3, [sp, #20]
 800ba72:	9a05      	ldr	r2, [sp, #20]
 800ba74:	1c5d      	adds	r5, r3, #1
 800ba76:	2339      	movs	r3, #57	; 0x39
 800ba78:	7013      	strb	r3, [r2, #0]
 800ba7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba7e:	2b39      	cmp	r3, #57	; 0x39
 800ba80:	f105 32ff 	add.w	r2, r5, #4294967295
 800ba84:	d04f      	beq.n	800bb26 <_dtoa_r+0xaee>
 800ba86:	3301      	adds	r3, #1
 800ba88:	7013      	strb	r3, [r2, #0]
 800ba8a:	e754      	b.n	800b936 <_dtoa_r+0x8fe>
 800ba8c:	9a05      	ldr	r2, [sp, #20]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f102 0501 	add.w	r5, r2, #1
 800ba94:	dd06      	ble.n	800baa4 <_dtoa_r+0xa6c>
 800ba96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba9a:	d0e9      	beq.n	800ba70 <_dtoa_r+0xa38>
 800ba9c:	f108 0801 	add.w	r8, r8, #1
 800baa0:	9b05      	ldr	r3, [sp, #20]
 800baa2:	e7c2      	b.n	800ba2a <_dtoa_r+0x9f2>
 800baa4:	9a02      	ldr	r2, [sp, #8]
 800baa6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800baaa:	eba5 030b 	sub.w	r3, r5, fp
 800baae:	4293      	cmp	r3, r2
 800bab0:	d021      	beq.n	800baf6 <_dtoa_r+0xabe>
 800bab2:	2300      	movs	r3, #0
 800bab4:	220a      	movs	r2, #10
 800bab6:	9904      	ldr	r1, [sp, #16]
 800bab8:	4620      	mov	r0, r4
 800baba:	f000 fc1b 	bl	800c2f4 <__multadd>
 800babe:	45b1      	cmp	r9, r6
 800bac0:	9004      	str	r0, [sp, #16]
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	f04f 020a 	mov.w	r2, #10
 800baca:	4649      	mov	r1, r9
 800bacc:	4620      	mov	r0, r4
 800bace:	d105      	bne.n	800badc <_dtoa_r+0xaa4>
 800bad0:	f000 fc10 	bl	800c2f4 <__multadd>
 800bad4:	4681      	mov	r9, r0
 800bad6:	4606      	mov	r6, r0
 800bad8:	9505      	str	r5, [sp, #20]
 800bada:	e776      	b.n	800b9ca <_dtoa_r+0x992>
 800badc:	f000 fc0a 	bl	800c2f4 <__multadd>
 800bae0:	4631      	mov	r1, r6
 800bae2:	4681      	mov	r9, r0
 800bae4:	2300      	movs	r3, #0
 800bae6:	220a      	movs	r2, #10
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 fc03 	bl	800c2f4 <__multadd>
 800baee:	4606      	mov	r6, r0
 800baf0:	e7f2      	b.n	800bad8 <_dtoa_r+0xaa0>
 800baf2:	f04f 0900 	mov.w	r9, #0
 800baf6:	2201      	movs	r2, #1
 800baf8:	9904      	ldr	r1, [sp, #16]
 800bafa:	4620      	mov	r0, r4
 800bafc:	f000 fdae 	bl	800c65c <__lshift>
 800bb00:	4639      	mov	r1, r7
 800bb02:	9004      	str	r0, [sp, #16]
 800bb04:	f000 fdfe 	bl	800c704 <__mcmp>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	dcb6      	bgt.n	800ba7a <_dtoa_r+0xa42>
 800bb0c:	d102      	bne.n	800bb14 <_dtoa_r+0xadc>
 800bb0e:	f018 0f01 	tst.w	r8, #1
 800bb12:	d1b2      	bne.n	800ba7a <_dtoa_r+0xa42>
 800bb14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb18:	2b30      	cmp	r3, #48	; 0x30
 800bb1a:	f105 32ff 	add.w	r2, r5, #4294967295
 800bb1e:	f47f af0a 	bne.w	800b936 <_dtoa_r+0x8fe>
 800bb22:	4615      	mov	r5, r2
 800bb24:	e7f6      	b.n	800bb14 <_dtoa_r+0xadc>
 800bb26:	4593      	cmp	fp, r2
 800bb28:	d105      	bne.n	800bb36 <_dtoa_r+0xafe>
 800bb2a:	2331      	movs	r3, #49	; 0x31
 800bb2c:	f10a 0a01 	add.w	sl, sl, #1
 800bb30:	f88b 3000 	strb.w	r3, [fp]
 800bb34:	e6ff      	b.n	800b936 <_dtoa_r+0x8fe>
 800bb36:	4615      	mov	r5, r2
 800bb38:	e79f      	b.n	800ba7a <_dtoa_r+0xa42>
 800bb3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bba0 <_dtoa_r+0xb68>
 800bb3e:	e007      	b.n	800bb50 <_dtoa_r+0xb18>
 800bb40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb42:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bba4 <_dtoa_r+0xb6c>
 800bb46:	b11b      	cbz	r3, 800bb50 <_dtoa_r+0xb18>
 800bb48:	f10b 0308 	add.w	r3, fp, #8
 800bb4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	4658      	mov	r0, fp
 800bb52:	b017      	add	sp, #92	; 0x5c
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	9b06      	ldr	r3, [sp, #24]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	f77f ae35 	ble.w	800b7ca <_dtoa_r+0x792>
 800bb60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb62:	9307      	str	r3, [sp, #28]
 800bb64:	e649      	b.n	800b7fa <_dtoa_r+0x7c2>
 800bb66:	9b02      	ldr	r3, [sp, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dc03      	bgt.n	800bb74 <_dtoa_r+0xb3c>
 800bb6c:	9b06      	ldr	r3, [sp, #24]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	f73f aecc 	bgt.w	800b90c <_dtoa_r+0x8d4>
 800bb74:	465d      	mov	r5, fp
 800bb76:	4639      	mov	r1, r7
 800bb78:	9804      	ldr	r0, [sp, #16]
 800bb7a:	f7ff f9d1 	bl	800af20 <quorem>
 800bb7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bb82:	f805 8b01 	strb.w	r8, [r5], #1
 800bb86:	9a02      	ldr	r2, [sp, #8]
 800bb88:	eba5 030b 	sub.w	r3, r5, fp
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	ddb0      	ble.n	800baf2 <_dtoa_r+0xaba>
 800bb90:	2300      	movs	r3, #0
 800bb92:	220a      	movs	r2, #10
 800bb94:	9904      	ldr	r1, [sp, #16]
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 fbac 	bl	800c2f4 <__multadd>
 800bb9c:	9004      	str	r0, [sp, #16]
 800bb9e:	e7ea      	b.n	800bb76 <_dtoa_r+0xb3e>
 800bba0:	0800d120 	.word	0x0800d120
 800bba4:	0800d198 	.word	0x0800d198

0800bba8 <rshift>:
 800bba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbaa:	6906      	ldr	r6, [r0, #16]
 800bbac:	114b      	asrs	r3, r1, #5
 800bbae:	429e      	cmp	r6, r3
 800bbb0:	f100 0414 	add.w	r4, r0, #20
 800bbb4:	dd30      	ble.n	800bc18 <rshift+0x70>
 800bbb6:	f011 011f 	ands.w	r1, r1, #31
 800bbba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bbbe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bbc2:	d108      	bne.n	800bbd6 <rshift+0x2e>
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	42b2      	cmp	r2, r6
 800bbc8:	460b      	mov	r3, r1
 800bbca:	d211      	bcs.n	800bbf0 <rshift+0x48>
 800bbcc:	f852 3b04 	ldr.w	r3, [r2], #4
 800bbd0:	f841 3b04 	str.w	r3, [r1], #4
 800bbd4:	e7f7      	b.n	800bbc6 <rshift+0x1e>
 800bbd6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800bbda:	f1c1 0c20 	rsb	ip, r1, #32
 800bbde:	40cd      	lsrs	r5, r1
 800bbe0:	3204      	adds	r2, #4
 800bbe2:	4623      	mov	r3, r4
 800bbe4:	42b2      	cmp	r2, r6
 800bbe6:	4617      	mov	r7, r2
 800bbe8:	d30c      	bcc.n	800bc04 <rshift+0x5c>
 800bbea:	601d      	str	r5, [r3, #0]
 800bbec:	b105      	cbz	r5, 800bbf0 <rshift+0x48>
 800bbee:	3304      	adds	r3, #4
 800bbf0:	1b1a      	subs	r2, r3, r4
 800bbf2:	42a3      	cmp	r3, r4
 800bbf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbf8:	bf08      	it	eq
 800bbfa:	2300      	moveq	r3, #0
 800bbfc:	6102      	str	r2, [r0, #16]
 800bbfe:	bf08      	it	eq
 800bc00:	6143      	streq	r3, [r0, #20]
 800bc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc04:	683f      	ldr	r7, [r7, #0]
 800bc06:	fa07 f70c 	lsl.w	r7, r7, ip
 800bc0a:	433d      	orrs	r5, r7
 800bc0c:	f843 5b04 	str.w	r5, [r3], #4
 800bc10:	f852 5b04 	ldr.w	r5, [r2], #4
 800bc14:	40cd      	lsrs	r5, r1
 800bc16:	e7e5      	b.n	800bbe4 <rshift+0x3c>
 800bc18:	4623      	mov	r3, r4
 800bc1a:	e7e9      	b.n	800bbf0 <rshift+0x48>

0800bc1c <__hexdig_fun>:
 800bc1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc20:	2b09      	cmp	r3, #9
 800bc22:	d802      	bhi.n	800bc2a <__hexdig_fun+0xe>
 800bc24:	3820      	subs	r0, #32
 800bc26:	b2c0      	uxtb	r0, r0
 800bc28:	4770      	bx	lr
 800bc2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc2e:	2b05      	cmp	r3, #5
 800bc30:	d801      	bhi.n	800bc36 <__hexdig_fun+0x1a>
 800bc32:	3847      	subs	r0, #71	; 0x47
 800bc34:	e7f7      	b.n	800bc26 <__hexdig_fun+0xa>
 800bc36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bc3a:	2b05      	cmp	r3, #5
 800bc3c:	d801      	bhi.n	800bc42 <__hexdig_fun+0x26>
 800bc3e:	3827      	subs	r0, #39	; 0x27
 800bc40:	e7f1      	b.n	800bc26 <__hexdig_fun+0xa>
 800bc42:	2000      	movs	r0, #0
 800bc44:	4770      	bx	lr

0800bc46 <__gethex>:
 800bc46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	b08b      	sub	sp, #44	; 0x2c
 800bc4c:	468a      	mov	sl, r1
 800bc4e:	9002      	str	r0, [sp, #8]
 800bc50:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bc52:	9306      	str	r3, [sp, #24]
 800bc54:	4690      	mov	r8, r2
 800bc56:	f000 facd 	bl	800c1f4 <__localeconv_l>
 800bc5a:	6803      	ldr	r3, [r0, #0]
 800bc5c:	9303      	str	r3, [sp, #12]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7f4 fad6 	bl	8000210 <strlen>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	9001      	str	r0, [sp, #4]
 800bc68:	4403      	add	r3, r0
 800bc6a:	f04f 0b00 	mov.w	fp, #0
 800bc6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bc72:	9307      	str	r3, [sp, #28]
 800bc74:	f8da 3000 	ldr.w	r3, [sl]
 800bc78:	3302      	adds	r3, #2
 800bc7a:	461f      	mov	r7, r3
 800bc7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc80:	2830      	cmp	r0, #48	; 0x30
 800bc82:	d06c      	beq.n	800bd5e <__gethex+0x118>
 800bc84:	f7ff ffca 	bl	800bc1c <__hexdig_fun>
 800bc88:	4604      	mov	r4, r0
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d16a      	bne.n	800bd64 <__gethex+0x11e>
 800bc8e:	9a01      	ldr	r2, [sp, #4]
 800bc90:	9903      	ldr	r1, [sp, #12]
 800bc92:	4638      	mov	r0, r7
 800bc94:	f001 f8fa 	bl	800ce8c <strncmp>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d166      	bne.n	800bd6a <__gethex+0x124>
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	5cf8      	ldrb	r0, [r7, r3]
 800bca0:	18fe      	adds	r6, r7, r3
 800bca2:	f7ff ffbb 	bl	800bc1c <__hexdig_fun>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d062      	beq.n	800bd70 <__gethex+0x12a>
 800bcaa:	4633      	mov	r3, r6
 800bcac:	7818      	ldrb	r0, [r3, #0]
 800bcae:	2830      	cmp	r0, #48	; 0x30
 800bcb0:	461f      	mov	r7, r3
 800bcb2:	f103 0301 	add.w	r3, r3, #1
 800bcb6:	d0f9      	beq.n	800bcac <__gethex+0x66>
 800bcb8:	f7ff ffb0 	bl	800bc1c <__hexdig_fun>
 800bcbc:	fab0 f580 	clz	r5, r0
 800bcc0:	096d      	lsrs	r5, r5, #5
 800bcc2:	4634      	mov	r4, r6
 800bcc4:	f04f 0b01 	mov.w	fp, #1
 800bcc8:	463a      	mov	r2, r7
 800bcca:	4616      	mov	r6, r2
 800bccc:	3201      	adds	r2, #1
 800bcce:	7830      	ldrb	r0, [r6, #0]
 800bcd0:	f7ff ffa4 	bl	800bc1c <__hexdig_fun>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d1f8      	bne.n	800bcca <__gethex+0x84>
 800bcd8:	9a01      	ldr	r2, [sp, #4]
 800bcda:	9903      	ldr	r1, [sp, #12]
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f001 f8d5 	bl	800ce8c <strncmp>
 800bce2:	b950      	cbnz	r0, 800bcfa <__gethex+0xb4>
 800bce4:	b954      	cbnz	r4, 800bcfc <__gethex+0xb6>
 800bce6:	9b01      	ldr	r3, [sp, #4]
 800bce8:	18f4      	adds	r4, r6, r3
 800bcea:	4622      	mov	r2, r4
 800bcec:	4616      	mov	r6, r2
 800bcee:	3201      	adds	r2, #1
 800bcf0:	7830      	ldrb	r0, [r6, #0]
 800bcf2:	f7ff ff93 	bl	800bc1c <__hexdig_fun>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d1f8      	bne.n	800bcec <__gethex+0xa6>
 800bcfa:	b10c      	cbz	r4, 800bd00 <__gethex+0xba>
 800bcfc:	1ba4      	subs	r4, r4, r6
 800bcfe:	00a4      	lsls	r4, r4, #2
 800bd00:	7833      	ldrb	r3, [r6, #0]
 800bd02:	2b50      	cmp	r3, #80	; 0x50
 800bd04:	d001      	beq.n	800bd0a <__gethex+0xc4>
 800bd06:	2b70      	cmp	r3, #112	; 0x70
 800bd08:	d140      	bne.n	800bd8c <__gethex+0x146>
 800bd0a:	7873      	ldrb	r3, [r6, #1]
 800bd0c:	2b2b      	cmp	r3, #43	; 0x2b
 800bd0e:	d031      	beq.n	800bd74 <__gethex+0x12e>
 800bd10:	2b2d      	cmp	r3, #45	; 0x2d
 800bd12:	d033      	beq.n	800bd7c <__gethex+0x136>
 800bd14:	1c71      	adds	r1, r6, #1
 800bd16:	f04f 0900 	mov.w	r9, #0
 800bd1a:	7808      	ldrb	r0, [r1, #0]
 800bd1c:	f7ff ff7e 	bl	800bc1c <__hexdig_fun>
 800bd20:	1e43      	subs	r3, r0, #1
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	2b18      	cmp	r3, #24
 800bd26:	d831      	bhi.n	800bd8c <__gethex+0x146>
 800bd28:	f1a0 0210 	sub.w	r2, r0, #16
 800bd2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd30:	f7ff ff74 	bl	800bc1c <__hexdig_fun>
 800bd34:	1e43      	subs	r3, r0, #1
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b18      	cmp	r3, #24
 800bd3a:	d922      	bls.n	800bd82 <__gethex+0x13c>
 800bd3c:	f1b9 0f00 	cmp.w	r9, #0
 800bd40:	d000      	beq.n	800bd44 <__gethex+0xfe>
 800bd42:	4252      	negs	r2, r2
 800bd44:	4414      	add	r4, r2
 800bd46:	f8ca 1000 	str.w	r1, [sl]
 800bd4a:	b30d      	cbz	r5, 800bd90 <__gethex+0x14a>
 800bd4c:	f1bb 0f00 	cmp.w	fp, #0
 800bd50:	bf0c      	ite	eq
 800bd52:	2706      	moveq	r7, #6
 800bd54:	2700      	movne	r7, #0
 800bd56:	4638      	mov	r0, r7
 800bd58:	b00b      	add	sp, #44	; 0x2c
 800bd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd5e:	f10b 0b01 	add.w	fp, fp, #1
 800bd62:	e78a      	b.n	800bc7a <__gethex+0x34>
 800bd64:	2500      	movs	r5, #0
 800bd66:	462c      	mov	r4, r5
 800bd68:	e7ae      	b.n	800bcc8 <__gethex+0x82>
 800bd6a:	463e      	mov	r6, r7
 800bd6c:	2501      	movs	r5, #1
 800bd6e:	e7c7      	b.n	800bd00 <__gethex+0xba>
 800bd70:	4604      	mov	r4, r0
 800bd72:	e7fb      	b.n	800bd6c <__gethex+0x126>
 800bd74:	f04f 0900 	mov.w	r9, #0
 800bd78:	1cb1      	adds	r1, r6, #2
 800bd7a:	e7ce      	b.n	800bd1a <__gethex+0xd4>
 800bd7c:	f04f 0901 	mov.w	r9, #1
 800bd80:	e7fa      	b.n	800bd78 <__gethex+0x132>
 800bd82:	230a      	movs	r3, #10
 800bd84:	fb03 0202 	mla	r2, r3, r2, r0
 800bd88:	3a10      	subs	r2, #16
 800bd8a:	e7cf      	b.n	800bd2c <__gethex+0xe6>
 800bd8c:	4631      	mov	r1, r6
 800bd8e:	e7da      	b.n	800bd46 <__gethex+0x100>
 800bd90:	1bf3      	subs	r3, r6, r7
 800bd92:	3b01      	subs	r3, #1
 800bd94:	4629      	mov	r1, r5
 800bd96:	2b07      	cmp	r3, #7
 800bd98:	dc49      	bgt.n	800be2e <__gethex+0x1e8>
 800bd9a:	9802      	ldr	r0, [sp, #8]
 800bd9c:	f000 fa5f 	bl	800c25e <_Balloc>
 800bda0:	9b01      	ldr	r3, [sp, #4]
 800bda2:	f100 0914 	add.w	r9, r0, #20
 800bda6:	f04f 0b00 	mov.w	fp, #0
 800bdaa:	f1c3 0301 	rsb	r3, r3, #1
 800bdae:	4605      	mov	r5, r0
 800bdb0:	f8cd 9010 	str.w	r9, [sp, #16]
 800bdb4:	46da      	mov	sl, fp
 800bdb6:	9308      	str	r3, [sp, #32]
 800bdb8:	42b7      	cmp	r7, r6
 800bdba:	d33b      	bcc.n	800be34 <__gethex+0x1ee>
 800bdbc:	9804      	ldr	r0, [sp, #16]
 800bdbe:	f840 ab04 	str.w	sl, [r0], #4
 800bdc2:	eba0 0009 	sub.w	r0, r0, r9
 800bdc6:	1080      	asrs	r0, r0, #2
 800bdc8:	6128      	str	r0, [r5, #16]
 800bdca:	0147      	lsls	r7, r0, #5
 800bdcc:	4650      	mov	r0, sl
 800bdce:	f000 fb0a 	bl	800c3e6 <__hi0bits>
 800bdd2:	f8d8 6000 	ldr.w	r6, [r8]
 800bdd6:	1a3f      	subs	r7, r7, r0
 800bdd8:	42b7      	cmp	r7, r6
 800bdda:	dd64      	ble.n	800bea6 <__gethex+0x260>
 800bddc:	1bbf      	subs	r7, r7, r6
 800bdde:	4639      	mov	r1, r7
 800bde0:	4628      	mov	r0, r5
 800bde2:	f000 fe19 	bl	800ca18 <__any_on>
 800bde6:	4682      	mov	sl, r0
 800bde8:	b178      	cbz	r0, 800be0a <__gethex+0x1c4>
 800bdea:	1e7b      	subs	r3, r7, #1
 800bdec:	1159      	asrs	r1, r3, #5
 800bdee:	f003 021f 	and.w	r2, r3, #31
 800bdf2:	f04f 0a01 	mov.w	sl, #1
 800bdf6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bdfa:	fa0a f202 	lsl.w	r2, sl, r2
 800bdfe:	420a      	tst	r2, r1
 800be00:	d003      	beq.n	800be0a <__gethex+0x1c4>
 800be02:	4553      	cmp	r3, sl
 800be04:	dc46      	bgt.n	800be94 <__gethex+0x24e>
 800be06:	f04f 0a02 	mov.w	sl, #2
 800be0a:	4639      	mov	r1, r7
 800be0c:	4628      	mov	r0, r5
 800be0e:	f7ff fecb 	bl	800bba8 <rshift>
 800be12:	443c      	add	r4, r7
 800be14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be18:	42a3      	cmp	r3, r4
 800be1a:	da52      	bge.n	800bec2 <__gethex+0x27c>
 800be1c:	4629      	mov	r1, r5
 800be1e:	9802      	ldr	r0, [sp, #8]
 800be20:	f000 fa51 	bl	800c2c6 <_Bfree>
 800be24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be26:	2300      	movs	r3, #0
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	27a3      	movs	r7, #163	; 0xa3
 800be2c:	e793      	b.n	800bd56 <__gethex+0x110>
 800be2e:	3101      	adds	r1, #1
 800be30:	105b      	asrs	r3, r3, #1
 800be32:	e7b0      	b.n	800bd96 <__gethex+0x150>
 800be34:	1e73      	subs	r3, r6, #1
 800be36:	9305      	str	r3, [sp, #20]
 800be38:	9a07      	ldr	r2, [sp, #28]
 800be3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be3e:	4293      	cmp	r3, r2
 800be40:	d018      	beq.n	800be74 <__gethex+0x22e>
 800be42:	f1bb 0f20 	cmp.w	fp, #32
 800be46:	d107      	bne.n	800be58 <__gethex+0x212>
 800be48:	9b04      	ldr	r3, [sp, #16]
 800be4a:	f8c3 a000 	str.w	sl, [r3]
 800be4e:	3304      	adds	r3, #4
 800be50:	f04f 0a00 	mov.w	sl, #0
 800be54:	9304      	str	r3, [sp, #16]
 800be56:	46d3      	mov	fp, sl
 800be58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800be5c:	f7ff fede 	bl	800bc1c <__hexdig_fun>
 800be60:	f000 000f 	and.w	r0, r0, #15
 800be64:	fa00 f00b 	lsl.w	r0, r0, fp
 800be68:	ea4a 0a00 	orr.w	sl, sl, r0
 800be6c:	f10b 0b04 	add.w	fp, fp, #4
 800be70:	9b05      	ldr	r3, [sp, #20]
 800be72:	e00d      	b.n	800be90 <__gethex+0x24a>
 800be74:	9b05      	ldr	r3, [sp, #20]
 800be76:	9a08      	ldr	r2, [sp, #32]
 800be78:	4413      	add	r3, r2
 800be7a:	42bb      	cmp	r3, r7
 800be7c:	d3e1      	bcc.n	800be42 <__gethex+0x1fc>
 800be7e:	4618      	mov	r0, r3
 800be80:	9a01      	ldr	r2, [sp, #4]
 800be82:	9903      	ldr	r1, [sp, #12]
 800be84:	9309      	str	r3, [sp, #36]	; 0x24
 800be86:	f001 f801 	bl	800ce8c <strncmp>
 800be8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d1d8      	bne.n	800be42 <__gethex+0x1fc>
 800be90:	461e      	mov	r6, r3
 800be92:	e791      	b.n	800bdb8 <__gethex+0x172>
 800be94:	1eb9      	subs	r1, r7, #2
 800be96:	4628      	mov	r0, r5
 800be98:	f000 fdbe 	bl	800ca18 <__any_on>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d0b2      	beq.n	800be06 <__gethex+0x1c0>
 800bea0:	f04f 0a03 	mov.w	sl, #3
 800bea4:	e7b1      	b.n	800be0a <__gethex+0x1c4>
 800bea6:	da09      	bge.n	800bebc <__gethex+0x276>
 800bea8:	1bf7      	subs	r7, r6, r7
 800beaa:	4629      	mov	r1, r5
 800beac:	463a      	mov	r2, r7
 800beae:	9802      	ldr	r0, [sp, #8]
 800beb0:	f000 fbd4 	bl	800c65c <__lshift>
 800beb4:	1be4      	subs	r4, r4, r7
 800beb6:	4605      	mov	r5, r0
 800beb8:	f100 0914 	add.w	r9, r0, #20
 800bebc:	f04f 0a00 	mov.w	sl, #0
 800bec0:	e7a8      	b.n	800be14 <__gethex+0x1ce>
 800bec2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bec6:	42a0      	cmp	r0, r4
 800bec8:	dd6a      	ble.n	800bfa0 <__gethex+0x35a>
 800beca:	1b04      	subs	r4, r0, r4
 800becc:	42a6      	cmp	r6, r4
 800bece:	dc2e      	bgt.n	800bf2e <__gethex+0x2e8>
 800bed0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d022      	beq.n	800bf1e <__gethex+0x2d8>
 800bed8:	2b03      	cmp	r3, #3
 800beda:	d024      	beq.n	800bf26 <__gethex+0x2e0>
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d115      	bne.n	800bf0c <__gethex+0x2c6>
 800bee0:	42a6      	cmp	r6, r4
 800bee2:	d113      	bne.n	800bf0c <__gethex+0x2c6>
 800bee4:	2e01      	cmp	r6, #1
 800bee6:	dc0b      	bgt.n	800bf00 <__gethex+0x2ba>
 800bee8:	9a06      	ldr	r2, [sp, #24]
 800beea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	2301      	movs	r3, #1
 800bef2:	612b      	str	r3, [r5, #16]
 800bef4:	f8c9 3000 	str.w	r3, [r9]
 800bef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800befa:	2762      	movs	r7, #98	; 0x62
 800befc:	601d      	str	r5, [r3, #0]
 800befe:	e72a      	b.n	800bd56 <__gethex+0x110>
 800bf00:	1e71      	subs	r1, r6, #1
 800bf02:	4628      	mov	r0, r5
 800bf04:	f000 fd88 	bl	800ca18 <__any_on>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d1ed      	bne.n	800bee8 <__gethex+0x2a2>
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	9802      	ldr	r0, [sp, #8]
 800bf10:	f000 f9d9 	bl	800c2c6 <_Bfree>
 800bf14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf16:	2300      	movs	r3, #0
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	2750      	movs	r7, #80	; 0x50
 800bf1c:	e71b      	b.n	800bd56 <__gethex+0x110>
 800bf1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d0e1      	beq.n	800bee8 <__gethex+0x2a2>
 800bf24:	e7f2      	b.n	800bf0c <__gethex+0x2c6>
 800bf26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1dd      	bne.n	800bee8 <__gethex+0x2a2>
 800bf2c:	e7ee      	b.n	800bf0c <__gethex+0x2c6>
 800bf2e:	1e67      	subs	r7, r4, #1
 800bf30:	f1ba 0f00 	cmp.w	sl, #0
 800bf34:	d131      	bne.n	800bf9a <__gethex+0x354>
 800bf36:	b127      	cbz	r7, 800bf42 <__gethex+0x2fc>
 800bf38:	4639      	mov	r1, r7
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f000 fd6c 	bl	800ca18 <__any_on>
 800bf40:	4682      	mov	sl, r0
 800bf42:	117a      	asrs	r2, r7, #5
 800bf44:	2301      	movs	r3, #1
 800bf46:	f007 071f 	and.w	r7, r7, #31
 800bf4a:	fa03 f707 	lsl.w	r7, r3, r7
 800bf4e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800bf52:	4621      	mov	r1, r4
 800bf54:	421f      	tst	r7, r3
 800bf56:	4628      	mov	r0, r5
 800bf58:	bf18      	it	ne
 800bf5a:	f04a 0a02 	orrne.w	sl, sl, #2
 800bf5e:	1b36      	subs	r6, r6, r4
 800bf60:	f7ff fe22 	bl	800bba8 <rshift>
 800bf64:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bf68:	2702      	movs	r7, #2
 800bf6a:	f1ba 0f00 	cmp.w	sl, #0
 800bf6e:	d048      	beq.n	800c002 <__gethex+0x3bc>
 800bf70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d015      	beq.n	800bfa4 <__gethex+0x35e>
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d017      	beq.n	800bfac <__gethex+0x366>
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d109      	bne.n	800bf94 <__gethex+0x34e>
 800bf80:	f01a 0f02 	tst.w	sl, #2
 800bf84:	d006      	beq.n	800bf94 <__gethex+0x34e>
 800bf86:	f8d9 3000 	ldr.w	r3, [r9]
 800bf8a:	ea4a 0a03 	orr.w	sl, sl, r3
 800bf8e:	f01a 0f01 	tst.w	sl, #1
 800bf92:	d10e      	bne.n	800bfb2 <__gethex+0x36c>
 800bf94:	f047 0710 	orr.w	r7, r7, #16
 800bf98:	e033      	b.n	800c002 <__gethex+0x3bc>
 800bf9a:	f04f 0a01 	mov.w	sl, #1
 800bf9e:	e7d0      	b.n	800bf42 <__gethex+0x2fc>
 800bfa0:	2701      	movs	r7, #1
 800bfa2:	e7e2      	b.n	800bf6a <__gethex+0x324>
 800bfa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfa6:	f1c3 0301 	rsb	r3, r3, #1
 800bfaa:	9315      	str	r3, [sp, #84]	; 0x54
 800bfac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0f0      	beq.n	800bf94 <__gethex+0x34e>
 800bfb2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800bfb6:	f105 0314 	add.w	r3, r5, #20
 800bfba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800bfbe:	eb03 010a 	add.w	r1, r3, sl
 800bfc2:	f04f 0c00 	mov.w	ip, #0
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bfd0:	d01c      	beq.n	800c00c <__gethex+0x3c6>
 800bfd2:	3201      	adds	r2, #1
 800bfd4:	6002      	str	r2, [r0, #0]
 800bfd6:	2f02      	cmp	r7, #2
 800bfd8:	f105 0314 	add.w	r3, r5, #20
 800bfdc:	d138      	bne.n	800c050 <__gethex+0x40a>
 800bfde:	f8d8 2000 	ldr.w	r2, [r8]
 800bfe2:	3a01      	subs	r2, #1
 800bfe4:	42b2      	cmp	r2, r6
 800bfe6:	d10a      	bne.n	800bffe <__gethex+0x3b8>
 800bfe8:	1171      	asrs	r1, r6, #5
 800bfea:	2201      	movs	r2, #1
 800bfec:	f006 061f 	and.w	r6, r6, #31
 800bff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bff4:	fa02 f606 	lsl.w	r6, r2, r6
 800bff8:	421e      	tst	r6, r3
 800bffa:	bf18      	it	ne
 800bffc:	4617      	movne	r7, r2
 800bffe:	f047 0720 	orr.w	r7, r7, #32
 800c002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c004:	601d      	str	r5, [r3, #0]
 800c006:	9b06      	ldr	r3, [sp, #24]
 800c008:	601c      	str	r4, [r3, #0]
 800c00a:	e6a4      	b.n	800bd56 <__gethex+0x110>
 800c00c:	4299      	cmp	r1, r3
 800c00e:	f843 cc04 	str.w	ip, [r3, #-4]
 800c012:	d8d8      	bhi.n	800bfc6 <__gethex+0x380>
 800c014:	68ab      	ldr	r3, [r5, #8]
 800c016:	4599      	cmp	r9, r3
 800c018:	db12      	blt.n	800c040 <__gethex+0x3fa>
 800c01a:	6869      	ldr	r1, [r5, #4]
 800c01c:	9802      	ldr	r0, [sp, #8]
 800c01e:	3101      	adds	r1, #1
 800c020:	f000 f91d 	bl	800c25e <_Balloc>
 800c024:	692a      	ldr	r2, [r5, #16]
 800c026:	3202      	adds	r2, #2
 800c028:	f105 010c 	add.w	r1, r5, #12
 800c02c:	4683      	mov	fp, r0
 800c02e:	0092      	lsls	r2, r2, #2
 800c030:	300c      	adds	r0, #12
 800c032:	f000 f909 	bl	800c248 <memcpy>
 800c036:	4629      	mov	r1, r5
 800c038:	9802      	ldr	r0, [sp, #8]
 800c03a:	f000 f944 	bl	800c2c6 <_Bfree>
 800c03e:	465d      	mov	r5, fp
 800c040:	692b      	ldr	r3, [r5, #16]
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c048:	612a      	str	r2, [r5, #16]
 800c04a:	2201      	movs	r2, #1
 800c04c:	615a      	str	r2, [r3, #20]
 800c04e:	e7c2      	b.n	800bfd6 <__gethex+0x390>
 800c050:	692a      	ldr	r2, [r5, #16]
 800c052:	454a      	cmp	r2, r9
 800c054:	dd0b      	ble.n	800c06e <__gethex+0x428>
 800c056:	2101      	movs	r1, #1
 800c058:	4628      	mov	r0, r5
 800c05a:	f7ff fda5 	bl	800bba8 <rshift>
 800c05e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c062:	3401      	adds	r4, #1
 800c064:	42a3      	cmp	r3, r4
 800c066:	f6ff aed9 	blt.w	800be1c <__gethex+0x1d6>
 800c06a:	2701      	movs	r7, #1
 800c06c:	e7c7      	b.n	800bffe <__gethex+0x3b8>
 800c06e:	f016 061f 	ands.w	r6, r6, #31
 800c072:	d0fa      	beq.n	800c06a <__gethex+0x424>
 800c074:	449a      	add	sl, r3
 800c076:	f1c6 0620 	rsb	r6, r6, #32
 800c07a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c07e:	f000 f9b2 	bl	800c3e6 <__hi0bits>
 800c082:	42b0      	cmp	r0, r6
 800c084:	dbe7      	blt.n	800c056 <__gethex+0x410>
 800c086:	e7f0      	b.n	800c06a <__gethex+0x424>

0800c088 <L_shift>:
 800c088:	f1c2 0208 	rsb	r2, r2, #8
 800c08c:	0092      	lsls	r2, r2, #2
 800c08e:	b570      	push	{r4, r5, r6, lr}
 800c090:	f1c2 0620 	rsb	r6, r2, #32
 800c094:	6843      	ldr	r3, [r0, #4]
 800c096:	6804      	ldr	r4, [r0, #0]
 800c098:	fa03 f506 	lsl.w	r5, r3, r6
 800c09c:	432c      	orrs	r4, r5
 800c09e:	40d3      	lsrs	r3, r2
 800c0a0:	6004      	str	r4, [r0, #0]
 800c0a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0a6:	4288      	cmp	r0, r1
 800c0a8:	d3f4      	bcc.n	800c094 <L_shift+0xc>
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}

0800c0ac <__match>:
 800c0ac:	b530      	push	{r4, r5, lr}
 800c0ae:	6803      	ldr	r3, [r0, #0]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0b6:	b914      	cbnz	r4, 800c0be <__match+0x12>
 800c0b8:	6003      	str	r3, [r0, #0]
 800c0ba:	2001      	movs	r0, #1
 800c0bc:	bd30      	pop	{r4, r5, pc}
 800c0be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c0c6:	2d19      	cmp	r5, #25
 800c0c8:	bf98      	it	ls
 800c0ca:	3220      	addls	r2, #32
 800c0cc:	42a2      	cmp	r2, r4
 800c0ce:	d0f0      	beq.n	800c0b2 <__match+0x6>
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	e7f3      	b.n	800c0bc <__match+0x10>

0800c0d4 <__hexnan>:
 800c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	680b      	ldr	r3, [r1, #0]
 800c0da:	6801      	ldr	r1, [r0, #0]
 800c0dc:	115f      	asrs	r7, r3, #5
 800c0de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c0e2:	f013 031f 	ands.w	r3, r3, #31
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	bf18      	it	ne
 800c0ea:	3704      	addne	r7, #4
 800c0ec:	2500      	movs	r5, #0
 800c0ee:	1f3e      	subs	r6, r7, #4
 800c0f0:	4682      	mov	sl, r0
 800c0f2:	4690      	mov	r8, r2
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	f847 5c04 	str.w	r5, [r7, #-4]
 800c0fa:	46b1      	mov	r9, r6
 800c0fc:	4634      	mov	r4, r6
 800c0fe:	9502      	str	r5, [sp, #8]
 800c100:	46ab      	mov	fp, r5
 800c102:	784a      	ldrb	r2, [r1, #1]
 800c104:	1c4b      	adds	r3, r1, #1
 800c106:	9303      	str	r3, [sp, #12]
 800c108:	b342      	cbz	r2, 800c15c <__hexnan+0x88>
 800c10a:	4610      	mov	r0, r2
 800c10c:	9105      	str	r1, [sp, #20]
 800c10e:	9204      	str	r2, [sp, #16]
 800c110:	f7ff fd84 	bl	800bc1c <__hexdig_fun>
 800c114:	2800      	cmp	r0, #0
 800c116:	d143      	bne.n	800c1a0 <__hexnan+0xcc>
 800c118:	9a04      	ldr	r2, [sp, #16]
 800c11a:	9905      	ldr	r1, [sp, #20]
 800c11c:	2a20      	cmp	r2, #32
 800c11e:	d818      	bhi.n	800c152 <__hexnan+0x7e>
 800c120:	9b02      	ldr	r3, [sp, #8]
 800c122:	459b      	cmp	fp, r3
 800c124:	dd13      	ble.n	800c14e <__hexnan+0x7a>
 800c126:	454c      	cmp	r4, r9
 800c128:	d206      	bcs.n	800c138 <__hexnan+0x64>
 800c12a:	2d07      	cmp	r5, #7
 800c12c:	dc04      	bgt.n	800c138 <__hexnan+0x64>
 800c12e:	462a      	mov	r2, r5
 800c130:	4649      	mov	r1, r9
 800c132:	4620      	mov	r0, r4
 800c134:	f7ff ffa8 	bl	800c088 <L_shift>
 800c138:	4544      	cmp	r4, r8
 800c13a:	d944      	bls.n	800c1c6 <__hexnan+0xf2>
 800c13c:	2300      	movs	r3, #0
 800c13e:	f1a4 0904 	sub.w	r9, r4, #4
 800c142:	f844 3c04 	str.w	r3, [r4, #-4]
 800c146:	f8cd b008 	str.w	fp, [sp, #8]
 800c14a:	464c      	mov	r4, r9
 800c14c:	461d      	mov	r5, r3
 800c14e:	9903      	ldr	r1, [sp, #12]
 800c150:	e7d7      	b.n	800c102 <__hexnan+0x2e>
 800c152:	2a29      	cmp	r2, #41	; 0x29
 800c154:	d14a      	bne.n	800c1ec <__hexnan+0x118>
 800c156:	3102      	adds	r1, #2
 800c158:	f8ca 1000 	str.w	r1, [sl]
 800c15c:	f1bb 0f00 	cmp.w	fp, #0
 800c160:	d044      	beq.n	800c1ec <__hexnan+0x118>
 800c162:	454c      	cmp	r4, r9
 800c164:	d206      	bcs.n	800c174 <__hexnan+0xa0>
 800c166:	2d07      	cmp	r5, #7
 800c168:	dc04      	bgt.n	800c174 <__hexnan+0xa0>
 800c16a:	462a      	mov	r2, r5
 800c16c:	4649      	mov	r1, r9
 800c16e:	4620      	mov	r0, r4
 800c170:	f7ff ff8a 	bl	800c088 <L_shift>
 800c174:	4544      	cmp	r4, r8
 800c176:	d928      	bls.n	800c1ca <__hexnan+0xf6>
 800c178:	4643      	mov	r3, r8
 800c17a:	f854 2b04 	ldr.w	r2, [r4], #4
 800c17e:	f843 2b04 	str.w	r2, [r3], #4
 800c182:	42a6      	cmp	r6, r4
 800c184:	d2f9      	bcs.n	800c17a <__hexnan+0xa6>
 800c186:	2200      	movs	r2, #0
 800c188:	f843 2b04 	str.w	r2, [r3], #4
 800c18c:	429e      	cmp	r6, r3
 800c18e:	d2fb      	bcs.n	800c188 <__hexnan+0xb4>
 800c190:	6833      	ldr	r3, [r6, #0]
 800c192:	b91b      	cbnz	r3, 800c19c <__hexnan+0xc8>
 800c194:	4546      	cmp	r6, r8
 800c196:	d127      	bne.n	800c1e8 <__hexnan+0x114>
 800c198:	2301      	movs	r3, #1
 800c19a:	6033      	str	r3, [r6, #0]
 800c19c:	2005      	movs	r0, #5
 800c19e:	e026      	b.n	800c1ee <__hexnan+0x11a>
 800c1a0:	3501      	adds	r5, #1
 800c1a2:	2d08      	cmp	r5, #8
 800c1a4:	f10b 0b01 	add.w	fp, fp, #1
 800c1a8:	dd06      	ble.n	800c1b8 <__hexnan+0xe4>
 800c1aa:	4544      	cmp	r4, r8
 800c1ac:	d9cf      	bls.n	800c14e <__hexnan+0x7a>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1b4:	2501      	movs	r5, #1
 800c1b6:	3c04      	subs	r4, #4
 800c1b8:	6822      	ldr	r2, [r4, #0]
 800c1ba:	f000 000f 	and.w	r0, r0, #15
 800c1be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1c2:	6020      	str	r0, [r4, #0]
 800c1c4:	e7c3      	b.n	800c14e <__hexnan+0x7a>
 800c1c6:	2508      	movs	r5, #8
 800c1c8:	e7c1      	b.n	800c14e <__hexnan+0x7a>
 800c1ca:	9b01      	ldr	r3, [sp, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0df      	beq.n	800c190 <__hexnan+0xbc>
 800c1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d4:	f1c3 0320 	rsb	r3, r3, #32
 800c1d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c1e0:	401a      	ands	r2, r3
 800c1e2:	f847 2c04 	str.w	r2, [r7, #-4]
 800c1e6:	e7d3      	b.n	800c190 <__hexnan+0xbc>
 800c1e8:	3e04      	subs	r6, #4
 800c1ea:	e7d1      	b.n	800c190 <__hexnan+0xbc>
 800c1ec:	2004      	movs	r0, #4
 800c1ee:	b007      	add	sp, #28
 800c1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1f4 <__localeconv_l>:
 800c1f4:	30f0      	adds	r0, #240	; 0xf0
 800c1f6:	4770      	bx	lr

0800c1f8 <_localeconv_r>:
 800c1f8:	4b04      	ldr	r3, [pc, #16]	; (800c20c <_localeconv_r+0x14>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6a18      	ldr	r0, [r3, #32]
 800c1fe:	4b04      	ldr	r3, [pc, #16]	; (800c210 <_localeconv_r+0x18>)
 800c200:	2800      	cmp	r0, #0
 800c202:	bf08      	it	eq
 800c204:	4618      	moveq	r0, r3
 800c206:	30f0      	adds	r0, #240	; 0xf0
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	2000000c 	.word	0x2000000c
 800c210:	20000070 	.word	0x20000070

0800c214 <malloc>:
 800c214:	4b02      	ldr	r3, [pc, #8]	; (800c220 <malloc+0xc>)
 800c216:	4601      	mov	r1, r0
 800c218:	6818      	ldr	r0, [r3, #0]
 800c21a:	f000 bc7b 	b.w	800cb14 <_malloc_r>
 800c21e:	bf00      	nop
 800c220:	2000000c 	.word	0x2000000c

0800c224 <__ascii_mbtowc>:
 800c224:	b082      	sub	sp, #8
 800c226:	b901      	cbnz	r1, 800c22a <__ascii_mbtowc+0x6>
 800c228:	a901      	add	r1, sp, #4
 800c22a:	b142      	cbz	r2, 800c23e <__ascii_mbtowc+0x1a>
 800c22c:	b14b      	cbz	r3, 800c242 <__ascii_mbtowc+0x1e>
 800c22e:	7813      	ldrb	r3, [r2, #0]
 800c230:	600b      	str	r3, [r1, #0]
 800c232:	7812      	ldrb	r2, [r2, #0]
 800c234:	1c10      	adds	r0, r2, #0
 800c236:	bf18      	it	ne
 800c238:	2001      	movne	r0, #1
 800c23a:	b002      	add	sp, #8
 800c23c:	4770      	bx	lr
 800c23e:	4610      	mov	r0, r2
 800c240:	e7fb      	b.n	800c23a <__ascii_mbtowc+0x16>
 800c242:	f06f 0001 	mvn.w	r0, #1
 800c246:	e7f8      	b.n	800c23a <__ascii_mbtowc+0x16>

0800c248 <memcpy>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	1e43      	subs	r3, r0, #1
 800c24c:	440a      	add	r2, r1
 800c24e:	4291      	cmp	r1, r2
 800c250:	d100      	bne.n	800c254 <memcpy+0xc>
 800c252:	bd10      	pop	{r4, pc}
 800c254:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c25c:	e7f7      	b.n	800c24e <memcpy+0x6>

0800c25e <_Balloc>:
 800c25e:	b570      	push	{r4, r5, r6, lr}
 800c260:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c262:	4604      	mov	r4, r0
 800c264:	460e      	mov	r6, r1
 800c266:	b93d      	cbnz	r5, 800c278 <_Balloc+0x1a>
 800c268:	2010      	movs	r0, #16
 800c26a:	f7ff ffd3 	bl	800c214 <malloc>
 800c26e:	6260      	str	r0, [r4, #36]	; 0x24
 800c270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c274:	6005      	str	r5, [r0, #0]
 800c276:	60c5      	str	r5, [r0, #12]
 800c278:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c27a:	68eb      	ldr	r3, [r5, #12]
 800c27c:	b183      	cbz	r3, 800c2a0 <_Balloc+0x42>
 800c27e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c286:	b9b8      	cbnz	r0, 800c2b8 <_Balloc+0x5a>
 800c288:	2101      	movs	r1, #1
 800c28a:	fa01 f506 	lsl.w	r5, r1, r6
 800c28e:	1d6a      	adds	r2, r5, #5
 800c290:	0092      	lsls	r2, r2, #2
 800c292:	4620      	mov	r0, r4
 800c294:	f000 fbe1 	bl	800ca5a <_calloc_r>
 800c298:	b160      	cbz	r0, 800c2b4 <_Balloc+0x56>
 800c29a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c29e:	e00e      	b.n	800c2be <_Balloc+0x60>
 800c2a0:	2221      	movs	r2, #33	; 0x21
 800c2a2:	2104      	movs	r1, #4
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f000 fbd8 	bl	800ca5a <_calloc_r>
 800c2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ac:	60e8      	str	r0, [r5, #12]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1e4      	bne.n	800c27e <_Balloc+0x20>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	6802      	ldr	r2, [r0, #0]
 800c2ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2c4:	e7f7      	b.n	800c2b6 <_Balloc+0x58>

0800c2c6 <_Bfree>:
 800c2c6:	b570      	push	{r4, r5, r6, lr}
 800c2c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	460d      	mov	r5, r1
 800c2ce:	b93c      	cbnz	r4, 800c2e0 <_Bfree+0x1a>
 800c2d0:	2010      	movs	r0, #16
 800c2d2:	f7ff ff9f 	bl	800c214 <malloc>
 800c2d6:	6270      	str	r0, [r6, #36]	; 0x24
 800c2d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2dc:	6004      	str	r4, [r0, #0]
 800c2de:	60c4      	str	r4, [r0, #12]
 800c2e0:	b13d      	cbz	r5, 800c2f2 <_Bfree+0x2c>
 800c2e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c2e4:	686a      	ldr	r2, [r5, #4]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2ec:	6029      	str	r1, [r5, #0]
 800c2ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}

0800c2f4 <__multadd>:
 800c2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f8:	690d      	ldr	r5, [r1, #16]
 800c2fa:	461f      	mov	r7, r3
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	460c      	mov	r4, r1
 800c300:	f101 0c14 	add.w	ip, r1, #20
 800c304:	2300      	movs	r3, #0
 800c306:	f8dc 0000 	ldr.w	r0, [ip]
 800c30a:	b281      	uxth	r1, r0
 800c30c:	fb02 7101 	mla	r1, r2, r1, r7
 800c310:	0c0f      	lsrs	r7, r1, #16
 800c312:	0c00      	lsrs	r0, r0, #16
 800c314:	fb02 7000 	mla	r0, r2, r0, r7
 800c318:	b289      	uxth	r1, r1
 800c31a:	3301      	adds	r3, #1
 800c31c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c320:	429d      	cmp	r5, r3
 800c322:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c326:	f84c 1b04 	str.w	r1, [ip], #4
 800c32a:	dcec      	bgt.n	800c306 <__multadd+0x12>
 800c32c:	b1d7      	cbz	r7, 800c364 <__multadd+0x70>
 800c32e:	68a3      	ldr	r3, [r4, #8]
 800c330:	42ab      	cmp	r3, r5
 800c332:	dc12      	bgt.n	800c35a <__multadd+0x66>
 800c334:	6861      	ldr	r1, [r4, #4]
 800c336:	4630      	mov	r0, r6
 800c338:	3101      	adds	r1, #1
 800c33a:	f7ff ff90 	bl	800c25e <_Balloc>
 800c33e:	6922      	ldr	r2, [r4, #16]
 800c340:	3202      	adds	r2, #2
 800c342:	f104 010c 	add.w	r1, r4, #12
 800c346:	4680      	mov	r8, r0
 800c348:	0092      	lsls	r2, r2, #2
 800c34a:	300c      	adds	r0, #12
 800c34c:	f7ff ff7c 	bl	800c248 <memcpy>
 800c350:	4621      	mov	r1, r4
 800c352:	4630      	mov	r0, r6
 800c354:	f7ff ffb7 	bl	800c2c6 <_Bfree>
 800c358:	4644      	mov	r4, r8
 800c35a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c35e:	3501      	adds	r5, #1
 800c360:	615f      	str	r7, [r3, #20]
 800c362:	6125      	str	r5, [r4, #16]
 800c364:	4620      	mov	r0, r4
 800c366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c36a <__s2b>:
 800c36a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c36e:	460c      	mov	r4, r1
 800c370:	4615      	mov	r5, r2
 800c372:	461f      	mov	r7, r3
 800c374:	2209      	movs	r2, #9
 800c376:	3308      	adds	r3, #8
 800c378:	4606      	mov	r6, r0
 800c37a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c37e:	2100      	movs	r1, #0
 800c380:	2201      	movs	r2, #1
 800c382:	429a      	cmp	r2, r3
 800c384:	db20      	blt.n	800c3c8 <__s2b+0x5e>
 800c386:	4630      	mov	r0, r6
 800c388:	f7ff ff69 	bl	800c25e <_Balloc>
 800c38c:	9b08      	ldr	r3, [sp, #32]
 800c38e:	6143      	str	r3, [r0, #20]
 800c390:	2d09      	cmp	r5, #9
 800c392:	f04f 0301 	mov.w	r3, #1
 800c396:	6103      	str	r3, [r0, #16]
 800c398:	dd19      	ble.n	800c3ce <__s2b+0x64>
 800c39a:	f104 0809 	add.w	r8, r4, #9
 800c39e:	46c1      	mov	r9, r8
 800c3a0:	442c      	add	r4, r5
 800c3a2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	3b30      	subs	r3, #48	; 0x30
 800c3aa:	220a      	movs	r2, #10
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f7ff ffa1 	bl	800c2f4 <__multadd>
 800c3b2:	45a1      	cmp	r9, r4
 800c3b4:	d1f5      	bne.n	800c3a2 <__s2b+0x38>
 800c3b6:	eb08 0405 	add.w	r4, r8, r5
 800c3ba:	3c08      	subs	r4, #8
 800c3bc:	1b2d      	subs	r5, r5, r4
 800c3be:	1963      	adds	r3, r4, r5
 800c3c0:	42bb      	cmp	r3, r7
 800c3c2:	db07      	blt.n	800c3d4 <__s2b+0x6a>
 800c3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c8:	0052      	lsls	r2, r2, #1
 800c3ca:	3101      	adds	r1, #1
 800c3cc:	e7d9      	b.n	800c382 <__s2b+0x18>
 800c3ce:	340a      	adds	r4, #10
 800c3d0:	2509      	movs	r5, #9
 800c3d2:	e7f3      	b.n	800c3bc <__s2b+0x52>
 800c3d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3d8:	4601      	mov	r1, r0
 800c3da:	3b30      	subs	r3, #48	; 0x30
 800c3dc:	220a      	movs	r2, #10
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7ff ff88 	bl	800c2f4 <__multadd>
 800c3e4:	e7eb      	b.n	800c3be <__s2b+0x54>

0800c3e6 <__hi0bits>:
 800c3e6:	0c02      	lsrs	r2, r0, #16
 800c3e8:	0412      	lsls	r2, r2, #16
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	b9b2      	cbnz	r2, 800c41c <__hi0bits+0x36>
 800c3ee:	0403      	lsls	r3, r0, #16
 800c3f0:	2010      	movs	r0, #16
 800c3f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c3f6:	bf04      	itt	eq
 800c3f8:	021b      	lsleq	r3, r3, #8
 800c3fa:	3008      	addeq	r0, #8
 800c3fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c400:	bf04      	itt	eq
 800c402:	011b      	lsleq	r3, r3, #4
 800c404:	3004      	addeq	r0, #4
 800c406:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c40a:	bf04      	itt	eq
 800c40c:	009b      	lsleq	r3, r3, #2
 800c40e:	3002      	addeq	r0, #2
 800c410:	2b00      	cmp	r3, #0
 800c412:	db06      	blt.n	800c422 <__hi0bits+0x3c>
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	d503      	bpl.n	800c420 <__hi0bits+0x3a>
 800c418:	3001      	adds	r0, #1
 800c41a:	4770      	bx	lr
 800c41c:	2000      	movs	r0, #0
 800c41e:	e7e8      	b.n	800c3f2 <__hi0bits+0xc>
 800c420:	2020      	movs	r0, #32
 800c422:	4770      	bx	lr

0800c424 <__lo0bits>:
 800c424:	6803      	ldr	r3, [r0, #0]
 800c426:	f013 0207 	ands.w	r2, r3, #7
 800c42a:	4601      	mov	r1, r0
 800c42c:	d00b      	beq.n	800c446 <__lo0bits+0x22>
 800c42e:	07da      	lsls	r2, r3, #31
 800c430:	d423      	bmi.n	800c47a <__lo0bits+0x56>
 800c432:	0798      	lsls	r0, r3, #30
 800c434:	bf49      	itett	mi
 800c436:	085b      	lsrmi	r3, r3, #1
 800c438:	089b      	lsrpl	r3, r3, #2
 800c43a:	2001      	movmi	r0, #1
 800c43c:	600b      	strmi	r3, [r1, #0]
 800c43e:	bf5c      	itt	pl
 800c440:	600b      	strpl	r3, [r1, #0]
 800c442:	2002      	movpl	r0, #2
 800c444:	4770      	bx	lr
 800c446:	b298      	uxth	r0, r3
 800c448:	b9a8      	cbnz	r0, 800c476 <__lo0bits+0x52>
 800c44a:	0c1b      	lsrs	r3, r3, #16
 800c44c:	2010      	movs	r0, #16
 800c44e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c452:	bf04      	itt	eq
 800c454:	0a1b      	lsreq	r3, r3, #8
 800c456:	3008      	addeq	r0, #8
 800c458:	071a      	lsls	r2, r3, #28
 800c45a:	bf04      	itt	eq
 800c45c:	091b      	lsreq	r3, r3, #4
 800c45e:	3004      	addeq	r0, #4
 800c460:	079a      	lsls	r2, r3, #30
 800c462:	bf04      	itt	eq
 800c464:	089b      	lsreq	r3, r3, #2
 800c466:	3002      	addeq	r0, #2
 800c468:	07da      	lsls	r2, r3, #31
 800c46a:	d402      	bmi.n	800c472 <__lo0bits+0x4e>
 800c46c:	085b      	lsrs	r3, r3, #1
 800c46e:	d006      	beq.n	800c47e <__lo0bits+0x5a>
 800c470:	3001      	adds	r0, #1
 800c472:	600b      	str	r3, [r1, #0]
 800c474:	4770      	bx	lr
 800c476:	4610      	mov	r0, r2
 800c478:	e7e9      	b.n	800c44e <__lo0bits+0x2a>
 800c47a:	2000      	movs	r0, #0
 800c47c:	4770      	bx	lr
 800c47e:	2020      	movs	r0, #32
 800c480:	4770      	bx	lr

0800c482 <__i2b>:
 800c482:	b510      	push	{r4, lr}
 800c484:	460c      	mov	r4, r1
 800c486:	2101      	movs	r1, #1
 800c488:	f7ff fee9 	bl	800c25e <_Balloc>
 800c48c:	2201      	movs	r2, #1
 800c48e:	6144      	str	r4, [r0, #20]
 800c490:	6102      	str	r2, [r0, #16]
 800c492:	bd10      	pop	{r4, pc}

0800c494 <__multiply>:
 800c494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	4614      	mov	r4, r2
 800c49a:	690a      	ldr	r2, [r1, #16]
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	bfb8      	it	lt
 800c4a2:	460b      	movlt	r3, r1
 800c4a4:	4688      	mov	r8, r1
 800c4a6:	bfbc      	itt	lt
 800c4a8:	46a0      	movlt	r8, r4
 800c4aa:	461c      	movlt	r4, r3
 800c4ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c4b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c4bc:	eb07 0609 	add.w	r6, r7, r9
 800c4c0:	42b3      	cmp	r3, r6
 800c4c2:	bfb8      	it	lt
 800c4c4:	3101      	addlt	r1, #1
 800c4c6:	f7ff feca 	bl	800c25e <_Balloc>
 800c4ca:	f100 0514 	add.w	r5, r0, #20
 800c4ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	4573      	cmp	r3, lr
 800c4d8:	d316      	bcc.n	800c508 <__multiply+0x74>
 800c4da:	f104 0214 	add.w	r2, r4, #20
 800c4de:	f108 0114 	add.w	r1, r8, #20
 800c4e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c4e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	9b00      	ldr	r3, [sp, #0]
 800c4ee:	9201      	str	r2, [sp, #4]
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d80c      	bhi.n	800c50e <__multiply+0x7a>
 800c4f4:	2e00      	cmp	r6, #0
 800c4f6:	dd03      	ble.n	800c500 <__multiply+0x6c>
 800c4f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d05d      	beq.n	800c5bc <__multiply+0x128>
 800c500:	6106      	str	r6, [r0, #16]
 800c502:	b003      	add	sp, #12
 800c504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c508:	f843 2b04 	str.w	r2, [r3], #4
 800c50c:	e7e3      	b.n	800c4d6 <__multiply+0x42>
 800c50e:	f8b2 b000 	ldrh.w	fp, [r2]
 800c512:	f1bb 0f00 	cmp.w	fp, #0
 800c516:	d023      	beq.n	800c560 <__multiply+0xcc>
 800c518:	4689      	mov	r9, r1
 800c51a:	46ac      	mov	ip, r5
 800c51c:	f04f 0800 	mov.w	r8, #0
 800c520:	f859 4b04 	ldr.w	r4, [r9], #4
 800c524:	f8dc a000 	ldr.w	sl, [ip]
 800c528:	b2a3      	uxth	r3, r4
 800c52a:	fa1f fa8a 	uxth.w	sl, sl
 800c52e:	fb0b a303 	mla	r3, fp, r3, sl
 800c532:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c536:	f8dc 4000 	ldr.w	r4, [ip]
 800c53a:	4443      	add	r3, r8
 800c53c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c540:	fb0b 840a 	mla	r4, fp, sl, r8
 800c544:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c548:	46e2      	mov	sl, ip
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c550:	454f      	cmp	r7, r9
 800c552:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c556:	f84a 3b04 	str.w	r3, [sl], #4
 800c55a:	d82b      	bhi.n	800c5b4 <__multiply+0x120>
 800c55c:	f8cc 8004 	str.w	r8, [ip, #4]
 800c560:	9b01      	ldr	r3, [sp, #4]
 800c562:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c566:	3204      	adds	r2, #4
 800c568:	f1ba 0f00 	cmp.w	sl, #0
 800c56c:	d020      	beq.n	800c5b0 <__multiply+0x11c>
 800c56e:	682b      	ldr	r3, [r5, #0]
 800c570:	4689      	mov	r9, r1
 800c572:	46a8      	mov	r8, r5
 800c574:	f04f 0b00 	mov.w	fp, #0
 800c578:	f8b9 c000 	ldrh.w	ip, [r9]
 800c57c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c580:	fb0a 440c 	mla	r4, sl, ip, r4
 800c584:	445c      	add	r4, fp
 800c586:	46c4      	mov	ip, r8
 800c588:	b29b      	uxth	r3, r3
 800c58a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c58e:	f84c 3b04 	str.w	r3, [ip], #4
 800c592:	f859 3b04 	ldr.w	r3, [r9], #4
 800c596:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c59a:	0c1b      	lsrs	r3, r3, #16
 800c59c:	fb0a b303 	mla	r3, sl, r3, fp
 800c5a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c5a4:	454f      	cmp	r7, r9
 800c5a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c5aa:	d805      	bhi.n	800c5b8 <__multiply+0x124>
 800c5ac:	f8c8 3004 	str.w	r3, [r8, #4]
 800c5b0:	3504      	adds	r5, #4
 800c5b2:	e79b      	b.n	800c4ec <__multiply+0x58>
 800c5b4:	46d4      	mov	ip, sl
 800c5b6:	e7b3      	b.n	800c520 <__multiply+0x8c>
 800c5b8:	46e0      	mov	r8, ip
 800c5ba:	e7dd      	b.n	800c578 <__multiply+0xe4>
 800c5bc:	3e01      	subs	r6, #1
 800c5be:	e799      	b.n	800c4f4 <__multiply+0x60>

0800c5c0 <__pow5mult>:
 800c5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c4:	4615      	mov	r5, r2
 800c5c6:	f012 0203 	ands.w	r2, r2, #3
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	460f      	mov	r7, r1
 800c5ce:	d007      	beq.n	800c5e0 <__pow5mult+0x20>
 800c5d0:	3a01      	subs	r2, #1
 800c5d2:	4c21      	ldr	r4, [pc, #132]	; (800c658 <__pow5mult+0x98>)
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5da:	f7ff fe8b 	bl	800c2f4 <__multadd>
 800c5de:	4607      	mov	r7, r0
 800c5e0:	10ad      	asrs	r5, r5, #2
 800c5e2:	d035      	beq.n	800c650 <__pow5mult+0x90>
 800c5e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c5e6:	b93c      	cbnz	r4, 800c5f8 <__pow5mult+0x38>
 800c5e8:	2010      	movs	r0, #16
 800c5ea:	f7ff fe13 	bl	800c214 <malloc>
 800c5ee:	6270      	str	r0, [r6, #36]	; 0x24
 800c5f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5f4:	6004      	str	r4, [r0, #0]
 800c5f6:	60c4      	str	r4, [r0, #12]
 800c5f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c5fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c600:	b94c      	cbnz	r4, 800c616 <__pow5mult+0x56>
 800c602:	f240 2171 	movw	r1, #625	; 0x271
 800c606:	4630      	mov	r0, r6
 800c608:	f7ff ff3b 	bl	800c482 <__i2b>
 800c60c:	2300      	movs	r3, #0
 800c60e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c612:	4604      	mov	r4, r0
 800c614:	6003      	str	r3, [r0, #0]
 800c616:	f04f 0800 	mov.w	r8, #0
 800c61a:	07eb      	lsls	r3, r5, #31
 800c61c:	d50a      	bpl.n	800c634 <__pow5mult+0x74>
 800c61e:	4639      	mov	r1, r7
 800c620:	4622      	mov	r2, r4
 800c622:	4630      	mov	r0, r6
 800c624:	f7ff ff36 	bl	800c494 <__multiply>
 800c628:	4639      	mov	r1, r7
 800c62a:	4681      	mov	r9, r0
 800c62c:	4630      	mov	r0, r6
 800c62e:	f7ff fe4a 	bl	800c2c6 <_Bfree>
 800c632:	464f      	mov	r7, r9
 800c634:	106d      	asrs	r5, r5, #1
 800c636:	d00b      	beq.n	800c650 <__pow5mult+0x90>
 800c638:	6820      	ldr	r0, [r4, #0]
 800c63a:	b938      	cbnz	r0, 800c64c <__pow5mult+0x8c>
 800c63c:	4622      	mov	r2, r4
 800c63e:	4621      	mov	r1, r4
 800c640:	4630      	mov	r0, r6
 800c642:	f7ff ff27 	bl	800c494 <__multiply>
 800c646:	6020      	str	r0, [r4, #0]
 800c648:	f8c0 8000 	str.w	r8, [r0]
 800c64c:	4604      	mov	r4, r0
 800c64e:	e7e4      	b.n	800c61a <__pow5mult+0x5a>
 800c650:	4638      	mov	r0, r7
 800c652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c656:	bf00      	nop
 800c658:	0800d2a0 	.word	0x0800d2a0

0800c65c <__lshift>:
 800c65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	460c      	mov	r4, r1
 800c662:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c666:	6923      	ldr	r3, [r4, #16]
 800c668:	6849      	ldr	r1, [r1, #4]
 800c66a:	eb0a 0903 	add.w	r9, sl, r3
 800c66e:	68a3      	ldr	r3, [r4, #8]
 800c670:	4607      	mov	r7, r0
 800c672:	4616      	mov	r6, r2
 800c674:	f109 0501 	add.w	r5, r9, #1
 800c678:	42ab      	cmp	r3, r5
 800c67a:	db32      	blt.n	800c6e2 <__lshift+0x86>
 800c67c:	4638      	mov	r0, r7
 800c67e:	f7ff fdee 	bl	800c25e <_Balloc>
 800c682:	2300      	movs	r3, #0
 800c684:	4680      	mov	r8, r0
 800c686:	f100 0114 	add.w	r1, r0, #20
 800c68a:	461a      	mov	r2, r3
 800c68c:	4553      	cmp	r3, sl
 800c68e:	db2b      	blt.n	800c6e8 <__lshift+0x8c>
 800c690:	6920      	ldr	r0, [r4, #16]
 800c692:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c696:	f104 0314 	add.w	r3, r4, #20
 800c69a:	f016 021f 	ands.w	r2, r6, #31
 800c69e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6a6:	d025      	beq.n	800c6f4 <__lshift+0x98>
 800c6a8:	f1c2 0e20 	rsb	lr, r2, #32
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	681e      	ldr	r6, [r3, #0]
 800c6b0:	468a      	mov	sl, r1
 800c6b2:	4096      	lsls	r6, r2
 800c6b4:	4330      	orrs	r0, r6
 800c6b6:	f84a 0b04 	str.w	r0, [sl], #4
 800c6ba:	f853 0b04 	ldr.w	r0, [r3], #4
 800c6be:	459c      	cmp	ip, r3
 800c6c0:	fa20 f00e 	lsr.w	r0, r0, lr
 800c6c4:	d814      	bhi.n	800c6f0 <__lshift+0x94>
 800c6c6:	6048      	str	r0, [r1, #4]
 800c6c8:	b108      	cbz	r0, 800c6ce <__lshift+0x72>
 800c6ca:	f109 0502 	add.w	r5, r9, #2
 800c6ce:	3d01      	subs	r5, #1
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f8c8 5010 	str.w	r5, [r8, #16]
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	f7ff fdf5 	bl	800c2c6 <_Bfree>
 800c6dc:	4640      	mov	r0, r8
 800c6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e2:	3101      	adds	r1, #1
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	e7c7      	b.n	800c678 <__lshift+0x1c>
 800c6e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	e7cd      	b.n	800c68c <__lshift+0x30>
 800c6f0:	4651      	mov	r1, sl
 800c6f2:	e7dc      	b.n	800c6ae <__lshift+0x52>
 800c6f4:	3904      	subs	r1, #4
 800c6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6fe:	459c      	cmp	ip, r3
 800c700:	d8f9      	bhi.n	800c6f6 <__lshift+0x9a>
 800c702:	e7e4      	b.n	800c6ce <__lshift+0x72>

0800c704 <__mcmp>:
 800c704:	6903      	ldr	r3, [r0, #16]
 800c706:	690a      	ldr	r2, [r1, #16]
 800c708:	1a9b      	subs	r3, r3, r2
 800c70a:	b530      	push	{r4, r5, lr}
 800c70c:	d10c      	bne.n	800c728 <__mcmp+0x24>
 800c70e:	0092      	lsls	r2, r2, #2
 800c710:	3014      	adds	r0, #20
 800c712:	3114      	adds	r1, #20
 800c714:	1884      	adds	r4, r0, r2
 800c716:	4411      	add	r1, r2
 800c718:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c71c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c720:	4295      	cmp	r5, r2
 800c722:	d003      	beq.n	800c72c <__mcmp+0x28>
 800c724:	d305      	bcc.n	800c732 <__mcmp+0x2e>
 800c726:	2301      	movs	r3, #1
 800c728:	4618      	mov	r0, r3
 800c72a:	bd30      	pop	{r4, r5, pc}
 800c72c:	42a0      	cmp	r0, r4
 800c72e:	d3f3      	bcc.n	800c718 <__mcmp+0x14>
 800c730:	e7fa      	b.n	800c728 <__mcmp+0x24>
 800c732:	f04f 33ff 	mov.w	r3, #4294967295
 800c736:	e7f7      	b.n	800c728 <__mcmp+0x24>

0800c738 <__mdiff>:
 800c738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c73c:	460d      	mov	r5, r1
 800c73e:	4607      	mov	r7, r0
 800c740:	4611      	mov	r1, r2
 800c742:	4628      	mov	r0, r5
 800c744:	4614      	mov	r4, r2
 800c746:	f7ff ffdd 	bl	800c704 <__mcmp>
 800c74a:	1e06      	subs	r6, r0, #0
 800c74c:	d108      	bne.n	800c760 <__mdiff+0x28>
 800c74e:	4631      	mov	r1, r6
 800c750:	4638      	mov	r0, r7
 800c752:	f7ff fd84 	bl	800c25e <_Balloc>
 800c756:	2301      	movs	r3, #1
 800c758:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c760:	bfa4      	itt	ge
 800c762:	4623      	movge	r3, r4
 800c764:	462c      	movge	r4, r5
 800c766:	4638      	mov	r0, r7
 800c768:	6861      	ldr	r1, [r4, #4]
 800c76a:	bfa6      	itte	ge
 800c76c:	461d      	movge	r5, r3
 800c76e:	2600      	movge	r6, #0
 800c770:	2601      	movlt	r6, #1
 800c772:	f7ff fd74 	bl	800c25e <_Balloc>
 800c776:	692b      	ldr	r3, [r5, #16]
 800c778:	60c6      	str	r6, [r0, #12]
 800c77a:	6926      	ldr	r6, [r4, #16]
 800c77c:	f105 0914 	add.w	r9, r5, #20
 800c780:	f104 0214 	add.w	r2, r4, #20
 800c784:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c788:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c78c:	f100 0514 	add.w	r5, r0, #20
 800c790:	f04f 0e00 	mov.w	lr, #0
 800c794:	f852 ab04 	ldr.w	sl, [r2], #4
 800c798:	f859 4b04 	ldr.w	r4, [r9], #4
 800c79c:	fa1e f18a 	uxtah	r1, lr, sl
 800c7a0:	b2a3      	uxth	r3, r4
 800c7a2:	1ac9      	subs	r1, r1, r3
 800c7a4:	0c23      	lsrs	r3, r4, #16
 800c7a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c7aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c7ae:	b289      	uxth	r1, r1
 800c7b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c7b4:	45c8      	cmp	r8, r9
 800c7b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c7ba:	4694      	mov	ip, r2
 800c7bc:	f845 3b04 	str.w	r3, [r5], #4
 800c7c0:	d8e8      	bhi.n	800c794 <__mdiff+0x5c>
 800c7c2:	45bc      	cmp	ip, r7
 800c7c4:	d304      	bcc.n	800c7d0 <__mdiff+0x98>
 800c7c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c7ca:	b183      	cbz	r3, 800c7ee <__mdiff+0xb6>
 800c7cc:	6106      	str	r6, [r0, #16]
 800c7ce:	e7c5      	b.n	800c75c <__mdiff+0x24>
 800c7d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7d4:	fa1e f381 	uxtah	r3, lr, r1
 800c7d8:	141a      	asrs	r2, r3, #16
 800c7da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c7e8:	f845 3b04 	str.w	r3, [r5], #4
 800c7ec:	e7e9      	b.n	800c7c2 <__mdiff+0x8a>
 800c7ee:	3e01      	subs	r6, #1
 800c7f0:	e7e9      	b.n	800c7c6 <__mdiff+0x8e>
	...

0800c7f4 <__ulp>:
 800c7f4:	4b12      	ldr	r3, [pc, #72]	; (800c840 <__ulp+0x4c>)
 800c7f6:	ee10 2a90 	vmov	r2, s1
 800c7fa:	401a      	ands	r2, r3
 800c7fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c800:	2b00      	cmp	r3, #0
 800c802:	dd04      	ble.n	800c80e <__ulp+0x1a>
 800c804:	2000      	movs	r0, #0
 800c806:	4619      	mov	r1, r3
 800c808:	ec41 0b10 	vmov	d0, r0, r1
 800c80c:	4770      	bx	lr
 800c80e:	425b      	negs	r3, r3
 800c810:	151b      	asrs	r3, r3, #20
 800c812:	2b13      	cmp	r3, #19
 800c814:	f04f 0000 	mov.w	r0, #0
 800c818:	f04f 0100 	mov.w	r1, #0
 800c81c:	dc04      	bgt.n	800c828 <__ulp+0x34>
 800c81e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c822:	fa42 f103 	asr.w	r1, r2, r3
 800c826:	e7ef      	b.n	800c808 <__ulp+0x14>
 800c828:	3b14      	subs	r3, #20
 800c82a:	2b1e      	cmp	r3, #30
 800c82c:	f04f 0201 	mov.w	r2, #1
 800c830:	bfda      	itte	le
 800c832:	f1c3 031f 	rsble	r3, r3, #31
 800c836:	fa02 f303 	lslle.w	r3, r2, r3
 800c83a:	4613      	movgt	r3, r2
 800c83c:	4618      	mov	r0, r3
 800c83e:	e7e3      	b.n	800c808 <__ulp+0x14>
 800c840:	7ff00000 	.word	0x7ff00000

0800c844 <__b2d>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	6905      	ldr	r5, [r0, #16]
 800c848:	f100 0714 	add.w	r7, r0, #20
 800c84c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c850:	1f2e      	subs	r6, r5, #4
 800c852:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c856:	4620      	mov	r0, r4
 800c858:	f7ff fdc5 	bl	800c3e6 <__hi0bits>
 800c85c:	f1c0 0320 	rsb	r3, r0, #32
 800c860:	280a      	cmp	r0, #10
 800c862:	600b      	str	r3, [r1, #0]
 800c864:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c8dc <__b2d+0x98>
 800c868:	dc14      	bgt.n	800c894 <__b2d+0x50>
 800c86a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c86e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c872:	42b7      	cmp	r7, r6
 800c874:	ea41 030c 	orr.w	r3, r1, ip
 800c878:	bf34      	ite	cc
 800c87a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c87e:	2100      	movcs	r1, #0
 800c880:	3015      	adds	r0, #21
 800c882:	fa04 f000 	lsl.w	r0, r4, r0
 800c886:	fa21 f10e 	lsr.w	r1, r1, lr
 800c88a:	ea40 0201 	orr.w	r2, r0, r1
 800c88e:	ec43 2b10 	vmov	d0, r2, r3
 800c892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c894:	42b7      	cmp	r7, r6
 800c896:	bf3a      	itte	cc
 800c898:	f1a5 0608 	subcc.w	r6, r5, #8
 800c89c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c8a0:	2100      	movcs	r1, #0
 800c8a2:	380b      	subs	r0, #11
 800c8a4:	d015      	beq.n	800c8d2 <__b2d+0x8e>
 800c8a6:	4084      	lsls	r4, r0
 800c8a8:	f1c0 0520 	rsb	r5, r0, #32
 800c8ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c8b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c8b4:	42be      	cmp	r6, r7
 800c8b6:	fa21 fc05 	lsr.w	ip, r1, r5
 800c8ba:	ea44 030c 	orr.w	r3, r4, ip
 800c8be:	bf8c      	ite	hi
 800c8c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c8c4:	2400      	movls	r4, #0
 800c8c6:	fa01 f000 	lsl.w	r0, r1, r0
 800c8ca:	40ec      	lsrs	r4, r5
 800c8cc:	ea40 0204 	orr.w	r2, r0, r4
 800c8d0:	e7dd      	b.n	800c88e <__b2d+0x4a>
 800c8d2:	ea44 030c 	orr.w	r3, r4, ip
 800c8d6:	460a      	mov	r2, r1
 800c8d8:	e7d9      	b.n	800c88e <__b2d+0x4a>
 800c8da:	bf00      	nop
 800c8dc:	3ff00000 	.word	0x3ff00000

0800c8e0 <__d2b>:
 800c8e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8e4:	460e      	mov	r6, r1
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	ec59 8b10 	vmov	r8, r9, d0
 800c8ec:	4615      	mov	r5, r2
 800c8ee:	f7ff fcb6 	bl	800c25e <_Balloc>
 800c8f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c8f6:	4607      	mov	r7, r0
 800c8f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8fc:	bb34      	cbnz	r4, 800c94c <__d2b+0x6c>
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	f1b8 0300 	subs.w	r3, r8, #0
 800c904:	d027      	beq.n	800c956 <__d2b+0x76>
 800c906:	a802      	add	r0, sp, #8
 800c908:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c90c:	f7ff fd8a 	bl	800c424 <__lo0bits>
 800c910:	9900      	ldr	r1, [sp, #0]
 800c912:	b1f0      	cbz	r0, 800c952 <__d2b+0x72>
 800c914:	9a01      	ldr	r2, [sp, #4]
 800c916:	f1c0 0320 	rsb	r3, r0, #32
 800c91a:	fa02 f303 	lsl.w	r3, r2, r3
 800c91e:	430b      	orrs	r3, r1
 800c920:	40c2      	lsrs	r2, r0
 800c922:	617b      	str	r3, [r7, #20]
 800c924:	9201      	str	r2, [sp, #4]
 800c926:	9b01      	ldr	r3, [sp, #4]
 800c928:	61bb      	str	r3, [r7, #24]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	bf14      	ite	ne
 800c92e:	2102      	movne	r1, #2
 800c930:	2101      	moveq	r1, #1
 800c932:	6139      	str	r1, [r7, #16]
 800c934:	b1c4      	cbz	r4, 800c968 <__d2b+0x88>
 800c936:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c93a:	4404      	add	r4, r0
 800c93c:	6034      	str	r4, [r6, #0]
 800c93e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c942:	6028      	str	r0, [r5, #0]
 800c944:	4638      	mov	r0, r7
 800c946:	b003      	add	sp, #12
 800c948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c94c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c950:	e7d5      	b.n	800c8fe <__d2b+0x1e>
 800c952:	6179      	str	r1, [r7, #20]
 800c954:	e7e7      	b.n	800c926 <__d2b+0x46>
 800c956:	a801      	add	r0, sp, #4
 800c958:	f7ff fd64 	bl	800c424 <__lo0bits>
 800c95c:	9b01      	ldr	r3, [sp, #4]
 800c95e:	617b      	str	r3, [r7, #20]
 800c960:	2101      	movs	r1, #1
 800c962:	6139      	str	r1, [r7, #16]
 800c964:	3020      	adds	r0, #32
 800c966:	e7e5      	b.n	800c934 <__d2b+0x54>
 800c968:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c96c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c970:	6030      	str	r0, [r6, #0]
 800c972:	6918      	ldr	r0, [r3, #16]
 800c974:	f7ff fd37 	bl	800c3e6 <__hi0bits>
 800c978:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c97c:	e7e1      	b.n	800c942 <__d2b+0x62>

0800c97e <__ratio>:
 800c97e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c982:	4688      	mov	r8, r1
 800c984:	4669      	mov	r1, sp
 800c986:	4681      	mov	r9, r0
 800c988:	f7ff ff5c 	bl	800c844 <__b2d>
 800c98c:	a901      	add	r1, sp, #4
 800c98e:	4640      	mov	r0, r8
 800c990:	ec57 6b10 	vmov	r6, r7, d0
 800c994:	f7ff ff56 	bl	800c844 <__b2d>
 800c998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c99c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9a0:	eba3 0c02 	sub.w	ip, r3, r2
 800c9a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c9a8:	1a9b      	subs	r3, r3, r2
 800c9aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c9ae:	ec5b ab10 	vmov	sl, fp, d0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bfce      	itee	gt
 800c9b6:	463a      	movgt	r2, r7
 800c9b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9bc:	465a      	movle	r2, fp
 800c9be:	4659      	mov	r1, fp
 800c9c0:	463d      	mov	r5, r7
 800c9c2:	bfd4      	ite	le
 800c9c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c9c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	ee10 2a10 	vmov	r2, s0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	f7f3 ff59 	bl	800088c <__aeabi_ddiv>
 800c9da:	ec41 0b10 	vmov	d0, r0, r1
 800c9de:	b003      	add	sp, #12
 800c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9e4 <__copybits>:
 800c9e4:	3901      	subs	r1, #1
 800c9e6:	b510      	push	{r4, lr}
 800c9e8:	1149      	asrs	r1, r1, #5
 800c9ea:	6914      	ldr	r4, [r2, #16]
 800c9ec:	3101      	adds	r1, #1
 800c9ee:	f102 0314 	add.w	r3, r2, #20
 800c9f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9fa:	42a3      	cmp	r3, r4
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	d303      	bcc.n	800ca08 <__copybits+0x24>
 800ca00:	2300      	movs	r3, #0
 800ca02:	428a      	cmp	r2, r1
 800ca04:	d305      	bcc.n	800ca12 <__copybits+0x2e>
 800ca06:	bd10      	pop	{r4, pc}
 800ca08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca0c:	f840 2b04 	str.w	r2, [r0], #4
 800ca10:	e7f3      	b.n	800c9fa <__copybits+0x16>
 800ca12:	f842 3b04 	str.w	r3, [r2], #4
 800ca16:	e7f4      	b.n	800ca02 <__copybits+0x1e>

0800ca18 <__any_on>:
 800ca18:	f100 0214 	add.w	r2, r0, #20
 800ca1c:	6900      	ldr	r0, [r0, #16]
 800ca1e:	114b      	asrs	r3, r1, #5
 800ca20:	4298      	cmp	r0, r3
 800ca22:	b510      	push	{r4, lr}
 800ca24:	db11      	blt.n	800ca4a <__any_on+0x32>
 800ca26:	dd0a      	ble.n	800ca3e <__any_on+0x26>
 800ca28:	f011 011f 	ands.w	r1, r1, #31
 800ca2c:	d007      	beq.n	800ca3e <__any_on+0x26>
 800ca2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca32:	fa24 f001 	lsr.w	r0, r4, r1
 800ca36:	fa00 f101 	lsl.w	r1, r0, r1
 800ca3a:	428c      	cmp	r4, r1
 800ca3c:	d10b      	bne.n	800ca56 <__any_on+0x3e>
 800ca3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d803      	bhi.n	800ca4e <__any_on+0x36>
 800ca46:	2000      	movs	r0, #0
 800ca48:	bd10      	pop	{r4, pc}
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	e7f7      	b.n	800ca3e <__any_on+0x26>
 800ca4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca52:	2900      	cmp	r1, #0
 800ca54:	d0f5      	beq.n	800ca42 <__any_on+0x2a>
 800ca56:	2001      	movs	r0, #1
 800ca58:	e7f6      	b.n	800ca48 <__any_on+0x30>

0800ca5a <_calloc_r>:
 800ca5a:	b538      	push	{r3, r4, r5, lr}
 800ca5c:	fb02 f401 	mul.w	r4, r2, r1
 800ca60:	4621      	mov	r1, r4
 800ca62:	f000 f857 	bl	800cb14 <_malloc_r>
 800ca66:	4605      	mov	r5, r0
 800ca68:	b118      	cbz	r0, 800ca72 <_calloc_r+0x18>
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	f7fc ffad 	bl	80099cc <memset>
 800ca72:	4628      	mov	r0, r5
 800ca74:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ca78 <_free_r>:
 800ca78:	b538      	push	{r3, r4, r5, lr}
 800ca7a:	4605      	mov	r5, r0
 800ca7c:	2900      	cmp	r1, #0
 800ca7e:	d045      	beq.n	800cb0c <_free_r+0x94>
 800ca80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca84:	1f0c      	subs	r4, r1, #4
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	bfb8      	it	lt
 800ca8a:	18e4      	addlt	r4, r4, r3
 800ca8c:	f000 fa36 	bl	800cefc <__malloc_lock>
 800ca90:	4a1f      	ldr	r2, [pc, #124]	; (800cb10 <_free_r+0x98>)
 800ca92:	6813      	ldr	r3, [r2, #0]
 800ca94:	4610      	mov	r0, r2
 800ca96:	b933      	cbnz	r3, 800caa6 <_free_r+0x2e>
 800ca98:	6063      	str	r3, [r4, #4]
 800ca9a:	6014      	str	r4, [r2, #0]
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caa2:	f000 ba2c 	b.w	800cefe <__malloc_unlock>
 800caa6:	42a3      	cmp	r3, r4
 800caa8:	d90c      	bls.n	800cac4 <_free_r+0x4c>
 800caaa:	6821      	ldr	r1, [r4, #0]
 800caac:	1862      	adds	r2, r4, r1
 800caae:	4293      	cmp	r3, r2
 800cab0:	bf04      	itt	eq
 800cab2:	681a      	ldreq	r2, [r3, #0]
 800cab4:	685b      	ldreq	r3, [r3, #4]
 800cab6:	6063      	str	r3, [r4, #4]
 800cab8:	bf04      	itt	eq
 800caba:	1852      	addeq	r2, r2, r1
 800cabc:	6022      	streq	r2, [r4, #0]
 800cabe:	6004      	str	r4, [r0, #0]
 800cac0:	e7ec      	b.n	800ca9c <_free_r+0x24>
 800cac2:	4613      	mov	r3, r2
 800cac4:	685a      	ldr	r2, [r3, #4]
 800cac6:	b10a      	cbz	r2, 800cacc <_free_r+0x54>
 800cac8:	42a2      	cmp	r2, r4
 800caca:	d9fa      	bls.n	800cac2 <_free_r+0x4a>
 800cacc:	6819      	ldr	r1, [r3, #0]
 800cace:	1858      	adds	r0, r3, r1
 800cad0:	42a0      	cmp	r0, r4
 800cad2:	d10b      	bne.n	800caec <_free_r+0x74>
 800cad4:	6820      	ldr	r0, [r4, #0]
 800cad6:	4401      	add	r1, r0
 800cad8:	1858      	adds	r0, r3, r1
 800cada:	4282      	cmp	r2, r0
 800cadc:	6019      	str	r1, [r3, #0]
 800cade:	d1dd      	bne.n	800ca9c <_free_r+0x24>
 800cae0:	6810      	ldr	r0, [r2, #0]
 800cae2:	6852      	ldr	r2, [r2, #4]
 800cae4:	605a      	str	r2, [r3, #4]
 800cae6:	4401      	add	r1, r0
 800cae8:	6019      	str	r1, [r3, #0]
 800caea:	e7d7      	b.n	800ca9c <_free_r+0x24>
 800caec:	d902      	bls.n	800caf4 <_free_r+0x7c>
 800caee:	230c      	movs	r3, #12
 800caf0:	602b      	str	r3, [r5, #0]
 800caf2:	e7d3      	b.n	800ca9c <_free_r+0x24>
 800caf4:	6820      	ldr	r0, [r4, #0]
 800caf6:	1821      	adds	r1, r4, r0
 800caf8:	428a      	cmp	r2, r1
 800cafa:	bf04      	itt	eq
 800cafc:	6811      	ldreq	r1, [r2, #0]
 800cafe:	6852      	ldreq	r2, [r2, #4]
 800cb00:	6062      	str	r2, [r4, #4]
 800cb02:	bf04      	itt	eq
 800cb04:	1809      	addeq	r1, r1, r0
 800cb06:	6021      	streq	r1, [r4, #0]
 800cb08:	605c      	str	r4, [r3, #4]
 800cb0a:	e7c7      	b.n	800ca9c <_free_r+0x24>
 800cb0c:	bd38      	pop	{r3, r4, r5, pc}
 800cb0e:	bf00      	nop
 800cb10:	20000208 	.word	0x20000208

0800cb14 <_malloc_r>:
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	1ccd      	adds	r5, r1, #3
 800cb18:	f025 0503 	bic.w	r5, r5, #3
 800cb1c:	3508      	adds	r5, #8
 800cb1e:	2d0c      	cmp	r5, #12
 800cb20:	bf38      	it	cc
 800cb22:	250c      	movcc	r5, #12
 800cb24:	2d00      	cmp	r5, #0
 800cb26:	4606      	mov	r6, r0
 800cb28:	db01      	blt.n	800cb2e <_malloc_r+0x1a>
 800cb2a:	42a9      	cmp	r1, r5
 800cb2c:	d903      	bls.n	800cb36 <_malloc_r+0x22>
 800cb2e:	230c      	movs	r3, #12
 800cb30:	6033      	str	r3, [r6, #0]
 800cb32:	2000      	movs	r0, #0
 800cb34:	bd70      	pop	{r4, r5, r6, pc}
 800cb36:	f000 f9e1 	bl	800cefc <__malloc_lock>
 800cb3a:	4a21      	ldr	r2, [pc, #132]	; (800cbc0 <_malloc_r+0xac>)
 800cb3c:	6814      	ldr	r4, [r2, #0]
 800cb3e:	4621      	mov	r1, r4
 800cb40:	b991      	cbnz	r1, 800cb68 <_malloc_r+0x54>
 800cb42:	4c20      	ldr	r4, [pc, #128]	; (800cbc4 <_malloc_r+0xb0>)
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	b91b      	cbnz	r3, 800cb50 <_malloc_r+0x3c>
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f000 f98f 	bl	800ce6c <_sbrk_r>
 800cb4e:	6020      	str	r0, [r4, #0]
 800cb50:	4629      	mov	r1, r5
 800cb52:	4630      	mov	r0, r6
 800cb54:	f000 f98a 	bl	800ce6c <_sbrk_r>
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	d124      	bne.n	800cba6 <_malloc_r+0x92>
 800cb5c:	230c      	movs	r3, #12
 800cb5e:	6033      	str	r3, [r6, #0]
 800cb60:	4630      	mov	r0, r6
 800cb62:	f000 f9cc 	bl	800cefe <__malloc_unlock>
 800cb66:	e7e4      	b.n	800cb32 <_malloc_r+0x1e>
 800cb68:	680b      	ldr	r3, [r1, #0]
 800cb6a:	1b5b      	subs	r3, r3, r5
 800cb6c:	d418      	bmi.n	800cba0 <_malloc_r+0x8c>
 800cb6e:	2b0b      	cmp	r3, #11
 800cb70:	d90f      	bls.n	800cb92 <_malloc_r+0x7e>
 800cb72:	600b      	str	r3, [r1, #0]
 800cb74:	50cd      	str	r5, [r1, r3]
 800cb76:	18cc      	adds	r4, r1, r3
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f000 f9c0 	bl	800cefe <__malloc_unlock>
 800cb7e:	f104 000b 	add.w	r0, r4, #11
 800cb82:	1d23      	adds	r3, r4, #4
 800cb84:	f020 0007 	bic.w	r0, r0, #7
 800cb88:	1ac3      	subs	r3, r0, r3
 800cb8a:	d0d3      	beq.n	800cb34 <_malloc_r+0x20>
 800cb8c:	425a      	negs	r2, r3
 800cb8e:	50e2      	str	r2, [r4, r3]
 800cb90:	e7d0      	b.n	800cb34 <_malloc_r+0x20>
 800cb92:	428c      	cmp	r4, r1
 800cb94:	684b      	ldr	r3, [r1, #4]
 800cb96:	bf16      	itet	ne
 800cb98:	6063      	strne	r3, [r4, #4]
 800cb9a:	6013      	streq	r3, [r2, #0]
 800cb9c:	460c      	movne	r4, r1
 800cb9e:	e7eb      	b.n	800cb78 <_malloc_r+0x64>
 800cba0:	460c      	mov	r4, r1
 800cba2:	6849      	ldr	r1, [r1, #4]
 800cba4:	e7cc      	b.n	800cb40 <_malloc_r+0x2c>
 800cba6:	1cc4      	adds	r4, r0, #3
 800cba8:	f024 0403 	bic.w	r4, r4, #3
 800cbac:	42a0      	cmp	r0, r4
 800cbae:	d005      	beq.n	800cbbc <_malloc_r+0xa8>
 800cbb0:	1a21      	subs	r1, r4, r0
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	f000 f95a 	bl	800ce6c <_sbrk_r>
 800cbb8:	3001      	adds	r0, #1
 800cbba:	d0cf      	beq.n	800cb5c <_malloc_r+0x48>
 800cbbc:	6025      	str	r5, [r4, #0]
 800cbbe:	e7db      	b.n	800cb78 <_malloc_r+0x64>
 800cbc0:	20000208 	.word	0x20000208
 800cbc4:	2000020c 	.word	0x2000020c

0800cbc8 <__ssputs_r>:
 800cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	688e      	ldr	r6, [r1, #8]
 800cbce:	429e      	cmp	r6, r3
 800cbd0:	4682      	mov	sl, r0
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	4690      	mov	r8, r2
 800cbd6:	4699      	mov	r9, r3
 800cbd8:	d837      	bhi.n	800cc4a <__ssputs_r+0x82>
 800cbda:	898a      	ldrh	r2, [r1, #12]
 800cbdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbe0:	d031      	beq.n	800cc46 <__ssputs_r+0x7e>
 800cbe2:	6825      	ldr	r5, [r4, #0]
 800cbe4:	6909      	ldr	r1, [r1, #16]
 800cbe6:	1a6f      	subs	r7, r5, r1
 800cbe8:	6965      	ldr	r5, [r4, #20]
 800cbea:	2302      	movs	r3, #2
 800cbec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbf0:	fb95 f5f3 	sdiv	r5, r5, r3
 800cbf4:	f109 0301 	add.w	r3, r9, #1
 800cbf8:	443b      	add	r3, r7
 800cbfa:	429d      	cmp	r5, r3
 800cbfc:	bf38      	it	cc
 800cbfe:	461d      	movcc	r5, r3
 800cc00:	0553      	lsls	r3, r2, #21
 800cc02:	d530      	bpl.n	800cc66 <__ssputs_r+0x9e>
 800cc04:	4629      	mov	r1, r5
 800cc06:	f7ff ff85 	bl	800cb14 <_malloc_r>
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	b950      	cbnz	r0, 800cc24 <__ssputs_r+0x5c>
 800cc0e:	230c      	movs	r3, #12
 800cc10:	f8ca 3000 	str.w	r3, [sl]
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc24:	463a      	mov	r2, r7
 800cc26:	6921      	ldr	r1, [r4, #16]
 800cc28:	f7ff fb0e 	bl	800c248 <memcpy>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc36:	81a3      	strh	r3, [r4, #12]
 800cc38:	6126      	str	r6, [r4, #16]
 800cc3a:	6165      	str	r5, [r4, #20]
 800cc3c:	443e      	add	r6, r7
 800cc3e:	1bed      	subs	r5, r5, r7
 800cc40:	6026      	str	r6, [r4, #0]
 800cc42:	60a5      	str	r5, [r4, #8]
 800cc44:	464e      	mov	r6, r9
 800cc46:	454e      	cmp	r6, r9
 800cc48:	d900      	bls.n	800cc4c <__ssputs_r+0x84>
 800cc4a:	464e      	mov	r6, r9
 800cc4c:	4632      	mov	r2, r6
 800cc4e:	4641      	mov	r1, r8
 800cc50:	6820      	ldr	r0, [r4, #0]
 800cc52:	f000 f93a 	bl	800ceca <memmove>
 800cc56:	68a3      	ldr	r3, [r4, #8]
 800cc58:	1b9b      	subs	r3, r3, r6
 800cc5a:	60a3      	str	r3, [r4, #8]
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	441e      	add	r6, r3
 800cc60:	6026      	str	r6, [r4, #0]
 800cc62:	2000      	movs	r0, #0
 800cc64:	e7dc      	b.n	800cc20 <__ssputs_r+0x58>
 800cc66:	462a      	mov	r2, r5
 800cc68:	f000 f94a 	bl	800cf00 <_realloc_r>
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d1e2      	bne.n	800cc38 <__ssputs_r+0x70>
 800cc72:	6921      	ldr	r1, [r4, #16]
 800cc74:	4650      	mov	r0, sl
 800cc76:	f7ff feff 	bl	800ca78 <_free_r>
 800cc7a:	e7c8      	b.n	800cc0e <__ssputs_r+0x46>

0800cc7c <_svfiprintf_r>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	461d      	mov	r5, r3
 800cc82:	898b      	ldrh	r3, [r1, #12]
 800cc84:	061f      	lsls	r7, r3, #24
 800cc86:	b09d      	sub	sp, #116	; 0x74
 800cc88:	4680      	mov	r8, r0
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	4616      	mov	r6, r2
 800cc8e:	d50f      	bpl.n	800ccb0 <_svfiprintf_r+0x34>
 800cc90:	690b      	ldr	r3, [r1, #16]
 800cc92:	b96b      	cbnz	r3, 800ccb0 <_svfiprintf_r+0x34>
 800cc94:	2140      	movs	r1, #64	; 0x40
 800cc96:	f7ff ff3d 	bl	800cb14 <_malloc_r>
 800cc9a:	6020      	str	r0, [r4, #0]
 800cc9c:	6120      	str	r0, [r4, #16]
 800cc9e:	b928      	cbnz	r0, 800ccac <_svfiprintf_r+0x30>
 800cca0:	230c      	movs	r3, #12
 800cca2:	f8c8 3000 	str.w	r3, [r8]
 800cca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccaa:	e0c8      	b.n	800ce3e <_svfiprintf_r+0x1c2>
 800ccac:	2340      	movs	r3, #64	; 0x40
 800ccae:	6163      	str	r3, [r4, #20]
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb4:	2320      	movs	r3, #32
 800ccb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccba:	2330      	movs	r3, #48	; 0x30
 800ccbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccc0:	9503      	str	r5, [sp, #12]
 800ccc2:	f04f 0b01 	mov.w	fp, #1
 800ccc6:	4637      	mov	r7, r6
 800ccc8:	463d      	mov	r5, r7
 800ccca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ccce:	b10b      	cbz	r3, 800ccd4 <_svfiprintf_r+0x58>
 800ccd0:	2b25      	cmp	r3, #37	; 0x25
 800ccd2:	d13e      	bne.n	800cd52 <_svfiprintf_r+0xd6>
 800ccd4:	ebb7 0a06 	subs.w	sl, r7, r6
 800ccd8:	d00b      	beq.n	800ccf2 <_svfiprintf_r+0x76>
 800ccda:	4653      	mov	r3, sl
 800ccdc:	4632      	mov	r2, r6
 800ccde:	4621      	mov	r1, r4
 800cce0:	4640      	mov	r0, r8
 800cce2:	f7ff ff71 	bl	800cbc8 <__ssputs_r>
 800cce6:	3001      	adds	r0, #1
 800cce8:	f000 80a4 	beq.w	800ce34 <_svfiprintf_r+0x1b8>
 800ccec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccee:	4453      	add	r3, sl
 800ccf0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf2:	783b      	ldrb	r3, [r7, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f000 809d 	beq.w	800ce34 <_svfiprintf_r+0x1b8>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f04f 32ff 	mov.w	r2, #4294967295
 800cd00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd04:	9304      	str	r3, [sp, #16]
 800cd06:	9307      	str	r3, [sp, #28]
 800cd08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd0c:	931a      	str	r3, [sp, #104]	; 0x68
 800cd0e:	462f      	mov	r7, r5
 800cd10:	2205      	movs	r2, #5
 800cd12:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cd16:	4850      	ldr	r0, [pc, #320]	; (800ce58 <_svfiprintf_r+0x1dc>)
 800cd18:	f7f3 fa82 	bl	8000220 <memchr>
 800cd1c:	9b04      	ldr	r3, [sp, #16]
 800cd1e:	b9d0      	cbnz	r0, 800cd56 <_svfiprintf_r+0xda>
 800cd20:	06d9      	lsls	r1, r3, #27
 800cd22:	bf44      	itt	mi
 800cd24:	2220      	movmi	r2, #32
 800cd26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd2a:	071a      	lsls	r2, r3, #28
 800cd2c:	bf44      	itt	mi
 800cd2e:	222b      	movmi	r2, #43	; 0x2b
 800cd30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd34:	782a      	ldrb	r2, [r5, #0]
 800cd36:	2a2a      	cmp	r2, #42	; 0x2a
 800cd38:	d015      	beq.n	800cd66 <_svfiprintf_r+0xea>
 800cd3a:	9a07      	ldr	r2, [sp, #28]
 800cd3c:	462f      	mov	r7, r5
 800cd3e:	2000      	movs	r0, #0
 800cd40:	250a      	movs	r5, #10
 800cd42:	4639      	mov	r1, r7
 800cd44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd48:	3b30      	subs	r3, #48	; 0x30
 800cd4a:	2b09      	cmp	r3, #9
 800cd4c:	d94d      	bls.n	800cdea <_svfiprintf_r+0x16e>
 800cd4e:	b1b8      	cbz	r0, 800cd80 <_svfiprintf_r+0x104>
 800cd50:	e00f      	b.n	800cd72 <_svfiprintf_r+0xf6>
 800cd52:	462f      	mov	r7, r5
 800cd54:	e7b8      	b.n	800ccc8 <_svfiprintf_r+0x4c>
 800cd56:	4a40      	ldr	r2, [pc, #256]	; (800ce58 <_svfiprintf_r+0x1dc>)
 800cd58:	1a80      	subs	r0, r0, r2
 800cd5a:	fa0b f000 	lsl.w	r0, fp, r0
 800cd5e:	4318      	orrs	r0, r3
 800cd60:	9004      	str	r0, [sp, #16]
 800cd62:	463d      	mov	r5, r7
 800cd64:	e7d3      	b.n	800cd0e <_svfiprintf_r+0x92>
 800cd66:	9a03      	ldr	r2, [sp, #12]
 800cd68:	1d11      	adds	r1, r2, #4
 800cd6a:	6812      	ldr	r2, [r2, #0]
 800cd6c:	9103      	str	r1, [sp, #12]
 800cd6e:	2a00      	cmp	r2, #0
 800cd70:	db01      	blt.n	800cd76 <_svfiprintf_r+0xfa>
 800cd72:	9207      	str	r2, [sp, #28]
 800cd74:	e004      	b.n	800cd80 <_svfiprintf_r+0x104>
 800cd76:	4252      	negs	r2, r2
 800cd78:	f043 0302 	orr.w	r3, r3, #2
 800cd7c:	9207      	str	r2, [sp, #28]
 800cd7e:	9304      	str	r3, [sp, #16]
 800cd80:	783b      	ldrb	r3, [r7, #0]
 800cd82:	2b2e      	cmp	r3, #46	; 0x2e
 800cd84:	d10c      	bne.n	800cda0 <_svfiprintf_r+0x124>
 800cd86:	787b      	ldrb	r3, [r7, #1]
 800cd88:	2b2a      	cmp	r3, #42	; 0x2a
 800cd8a:	d133      	bne.n	800cdf4 <_svfiprintf_r+0x178>
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	1d1a      	adds	r2, r3, #4
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	9203      	str	r2, [sp, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	bfb8      	it	lt
 800cd98:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd9c:	3702      	adds	r7, #2
 800cd9e:	9305      	str	r3, [sp, #20]
 800cda0:	4d2e      	ldr	r5, [pc, #184]	; (800ce5c <_svfiprintf_r+0x1e0>)
 800cda2:	7839      	ldrb	r1, [r7, #0]
 800cda4:	2203      	movs	r2, #3
 800cda6:	4628      	mov	r0, r5
 800cda8:	f7f3 fa3a 	bl	8000220 <memchr>
 800cdac:	b138      	cbz	r0, 800cdbe <_svfiprintf_r+0x142>
 800cdae:	2340      	movs	r3, #64	; 0x40
 800cdb0:	1b40      	subs	r0, r0, r5
 800cdb2:	fa03 f000 	lsl.w	r0, r3, r0
 800cdb6:	9b04      	ldr	r3, [sp, #16]
 800cdb8:	4303      	orrs	r3, r0
 800cdba:	3701      	adds	r7, #1
 800cdbc:	9304      	str	r3, [sp, #16]
 800cdbe:	7839      	ldrb	r1, [r7, #0]
 800cdc0:	4827      	ldr	r0, [pc, #156]	; (800ce60 <_svfiprintf_r+0x1e4>)
 800cdc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdc6:	2206      	movs	r2, #6
 800cdc8:	1c7e      	adds	r6, r7, #1
 800cdca:	f7f3 fa29 	bl	8000220 <memchr>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d038      	beq.n	800ce44 <_svfiprintf_r+0x1c8>
 800cdd2:	4b24      	ldr	r3, [pc, #144]	; (800ce64 <_svfiprintf_r+0x1e8>)
 800cdd4:	bb13      	cbnz	r3, 800ce1c <_svfiprintf_r+0x1a0>
 800cdd6:	9b03      	ldr	r3, [sp, #12]
 800cdd8:	3307      	adds	r3, #7
 800cdda:	f023 0307 	bic.w	r3, r3, #7
 800cdde:	3308      	adds	r3, #8
 800cde0:	9303      	str	r3, [sp, #12]
 800cde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde4:	444b      	add	r3, r9
 800cde6:	9309      	str	r3, [sp, #36]	; 0x24
 800cde8:	e76d      	b.n	800ccc6 <_svfiprintf_r+0x4a>
 800cdea:	fb05 3202 	mla	r2, r5, r2, r3
 800cdee:	2001      	movs	r0, #1
 800cdf0:	460f      	mov	r7, r1
 800cdf2:	e7a6      	b.n	800cd42 <_svfiprintf_r+0xc6>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	3701      	adds	r7, #1
 800cdf8:	9305      	str	r3, [sp, #20]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	250a      	movs	r5, #10
 800cdfe:	4638      	mov	r0, r7
 800ce00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce04:	3a30      	subs	r2, #48	; 0x30
 800ce06:	2a09      	cmp	r2, #9
 800ce08:	d903      	bls.n	800ce12 <_svfiprintf_r+0x196>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0c8      	beq.n	800cda0 <_svfiprintf_r+0x124>
 800ce0e:	9105      	str	r1, [sp, #20]
 800ce10:	e7c6      	b.n	800cda0 <_svfiprintf_r+0x124>
 800ce12:	fb05 2101 	mla	r1, r5, r1, r2
 800ce16:	2301      	movs	r3, #1
 800ce18:	4607      	mov	r7, r0
 800ce1a:	e7f0      	b.n	800cdfe <_svfiprintf_r+0x182>
 800ce1c:	ab03      	add	r3, sp, #12
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	4622      	mov	r2, r4
 800ce22:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <_svfiprintf_r+0x1ec>)
 800ce24:	a904      	add	r1, sp, #16
 800ce26:	4640      	mov	r0, r8
 800ce28:	f7fc fe6c 	bl	8009b04 <_printf_float>
 800ce2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce30:	4681      	mov	r9, r0
 800ce32:	d1d6      	bne.n	800cde2 <_svfiprintf_r+0x166>
 800ce34:	89a3      	ldrh	r3, [r4, #12]
 800ce36:	065b      	lsls	r3, r3, #25
 800ce38:	f53f af35 	bmi.w	800cca6 <_svfiprintf_r+0x2a>
 800ce3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce3e:	b01d      	add	sp, #116	; 0x74
 800ce40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce44:	ab03      	add	r3, sp, #12
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	4622      	mov	r2, r4
 800ce4a:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <_svfiprintf_r+0x1ec>)
 800ce4c:	a904      	add	r1, sp, #16
 800ce4e:	4640      	mov	r0, r8
 800ce50:	f7fd f90e 	bl	800a070 <_printf_i>
 800ce54:	e7ea      	b.n	800ce2c <_svfiprintf_r+0x1b0>
 800ce56:	bf00      	nop
 800ce58:	0800d2ac 	.word	0x0800d2ac
 800ce5c:	0800d2b2 	.word	0x0800d2b2
 800ce60:	0800d2b6 	.word	0x0800d2b6
 800ce64:	08009b05 	.word	0x08009b05
 800ce68:	0800cbc9 	.word	0x0800cbc9

0800ce6c <_sbrk_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4c06      	ldr	r4, [pc, #24]	; (800ce88 <_sbrk_r+0x1c>)
 800ce70:	2300      	movs	r3, #0
 800ce72:	4605      	mov	r5, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	6023      	str	r3, [r4, #0]
 800ce78:	f7fc f9fa 	bl	8009270 <_sbrk>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	d102      	bne.n	800ce86 <_sbrk_r+0x1a>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	b103      	cbz	r3, 800ce86 <_sbrk_r+0x1a>
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	20000934 	.word	0x20000934

0800ce8c <strncmp>:
 800ce8c:	b510      	push	{r4, lr}
 800ce8e:	b16a      	cbz	r2, 800ceac <strncmp+0x20>
 800ce90:	3901      	subs	r1, #1
 800ce92:	1884      	adds	r4, r0, r2
 800ce94:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ce98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d103      	bne.n	800cea8 <strncmp+0x1c>
 800cea0:	42a0      	cmp	r0, r4
 800cea2:	d001      	beq.n	800cea8 <strncmp+0x1c>
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1f5      	bne.n	800ce94 <strncmp+0x8>
 800cea8:	1a98      	subs	r0, r3, r2
 800ceaa:	bd10      	pop	{r4, pc}
 800ceac:	4610      	mov	r0, r2
 800ceae:	e7fc      	b.n	800ceaa <strncmp+0x1e>

0800ceb0 <__ascii_wctomb>:
 800ceb0:	b149      	cbz	r1, 800cec6 <__ascii_wctomb+0x16>
 800ceb2:	2aff      	cmp	r2, #255	; 0xff
 800ceb4:	bf85      	ittet	hi
 800ceb6:	238a      	movhi	r3, #138	; 0x8a
 800ceb8:	6003      	strhi	r3, [r0, #0]
 800ceba:	700a      	strbls	r2, [r1, #0]
 800cebc:	f04f 30ff 	movhi.w	r0, #4294967295
 800cec0:	bf98      	it	ls
 800cec2:	2001      	movls	r0, #1
 800cec4:	4770      	bx	lr
 800cec6:	4608      	mov	r0, r1
 800cec8:	4770      	bx	lr

0800ceca <memmove>:
 800ceca:	4288      	cmp	r0, r1
 800cecc:	b510      	push	{r4, lr}
 800cece:	eb01 0302 	add.w	r3, r1, r2
 800ced2:	d807      	bhi.n	800cee4 <memmove+0x1a>
 800ced4:	1e42      	subs	r2, r0, #1
 800ced6:	4299      	cmp	r1, r3
 800ced8:	d00a      	beq.n	800cef0 <memmove+0x26>
 800ceda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cede:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cee2:	e7f8      	b.n	800ced6 <memmove+0xc>
 800cee4:	4283      	cmp	r3, r0
 800cee6:	d9f5      	bls.n	800ced4 <memmove+0xa>
 800cee8:	1881      	adds	r1, r0, r2
 800ceea:	1ad2      	subs	r2, r2, r3
 800ceec:	42d3      	cmn	r3, r2
 800ceee:	d100      	bne.n	800cef2 <memmove+0x28>
 800cef0:	bd10      	pop	{r4, pc}
 800cef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cef6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cefa:	e7f7      	b.n	800ceec <memmove+0x22>

0800cefc <__malloc_lock>:
 800cefc:	4770      	bx	lr

0800cefe <__malloc_unlock>:
 800cefe:	4770      	bx	lr

0800cf00 <_realloc_r>:
 800cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf02:	4607      	mov	r7, r0
 800cf04:	4614      	mov	r4, r2
 800cf06:	460e      	mov	r6, r1
 800cf08:	b921      	cbnz	r1, 800cf14 <_realloc_r+0x14>
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cf10:	f7ff be00 	b.w	800cb14 <_malloc_r>
 800cf14:	b922      	cbnz	r2, 800cf20 <_realloc_r+0x20>
 800cf16:	f7ff fdaf 	bl	800ca78 <_free_r>
 800cf1a:	4625      	mov	r5, r4
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf20:	f000 f814 	bl	800cf4c <_malloc_usable_size_r>
 800cf24:	42a0      	cmp	r0, r4
 800cf26:	d20f      	bcs.n	800cf48 <_realloc_r+0x48>
 800cf28:	4621      	mov	r1, r4
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	f7ff fdf2 	bl	800cb14 <_malloc_r>
 800cf30:	4605      	mov	r5, r0
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d0f2      	beq.n	800cf1c <_realloc_r+0x1c>
 800cf36:	4631      	mov	r1, r6
 800cf38:	4622      	mov	r2, r4
 800cf3a:	f7ff f985 	bl	800c248 <memcpy>
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7ff fd99 	bl	800ca78 <_free_r>
 800cf46:	e7e9      	b.n	800cf1c <_realloc_r+0x1c>
 800cf48:	4635      	mov	r5, r6
 800cf4a:	e7e7      	b.n	800cf1c <_realloc_r+0x1c>

0800cf4c <_malloc_usable_size_r>:
 800cf4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf50:	1f18      	subs	r0, r3, #4
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	bfbc      	itt	lt
 800cf56:	580b      	ldrlt	r3, [r1, r0]
 800cf58:	18c0      	addlt	r0, r0, r3
 800cf5a:	4770      	bx	lr
 800cf5c:	0000      	movs	r0, r0
	...

0800cf60 <floor>:
 800cf60:	ec51 0b10 	vmov	r0, r1, d0
 800cf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cf6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cf70:	2e13      	cmp	r6, #19
 800cf72:	460c      	mov	r4, r1
 800cf74:	ee10 5a10 	vmov	r5, s0
 800cf78:	4680      	mov	r8, r0
 800cf7a:	dc34      	bgt.n	800cfe6 <floor+0x86>
 800cf7c:	2e00      	cmp	r6, #0
 800cf7e:	da16      	bge.n	800cfae <floor+0x4e>
 800cf80:	a335      	add	r3, pc, #212	; (adr r3, 800d058 <floor+0xf8>)
 800cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf86:	f7f3 f9a1 	bl	80002cc <__adddf3>
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f7f3 fde3 	bl	8000b58 <__aeabi_dcmpgt>
 800cf92:	b148      	cbz	r0, 800cfa8 <floor+0x48>
 800cf94:	2c00      	cmp	r4, #0
 800cf96:	da59      	bge.n	800d04c <floor+0xec>
 800cf98:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cf9c:	4a30      	ldr	r2, [pc, #192]	; (800d060 <floor+0x100>)
 800cf9e:	432b      	orrs	r3, r5
 800cfa0:	2500      	movs	r5, #0
 800cfa2:	42ab      	cmp	r3, r5
 800cfa4:	bf18      	it	ne
 800cfa6:	4614      	movne	r4, r2
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	4628      	mov	r0, r5
 800cfac:	e025      	b.n	800cffa <floor+0x9a>
 800cfae:	4f2d      	ldr	r7, [pc, #180]	; (800d064 <floor+0x104>)
 800cfb0:	4137      	asrs	r7, r6
 800cfb2:	ea01 0307 	and.w	r3, r1, r7
 800cfb6:	4303      	orrs	r3, r0
 800cfb8:	d01f      	beq.n	800cffa <floor+0x9a>
 800cfba:	a327      	add	r3, pc, #156	; (adr r3, 800d058 <floor+0xf8>)
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	f7f3 f984 	bl	80002cc <__adddf3>
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f7f3 fdc6 	bl	8000b58 <__aeabi_dcmpgt>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	d0eb      	beq.n	800cfa8 <floor+0x48>
 800cfd0:	2c00      	cmp	r4, #0
 800cfd2:	bfbe      	ittt	lt
 800cfd4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cfd8:	fa43 f606 	asrlt.w	r6, r3, r6
 800cfdc:	19a4      	addlt	r4, r4, r6
 800cfde:	ea24 0407 	bic.w	r4, r4, r7
 800cfe2:	2500      	movs	r5, #0
 800cfe4:	e7e0      	b.n	800cfa8 <floor+0x48>
 800cfe6:	2e33      	cmp	r6, #51	; 0x33
 800cfe8:	dd0b      	ble.n	800d002 <floor+0xa2>
 800cfea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cfee:	d104      	bne.n	800cffa <floor+0x9a>
 800cff0:	ee10 2a10 	vmov	r2, s0
 800cff4:	460b      	mov	r3, r1
 800cff6:	f7f3 f969 	bl	80002cc <__adddf3>
 800cffa:	ec41 0b10 	vmov	d0, r0, r1
 800cffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d002:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d006:	f04f 33ff 	mov.w	r3, #4294967295
 800d00a:	fa23 f707 	lsr.w	r7, r3, r7
 800d00e:	4207      	tst	r7, r0
 800d010:	d0f3      	beq.n	800cffa <floor+0x9a>
 800d012:	a311      	add	r3, pc, #68	; (adr r3, 800d058 <floor+0xf8>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	f7f3 f958 	bl	80002cc <__adddf3>
 800d01c:	2200      	movs	r2, #0
 800d01e:	2300      	movs	r3, #0
 800d020:	f7f3 fd9a 	bl	8000b58 <__aeabi_dcmpgt>
 800d024:	2800      	cmp	r0, #0
 800d026:	d0bf      	beq.n	800cfa8 <floor+0x48>
 800d028:	2c00      	cmp	r4, #0
 800d02a:	da02      	bge.n	800d032 <floor+0xd2>
 800d02c:	2e14      	cmp	r6, #20
 800d02e:	d103      	bne.n	800d038 <floor+0xd8>
 800d030:	3401      	adds	r4, #1
 800d032:	ea25 0507 	bic.w	r5, r5, r7
 800d036:	e7b7      	b.n	800cfa8 <floor+0x48>
 800d038:	2301      	movs	r3, #1
 800d03a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d03e:	fa03 f606 	lsl.w	r6, r3, r6
 800d042:	4435      	add	r5, r6
 800d044:	4545      	cmp	r5, r8
 800d046:	bf38      	it	cc
 800d048:	18e4      	addcc	r4, r4, r3
 800d04a:	e7f2      	b.n	800d032 <floor+0xd2>
 800d04c:	2500      	movs	r5, #0
 800d04e:	462c      	mov	r4, r5
 800d050:	e7aa      	b.n	800cfa8 <floor+0x48>
 800d052:	bf00      	nop
 800d054:	f3af 8000 	nop.w
 800d058:	8800759c 	.word	0x8800759c
 800d05c:	7e37e43c 	.word	0x7e37e43c
 800d060:	bff00000 	.word	0xbff00000
 800d064:	000fffff 	.word	0x000fffff

0800d068 <_init>:
 800d068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06a:	bf00      	nop
 800d06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d06e:	bc08      	pop	{r3}
 800d070:	469e      	mov	lr, r3
 800d072:	4770      	bx	lr

0800d074 <_fini>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	bf00      	nop
 800d078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d07a:	bc08      	pop	{r3}
 800d07c:	469e      	mov	lr, r3
 800d07e:	4770      	bx	lr
